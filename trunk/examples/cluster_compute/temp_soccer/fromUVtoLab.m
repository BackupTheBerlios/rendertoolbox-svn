clear all; close all;toneMap.factor = 7.433896005470254e-05; S = [400 10 31];wls = SToWls(S);% Load in human conesload T_cones_ss2;T_cones = SplineCmf(S_cones_ss2,T_cones_ss2,S);S_cones = S;load spd_D65illumspectrum = SplineSrf(S_D65,spd_D65,S);e = illumspectrum; for i = 1:length(wls)    illuminantWatts(i) = illumspectrum(i);    noLights(i)  = illumspectrum(i)*0; end% calculate surface spectrum for the specific UV value for the test sphere.% Load in Standard surface linear modelload B_nickersonBs = SplineSrf(S_nickerson,B_nickerson(:,1:3),S);clear S_nickerson B_nickerson%uvPatch = [0.242 0.450]';uvPatch = [0.192 0.445]';%uvPatch = [0.226 0.508]';% assign a chromaticityfraction = 0.5;% get the spectrum data from inverse calculations%sphereSpectrum = RenSpectrumfromChrom(uvSphere,e,Bs,S,fraction);patchSpectrum = RenSpectrumfromChrom(uvPatch,e,Bs,S,fraction);LMScoords = T_cones*diag(illuminantWatts)*patchSpectrum; % Load XYZ color matching functionsload T_xyzJuddVos ; T_xyz = 683*SplineCmf(S_xyzJuddVos,T_xyzJuddVos,S);% Define LMS to XYZ and XYZ to LMS transformation matrixM_LMSToXYZ = ((T_cones')\(T_xyz'))';M_XYZToLMS = inv(M_LMSToXYZ);redXYZ =M_LMSToXYZ*LMScoords;whiteLMS = RenGetLMScoords(19);whiteXYZ = M_LMSToXYZ *whiteLMS;redLab = XYZToLab(redXYZ,whiteXYZ);