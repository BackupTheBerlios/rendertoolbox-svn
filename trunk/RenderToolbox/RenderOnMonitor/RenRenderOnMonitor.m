function [outputImage,maxLum,factor] = RenRenderOnMonitor(monitor,coneImage,T_xyz, T_cones,TONEMAP,clipLevelFactor,clipLumFactor)% [monitorImage,maxLum,factor] =% RenMakeMonitorImage(imageDir,imagePrefix,calFileSpec,T_cones,S_cones,...%    [TONEMAP],[clipLevelFactor],[clipLumFactor])%% This routine takes a cone image and produces a monitor image.% This includes color correction, tone mapping, and gamma correction.% The low-level tone mapping values are returned so that they% may be applied to other images later.%% T_cones: Cone spectral sensitivities.% S_cones: Wavelength sampling for T_cones.% TONEMAP: Tone mape the image? (Default = 1)% SRGB: Ignored.% clipLevelFactor: clipping factor for tone mapping (default = 8)% clupLumFactor: adjustment factor for tone mapping max lum (default = 0.3)%% Refer to SimBasicToneMap for tone mapping algorithm.%% 6/28/04   bx wrote it from RenMakeMonitorImage.m  % 8/03/04   bx passed in T_xyz from the main code instead of calculating here again. % Fill in defaultsif (nargin < 7 | isempty(TONEMAP))    TONEMAP = 1;endif (nargin < 8 | isempty(clipLevelFactor))    clipLevelFactor = 8;endif (nargin < 9 | isempty(clipLumFactor))    clipLumFactor = 0.3;end% Load information to convert LMS to XYZM_ConesToXYZ = (T_cones'\T_xyz')';M_XYZToCones = inv(M_ConesToXYZ);if (TONEMAP)    XYZImage = SimApplyColorTransform(M_ConesToXYZ,coneImage.images);    maxXYZ = M_ConesToXYZ*PrimaryToSensor(monitor,[1 1 1]');    maxMonitorLum = maxXYZ(2);    maxLum = maxMonitorLum*clipLumFactor;	[factor] = RenTonemapParams(XYZImage,maxLum,clipLevelFactor);    XYZImage = RenBasicToneMapWithParams(XYZImage,maxLum,factor);       coneImage.images = SimApplyColorTransform(M_XYZToCones,XYZImage);end    outputImage = coneImage.images;       % Render%[monitorImage,monitor] = SimRenderOnMonitor(coneImage,monitor,1,0,0,1);% Gamma correct%monitorImage = SimRenderOnMonitor(monitorImage,monitor,1,0,0,2);