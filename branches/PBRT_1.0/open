GCC(1)				      GNU				GCC(1)



NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
	   [--gg] [--ppgg] [--OO_l_e_v_e_l]
	   [--WW_w_a_r_n...] [--ppeeddaannttiicc]
	   [--II_d_i_r...] [--LL_d_i_r...]
	   [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
	   [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
	   [--oo _o_u_t_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below for the remain-
       der.  gg++++ accepts mostly the same options as ggcccc.

       Note: In Apple's version of GCC, both cccc and ggcccc are actually symbolic
       links to ggcccc--33..33, while cc++++ and gg++++ are links to gg++++--33..33, unless the
       _gg_cc_cc____ss_ee_ll_ee_cc_tt((11)) command has been used to point them at another compiler
       version.

       Note that Apple's GCC includes a number of extensions to standard GCC
       (flagged below with ``APPLE ONLY''), and that not all generic GCC
       options are available or supported on Darwin / Mac OS X.	 In particu-
       lar, Apple does not currently support the compilation of Fortran, Ada,
       or Java, although there are third parties who have made these work.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing, compilation,
       assembly and linking.  The ``overall options'' allow you to stop this
       process at an intermediate stage.  For example, the --cc option says not
       to run the linker.  Then the output consists of object files output by
       the assembler.

       Other options are passed on to one stage of processing.	Some options
       control the preprocessor and others the compiler itself.	 Yet other
       options control the assembler and linker; most of these are not docu-
       mented here, since you rarely need to use any of them.

       Most of the command line options that you can use with GCC are useful
       for C programs; when an option is only useful with another language
       (usually C++), the explanation says so explicitly.  If the description
       for a particular option does not mention a source language, you can use
       that option with all supported languages.

       The ggcccc program accepts options and file names as operands.  Many
       options have multi-letter names; therefore multiple single-letter
       options may _n_o_t be grouped: --ddrr is very different from --dd --rr.

       You can mix options and other arguments.	 For the most part, the order
       you use doesn't matter.	Order does matter when you use several options
       of the same kind; for example, if you specify --LL more than once, the
       directories are searched in the order specified.

       Many options have long names starting with --ff or with --WW---for example,
       --ffffoorrccee--mmeemm, --ffssttrreennggtthh--rreedduuccee, --WWffoorrmmaatt and so on.  Most of these have
       both positive and negative forms; the negative form of --ffffoooo would be
       --ffnnoo--ffoooo.  This manual documents only one of these two forms, whichever
       one is not the default.

OOPPTTIIOONNSS
       OOppttiioonn SSuummmmaarryy

       Here is a summary of all the options, grouped by type.  Explanations
       are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
	   --cc  --SS  --EE  --oo _f_i_l_e	--ppiippee  --ppaassss--eexxiitt--ccooddeess	 --xx _l_a_n_g_u_a_g_e --OObbjjCC
	   ((AAPPPPLLEE OONNLLYY)) --OObbjjCC++++ ((AAPPPPLLEE OONNLLYY)) --aarrcchh _a_r_c_h ((AAPPPPLLEE OONNLLYY)) --vv	 --######
	   ----hheellpp  ----ttaarrggeett--hheellpp  ----vveerrssiioonn

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --aannssii  --ssttdd==_s_t_a_n_d_a_r_d	 --aauuxx--iinnffoo _f_i_l_e_n_a_m_e --ffaallttiivveecc ((AAPPPPLLEE OONNLLYY))
	   --ffaassmm--bblloocckkss ((AAPPPPLLEE OONNLLYY)) --ffnnoo--aassmm --ffnnoo--bbuuiillttiinn --ffnnoo--bbuuiillttiinn--_f_u_n_c_-
	   _t_i_o_n --ffhhoosstteedd  --ffffrreeeessttaannddiinngg  --ffmmss--eexxtteennssiioonnss --ttrriiggrraapphhss
	   --nnoo--iinntteeggrraatteedd--ccpppp  --ttrraaddiittiioonnaall  --ttrraaddiittiioonnaall--ccpppp --ffaallllooww--ssiinn--
	   ggllee--pprreecciissiioonn  --ffccoonndd--mmiissmmaattcchh --ffccoonnssttaanntt--ccffssttrriinnggss ((AAPPPPLLEE OONNLLYY))
	   --ffppcchh--pprreepprroocceessss ((AAPPPPLLEE OONNLLYY)) --ffssiiggnneedd--bbiittffiieellddss  --ffssiiggnneedd--cchhaarr
	   --ffuunnssiiggnneedd--bbiittffiieellddss	 --ffuunnssiiggnneedd--cchhaarr --ffppaassccaall--ssttrriinnggss ((AAPPPPLLEE OONNLLYY))
	   --ffccooaalleessccee ((AAPPPPLLEE OONNLLYY)) --ffwweeaakk--ccooaalleesscceedd ((AAPPPPLLEE OONNLLYY)) --WWnnoo--##wwaarrnn--
	   iinnggss ((AAPPPPLLEE OONNLLYY)) --WWeexxttrraa--ttookkeennss ((AAPPPPLLEE OONNLLYY)) --WWpprraaggmmaa--oonnccee ((AAPPPPLLEE
	   OONNLLYY)) --WWnneewwlliinnee--eeooff ((AAPPPPLLEE OONNLLYY)) --WWnnoo--aallttiivveecc--lloonngg--ddeepprreeccaatteedd
	   ((AAPPPPLLEE OONNLLYY)) --ffwwrriittaabbllee--ssttrriinnggss

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --ffaabbii--vveerrssiioonn==_n --ffnnoo--aacccceessss--ccoonnttrrooll	--ffcchheecckk--nneeww --ffccoonnsseerrvvee--ssppaaccee
	   --ffnnoo--ccoonnsstt--ssttrriinnggss  --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss --ffnnoo--eelliiddee--ccoonnssttrruucc--
	   ttoorrss --ffnnoo--eennffoorrccee--eehh--ssppeeccss  --ffeexxtteerrnnaall--tteemmppllaatteess --ffaalltt--eexxtteerr--
	   nnaall--tteemmppllaatteess --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee  --ffnnoo--ggnnuu--kkeeyywwoorrddss
	   --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmppllee--
	   mmeenntt--iinnlliinneess --ffiinnddiirreecctt--vviirrttuuaall--ccaallllss ((AAPPPPLLEE OONNLLYY)) --ffaappppllee--kkeexxtt
	   ((AAPPPPLLEE OONNLLYY)) --ffccooaalleessccee--tteemmppllaatteess ((AAPPPPLLEE OONNLLYY)) --ffmmss--eexxtteennssiioonnss
	   --ffnnoo--nnoonnaannssii--bbuuiillttiinnss  --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss
	   --ffppeerrmmiissssiivvee --ffrreeppoo	--ffnnoo--rrttttii  --ffssttaattss  --fftteemmppllaattee--ddeepptthh--_n
	   --ffuussee--ccxxaa--aatteexxiitt  --ffvvttaabbllee--ggcc  --ffnnoo--wweeaakk  --nnoossttddiinncc++++
	   --ffnnoo--ddeeffaauulltt--iinnlliinnee --WWaabbii --WWccttoorr--ddttoorr--pprriivvaaccyy --WWnnoonn--vviirrttuuaall--ddttoorr
	   --WWrreeoorrddeerr --WWeeffffcc++++  --WWnnoo--ddeepprreeccaatteedd --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd
	   --WWoolldd--ssttyyllee--ccaasstt --WWoovveerrllooaaddeedd--vviirrttuuaall  --WWnnoo--ppmmff--ccoonnvveerrssiioonnss
	   --WWssiiggnn--pprroommoo	 --WWssyynntthh

       _O_b_j_e_c_t_i_v_e_-_C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee  --ffnneexxtt--rruunnttiimmee
	   --ffnnoo--nniill--rreecceeiivveerrss ((AAPPPPLLEE OONNLLYY)) --ffoobbjjcc--eexxcceeppttiioonnss ((AAPPPPLLEE OONNLLYY))
	   --ffrreeppllaaccee--oobbjjcc--ccllaasssseess ((AAPPPPLLEE OONNLLYY)) --ffzzeerroo--lliinnkk ((AAPPPPLLEE OONNLLYY))
	   --ggeenn--ddeeccllss --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
	   --ffmmeessssaaggee--lleennggtthh==_n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
	   --ffssyynnttaaxx--oonnllyy  --ppeeddaannttiicc  --ppeeddaannttiicc--eerrrroorrss --ww  --WW  --WWaallll --WWaaggggrree--
	   ggaattee--rreettuurrnn --WWccaasstt--aalliiggnn  --WWccaasstt--qquuaall  --WWcchhaarr--ssuubbssccrriippttss  --WWccoommmmeenntt
	   --WWccoonnvveerrssiioonn	 --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
	   --WWnnoo--ddiivv--bbyy--zzeerroo  --WWeerrrroorr --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
	   --WWffoorrmmaatt--nnoonnlliitteerraall	--WWffoorrmmaatt--sseeccuurriittyy --WWiimmpplliicciitt  --WWiimmpplliicciitt--iinntt
	   --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn --WWeerrrroorr--iimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraa--
	   ttiioonn --WWiimmppoorrtt  --WWiinnlliinnee  --WWiinnvvaalliidd--ppcchh  --WWnnoo--eennddiiff--llaabbeellss
	   --WWnnoo--iinnvvaalliidd--ooffffsseettooff ((AAPPPPLLEE OONNLLYY)) --WWllaarrggeerr--tthhaann--_l_e_n	 --WWlloonngg--lloonngg
	   --WWnnoo--lloonngg--ddoouubbllee ((AAPPPPLLEE OONNLLYY)) --WWmmaaiinn	 --WWmmiissssiinngg--bbrraacceess --WWmmiissss--
	   iinngg--ffoorrmmaatt--aattttrriibbuuttee	 --WWmmiissssiinngg--nnoorreettuurrnn --WWmmoosstt ((AAPPPPLLEE OONNLLYY))
	   --WWnnoo--mmuullttiicchhaarr  --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss  --WWnnoo--ffoorrmmaatt--yy22kk --WWnnoo--iimmppoorrtt
	   --WWnnoonnnnuullll  --WWppaacckkeedd	--WWppaaddddeedd --WWppaarreenntthheesseess	--WWppooiinntteerr--aarriitthh	 --WWrree--
	   dduunnddaanntt--ddeeccllss --WWrreettuurrnn--ttyyppee	--WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww --WWssiiggnn--ccoomm--
	   ppaarree	 --WWssttrriicctt--aalliiaassiinngg --WWsswwiittcchh  --WWsswwiittcchh--ddeeffaauulltt --WWsswwiittcchh--eennuumm
	   --WWssyysstteemm--hheeaaddeerrss --WWttrriiggrraapphhss	 --WWuunnddeeff  --WWuunniinniittiiaalliizzeedd --WWuunn--
	   kknnoowwnn--pprraaggmmaass  --WWuunnrreeaacchhaabbllee--ccooddee --WWuunnuusseedd  --WWuunnuusseedd--ffuunnccttiioonn
	   --WWuunnuusseedd--llaabbeell  --WWuunnuusseedd--ppaarraammeetteerr --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarrii--
	   aabbllee	 --WWwwrriittee--ssttrriinnggss

       _C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
	   --WWbbaadd--ffuunnccttiioonn--ccaasstt	--WWmmiissssiinngg--ddeeccllaarraattiioonnss --WWmmiissssiinngg--pprroottoottyyppeess
	   --WWnneesstteedd--eexxtteerrnnss --WWssttrriicctt--pprroottoottyyppeess	 --WWttrraaddiittiioonnaall

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
	   --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee	--dduummppvveerrssiioonn --ffdduummpp--uunnnnuummbbeerreedd
	   --ffdduummpp--ttrraannssllaattiioonn--uunniitt[--_n] --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n]
	   --ffdduummpp--ttrreeee--oorriiggiinnaall[--_n] --ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--_n]
	   --ffdduummpp--ttrreeee--iinnlliinneedd[--_n] --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss  --ffmmeemm--rreeppoorrtt
	   --ffpprrooffiillee--aarrccss  --ffsscchheedd--vveerrbboossee==_n --fftteesstt--ccoovveerraaggee  --ffttiimmee--rreeppoorrtt --gg
	   --gg_l_e_v_e_l  --ggccooffff  --ggddwwaarrff  --ggddwwaarrff--11	--ggddwwaarrff--11++  --ggddwwaarrff--22 --ggggddbb
	   --ggssttaabbss  --ggssttaabbss++  --ggvvmmss  --ggxxccooffff  --ggxxccooffff++ --pp  --ppgg
	   --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
	   --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
	   --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --ssaavvee--tteemmppss  --ttiimmee --ffssaavvee--rreeppoossiittoorryy==_l_o_c_a_-
	   _t_i_o_n --ggrreeppoossiittoorryy

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
	   --ffaalliiggnn--ffuunnccttiioonnss==_n	--ffaalliiggnn--jjuummppss==_n --ffaalliiggnn--llaabbeellss==_n
	   --ffaalliiggnn--llooooppss==_n --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==_n --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==_n
	   --ffbbrraanncchh--pprroobbaabbiilliittiieess  --ffccaalllleerr--ssaavveess --ffccpprroopp--rreeggiisstteerrss --ffccssee--ffooll--
	   llooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss	 --ffddaattaa--sseeccttiioonnss --ffddeellaayyeedd--bbrraanncchh
	   --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss  --ffffaasstt--mmaatthh
	   --ffffllooaatt--ssttoorree --ffffoorrccee--aaddddrr  --ffffoorrccee--mmeemm  --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee
	   --ffggccssee--llmm  --ffggccssee--ssmm --fflloooopp--ooppttiimmiizzee --ffccrroossssjjuummppiinngg --ffiiff--ccoonnvveerrssiioonn
	   --ffiiff--ccoonnvveerrssiioonn22 --ffiinnlliinnee--ffuunnccttiioonnss	--ffiinnlliinnee--lliimmiitt==_n
	   --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss	 --ffmmeerrggee--ccoonnssttaannttss
	   --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmoovvee--aallll--mmoovvaabblleess  --ffnneeww--rraa
	   --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffaauulltt--iinnlliinnee  --ffnnoo--ddeeffeerr--ppoopp
	   --ffnnoo--ffuunnccttiioonn--ccssee  --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee
	   --ffnnoo--mmaatthh--eerrrrnnoo  --ffnnoo--ppeeeepphhoollee  --ffnnoo--ppeeeepphhoollee22 --ffuunnssaaffee--mmaatthh--ooppttii--
	   mmiizzaattiioonnss --ffffiinniittee--mmaatthh--oonnllyy --ffnnoo--ttrraappppiinngg--mmaatthh --ffnnoo--zzeerroo--iinniittiiaall--
	   iizzeedd--iinn--bbssss --ffoommiitt--ffrraammee--ppooiinntteerr  --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee --ffooppttii--
	   mmiizzee--ssiibblliinngg--ccaallllss  --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffrreedduuccee--aallll--ggiivvss --ffrreegg--
	   mmoovvee	 --ffrreennaammee--rreeggiisstteerrss --ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrree--
	   rruunn--ccssee--aafftteerr--lloooopp  --ffrreerruunn--lloooopp--oopptt --ffsscchheedduullee--iinnssnnss  --ffsscchheedd--
	   uullee--iinnssnnss22 --ffnnoo--sscchheedd--iinntteerrbblloocckk  --ffnnoo--sscchheedd--ssppeecc
	   --ffsscchheedd--ssppeecc--llooaadd --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss  --ffssiiggnnaalliinngg--nnaannss
	   --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt	--ffssssaa --ffssssaa--ccccpp --ffssssaa--ddccee
	   --ffssttrreennggtthh--rreedduuccee  --ffssttrriicctt--aalliiaassiinngg	 --ffttrraacceerr --fftthhrreeaadd--jjuummppss --ffuunn--
	   rroollll--aallll--llooooppss  --ffuunnrroollll--llooooppss ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO	 --OO00  --OO11  --OO22
	   --OO33	--OOss --ffaasstt ((AAPPPPLLEE OONNLLYY))

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
	   --$$  --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r  --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --ddDD	--ddII  --ddMM  --ddNN
	   --DD_m_a_c_r_o[==_d_e_f_n]  --EE  --HH --iiddiirraafftteerr _d_i_r --iinncclluuddee _f_i_l_e	--iimmaaccrrooss _f_i_l_e
	   --iipprreeffiixx _f_i_l_e  --iiwwiitthhpprreeffiixx _d_i_r --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r  --iissyysstteemm
	   _d_i_r --MM  --MMMM	--MMFF  --MMGG  --MMPP  --MMQQ  --MMTT	 --nnoossttddiinncc  --PP	--rreemmaapp --ddeeppeenn--
	   ddeennccyy--ffiillee ((AAPPPPLLEE OONNLLYY)) --ttrriiggrraapphhss  --uunnddeeff  --UU_m_a_c_r_o	--WWpp,,_o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
	   --WWaa,,_o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
	    _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess  --nnooddeeffaauullttlliibbss  --nnoosstt--
	   ddlliibb	 --nnoo--cc++++ffiilltt ((AAPPPPLLEE OONNLLYY)) --ss  --ssttaattiicc  --ssttaattiicc--lliibbggcccc  --sshhaarreedd
	   --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --WWll,,_o_p_t_i_o_n	 --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
	   --BB_p_r_e_f_i_x  --II_d_i_r  --II-- --FF_d_i_r ((AAPPPPLLEE OONNLLYY)) --LL_d_i_r  --ssppeeccss==_f_i_l_e

       _T_a_r_g_e_t _O_p_t_i_o_n_s
	   --VV _v_e_r_s_i_o_n --bb _m_a_c_h_i_n_e

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
	   _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

	   --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmppoowweerr  --mmnnoo--ppoowweerr  --mmppoowweerr22
	   --mmnnoo--ppoowweerr22 --mmppoowweerrppcc  --mmppoowweerrppcc6644  --mmnnoo--ppoowweerrppcc --mmaallttiivveecc
	   --mmnnoo--aallttiivveecc --mmppoowweerrppcc--ggppoopptt	 --mmnnoo--ppoowweerrppcc--ggppoopptt --mmppoowweerrppcc--ggffxxoopptt
	   --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmnneeww--mmnneemmoonniiccss	--mmoolldd--mmnneemmoonniiccss --mmffuullll--ttoocc
	   --mmmmiinniimmaall--ttoocc  --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm6644	--mm3322
	   --mmxxll--ccaallll  --mmnnoo--xxll--ccaallll  --mmppee --mmaalliiggnn--mmaacc6688kk ((AAPPPPLLEE OONNLLYY))
	   --mmaalliiggnn--ppoowweerr ((AAPPPPLLEE OONNLLYY)) --mmaalliiggnn--nnaattuurraall ((AAPPPPLLEE OONNLLYY))
	   --mmssoofftt--ffllooaatt	 --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee --mmssttrriinngg
	   --mmnnoo--ssttrriinngg	--mmuuppddaattee  --mmnnoo--uuppddaattee --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
	   --mmbbiitt--aalliiggnn	--mmnnoo--bbiitt--aalliiggnn --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn
	   --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee  --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaatt--
	   aabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc --mmlliittttllee  --mmlliittttllee--eennddiiaann  --mmbbiigg
	   --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc ((AAPPPPLLEE OONNLLYY)) --mmlloonngg--bbrraanncchh ((AAPPPPLLEE
	   OONNLLYY)) --mmccaallll--aaiixx --mmccaallll--ssyyssvv --mmccaallll--nneettbbssdd --mmaaiixx--ssttrruucctt--rreettuurrnn
	   --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==aallttiivveecc --mmaabbii==nnoo--aallttiivveecc --mmaabbii==ssppee
	   --mmaabbii==nnoo--ssppee --mmiisseell==yyeess --mmiisseell==nnoo --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm
	   --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee	 --mmeemmbb --mmssddaattaa --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss
	   --mmwwiinnddiissss --GG _n_u_m --pptthhrreeaadd

	   _D_a_r_w_i_n _O_p_t_i_o_n_s

	   --aallll__llooaadd --aalllloowwaabbllee__cclliieenntt --aarrcchh --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy
	   --bbiinndd__aatt__llooaadd --bbuunnddllee --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee --ccoommppaattiibbiill--
	   iittyy__vveerrssiioonn --ccuurrrreenntt__vveerrssiioonn --ddeeppeennddeennccyy--ffiillee --ddyylliibb__ffiillee
	   --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc --ddyynnaammiicclliibb --eexxppoorrtteedd__ssyymmbboollss__lliisstt
	   --ffiilleelliisstt --ffllaatt__nnaammeessppaaccee --ffoorrccee__ccppuussuubbttyyppee__AALLLL --ffoorrccee__ffllaatt__nnaammeess--
	   ppaaccee --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess --iimmaaggee__bbaassee --iinniitt --iinnssttaallll__nnaammee
	   --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee --mmuullttiippllyy__ddeeffiinneedd --mmuullttii--
	   ppllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd --nnoommuullttiiddeeffss --nnoopprreebbiinndd
	   --nnoosseegglliinnkkeeddiitt --ppaaggeezzeerroo__ssiizzee --pprreebbiinndd --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodd--
	   uulleess --pprriivvaattee__bbuunnddllee --rreeaadd__oonnllyy__rreellooccss --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymm--
	   bboollss --wwhhyyllooaadd --sseegg11aaddddrr --sseeccttccrreeaattee --sseeccttoobbjjeeccttssyymmbboollss --sseeccttoorrddeerr
	   --sseegg__aaddddrr__ttaabbllee --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee --sseegglliinnkkeeddiitt --sseeggpprroott
	   --sseeggss__rreeaadd__oonnllyy__aaddddrr --sseeggss__rreeaadd__wwrriittee__aaddddrr --ssiinnggllee__mmoodduullee --ssttaattiicc
	   --ssuubb__lliibbrraarryy --ssuubb__uummbbrreellllaa --ttwwoolleevveell__nnaammeessppaaccee --uummbbrreellllaa --uunnddeeffiinneedd
	   --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess --wwhhaattssllooaaddeedd

	   _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s

	   --mmccppuu==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t
	   --mmnnoo--ffaannccyy--mmaatthh--338877 --mmnnoo--ffpp--rreett--iinn--338877  --mmssoofftt--ffllooaatt	 --mmssvvrr33--sshhlliibb
	   --mmnnoo--wwiiddee--mmuullttiippllyy  --mmrrttdd  --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunndd--
	   aarryy==_n_u_m --mmmmmmxx  --mmssssee --mmssssee22 --mm33ddnnooww --mmtthhrreeaaddss  --mmnnoo--aalliiggnn--ssttrriinnggooppss
	   --mmiinnlliinnee--aallll--ssttrriinnggooppss --mmppuusshh--aarrggss  --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
	   --mm112288bbiitt--lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee  --mmrreeggppaarrmm==_n_u_m
	   --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmnnoo--rreedd--zzoonnee --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mm3322
	   --mm6644

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
	   --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g --ffeexxcceeppttiioonnss
	   --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
	   --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee  --ffiinnssttrruummeenntt--ffuunnccttiioonnss --ffnnoo--ccoommmmoonn
	   --ffnnoo--iiddeenntt  --ffnnoo--ggnnuu--lliinnkkeerr --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc  --ffPPIICC
	   --ffrreegg--ssttrruucctt--rreettuurrnn	--ffsshhaarreedd--ddaattaa  --ffsshhoorrtt--eennuummss --ffsshhoorrtt--ddoouubbllee
	   --ffsshhoorrtt--wwcchhaarr --ffvvoollaattiillee --ffvvoollaattiillee--gglloobbaall  --ffvvoollaattiillee--ssttaattiicc
	   --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt	 --ffssttaacckk--cchheecckk --ffssttaacckk--lliimmiitt--rreeggiiss--
	   tteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m --ffaarrgguummeenntt--aalliiaass  --ffaarrgguu--
	   mmeenntt--nnooaalliiaass --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall  --fflleeaaddiinngg--uunnddeerrssccoorree
	   --ffttllss--mmooddeell==_m_o_d_e_l --ffttrraappvv --ffbboouunnddss--cchheecckk

       OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt

       Compilation can involve up to four stages: preprocessing, compilation
       proper, assembly and linking, always in that order.  The first three
       stages apply to an individual source file, and end by producing an
       object file; linking combines all the object files (those newly com-
       piled, and those specified as input) into an executable file.

       For any given input file, the file name suffix determines what kind of
       compilation is done:

       _f_i_l_e..cc
	   C source code which must be preprocessed.

       _f_i_l_e..ii
	   C source code which should not be preprocessed.

       _f_i_l_e..iiii
	   C++ source code which should not be preprocessed.

       _f_i_l_e..mm
	   Objective-C source code.  Note that you must link with the library
	   _l_i_b_o_b_j_c_._a to make an Objective-C program work.

       _f_i_l_e..mmii
	   Objective-C source code which should not be preprocessed.

       _f_i_l_e..hh
	   C or C++ header file to be turned into a precompiled header.

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..cc++++
       _f_i_l_e..CC
	   C++ source code which must be preprocessed.	Note that in ..ccxxxx, the
	   last two letters must both be literally xx.  Likewise, ..CC refers to
	   a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
	   Objective-C++ source code which must be preprocessed.  (APPLE ONLY)

       _f_i_l_e..mmiiii
	   Objective-C++ source code which should not be preprocessed.	(APPLE
	   ONLY)

       _f_i_l_e..hhhh
       _f_i_l_e..HH
	   C++ header file to be turned into a precompiled header.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..FFOORR
	   Fortran source code which should not be preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
	   Fortran source code which must be preprocessed (with the tradi-
	   tional preprocessor).

       _f_i_l_e..rr
	   Fortran source code which must be preprocessed with a RATFOR pre-
	   processor (not included with GCC).

       _f_i_l_e..aaddss
	   Ada source code file which contains a library unit declaration (a
	   declaration of a package, subprogram, or generic, or a generic
	   instantiation), or a library unit renaming declaration (a package,
	   generic, or subprogram renaming declaration).  Such files are also
	   called _s_p_e_c_s.

       _f_i_l_e..aaddbb
	   Ada source code file containing a library unit body (a subprogram
	   or package body).  Such files are also called _b_o_d_i_e_s.

       _f_i_l_e..ss
	   Assembler code.  Apple's version of GCC runs the preprocessor on
	   these files as well as those ending in ..SS.

       _f_i_l_e..SS
	   Assembler code which must be preprocessed.

       _o_t_h_e_r
	   An object file to be fed straight into linking.  Any file name with
	   no recognized suffix is treated this way.

       You can specify the input language explicitly with the --xx option:

       --xx _l_a_n_g_u_a_g_e
	   Specify explicitly the _l_a_n_g_u_a_g_e for the following input files
	   (rather than letting the compiler choose a default based on the
	   file name suffix).  This option applies to all following input
	   files until the next --xx option.  Possible values for _l_a_n_g_u_a_g_e are:

		   c  c-header	cpp-output
		   c++	c++-header  c++-cpp-output
		   objective-c	objective-c-header  objc-cpp-output
		   objective-c++ (APPLE ONLY) objective-c++-header (APPLE ONLY)
		   assembler  assembler-with-cpp
		   ada
		   f77	f77-cpp-input  ratfor
		   java
		   treelang

       --xx nnoonnee
	   Turn off any specification of a language, so that subsequent files
	   are handled according to their file name suffixes (as they are if
	   --xx has not been used at all).

       --OObbjjCC
       --OObbjjCC++++
	   These are similar in effect to --xx oobbjjeeccttiivvee--cc and --xx oobbjjeeccttiivvee--cc++++,
	   but also cause the --OObbjjCC flag to be passed to _ll_dd((11)), causing static
	   archive libraries that define an Objective-C class or category to
	   be linked in in their entirety. (APPLE ONLY)

       --aarrcchh _a_r_c_h
	   Compile for the specified target architecture _a_r_c_h.	The allowable
	   values are ii338866 and ppppcc.  Multiple options work, and direct the
	   compiler to produce ``fat'' binaries including object code for each
	   architecture specified with --aarrcchh.  This option only works if
	   assembler and libraries are available for each architecture speci-
	   fied. (APPLE ONLY)

       --ppaassss--eexxiitt--ccooddeess
	   Normally the ggcccc program will exit with the code of 1 if any phase
	   of the compiler returns a non-success return code.  If you specify
	   --ppaassss--eexxiitt--ccooddeess, the ggcccc program will instead return with numeri-
	   cally highest error produced by any phase that returned an error
	   indication.

       If you only want some of the stages of compilation, you can use --xx (or
       filename suffixes) to tell ggcccc where to start, and one of the options
       --cc, --SS, or --EE to say where ggcccc is to stop.  Note that some combinations
       (for example, --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.  The linking
	   stage simply is not done.  The ultimate output is in the form of an
	   object file for each source file.

	   By default, the object file name for a source file is made by
	   replacing the suffix ..cc, ..ii, ..ss, etc., with ..oo.

	   Unrecognized input files, not requiring compilation or assembly,
	   are ignored.

       --SS  Stop after the stage of compilation proper; do not assemble.	 The
	   output is in the form of an assembler code file for each non-assem-
	   bler input file specified.

	   By default, the assembler file name for a source file is made by
	   replacing the suffix ..cc, ..ii, etc., with ..ss.

	   Input files that don't require compilation are ignored.

       --EE  Stop after the preprocessing stage; do not run the compiler proper.
	   The output is in the form of preprocessed source code, which is
	   sent to the standard output.

	   Input files which don't require preprocessing are ignored.

       --oo _f_i_l_e
	   Place output in file _f_i_l_e.  This applies regardless to whatever
	   sort of output is being produced, whether it be an executable file,
	   an object file, an assembler file or preprocessed C code.

	   Since only one output file can be specified, it does not make sense
	   to use --oo when compiling more than one input file, unless you are
	   producing an executable file as output.

	   If --oo is not specified, the default is to put an executable file in
	   _a_._o_u_t, the object file for _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler
	   file in _s_o_u_r_c_e_._s, and all preprocessed C source on standard output.

       --vv  Print (on standard error output) the commands executed to run the
	   stages of compilation.  Also print the version number of the com-
	   piler driver program and of the preprocessor and the compiler
	   proper.

       --######
	   Like --vv except the commands are not executed and all command argu-
	   ments are quoted.  This is useful for shell scripts to capture the
	   driver-generated command lines.

       --ppiippee
	   Use pipes rather than temporary files for communication between the
	   various stages of compilation.  This fails to work on some systems
	   where the assembler is unable to read from a pipe; but the GNU
	   assembler has no trouble.

       ----hheellpp
	   Print (on the standard output) a description of the command line
	   options understood by ggcccc.  If the --vv option is also specified then
	   ----hheellpp will also be passed on to the various processes invoked by
	   ggcccc, so that they can display the command line options they accept.
	   If the --WW option is also specified then command line options which
	   have no documentation associated with them will also be displayed.

       ----ttaarrggeett--hheellpp
	   Print (on the standard output) a description of target specific
	   command line options for each tool.

       ----vveerrssiioonn
	   Display the version number and copyrights of the invoked GCC.

       CCoommppiilliinngg CC++++ PPrrooggrraammss

       C++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp,
       ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files often use ..hhhh or ..HH; prepro-
       cessed C++ files use the suffix ..iiii.  GCC recognizes files with these
       names and compiles them as C++ programs even if you call the compiler
       the same way as for compiling C programs (usually with the name ggcccc).

       However, C++ programs often require class libraries as well as a com-
       piler that understands the C++ language---and under some circumstances,
       you might want to compile programs or header files from standard input,
       or otherwise without a suffix that flags them as C++ programs.  You
       might also like to precompile a C header file with a ..hh extension to be
       used in C++ compilations.  gg++++ is a program that calls GCC with the
       default language set to C++, and automatically specifies linking
       against the C++ library.	 On many systems, gg++++ is also installed with
       the name cc++++.

       When you compile C++ programs, you may specify many of the same com-
       mand-line options that you use for compiling programs in any language;
       or command-line options meaningful for C and related languages; or
       options that are meaningful only for C++ programs.

       OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt

       The following options control the dialect of C (or languages derived
       from C, such as C++ and Objective-C) that the compiler accepts:

       --aannssii
	   In C mode, support all ISO C90 programs.  In C++ mode, remove GNU
	   extensions that conflict with ISO C++.

	   This turns off certain features of GCC that are incompatible with
	   ISO C90 (when compiling C code), or of standard C++ (when compiling
	   C++ code), such as the "asm" and "typeof" keywords, and predefined
	   macros such as "unix" and "vax" that identify the type of system
	   you are using.  It also enables the undesirable and rarely used ISO
	   trigraph feature.  For the C compiler, it disables recognition of
	   C++ style //// comments as well as the "inline" keyword.

	   The alternate keywords "__asm__", "__extension__", "__inline__" and
	   "__typeof__" continue to work despite --aannssii.	 You would not want to
	   use them in an ISO C program, of course, but it is useful to put
	   them in header files that might be included in compilations done
	   with --aannssii.	Alternate predefined macros such as "__unix__" and
	   "__vax__" are also available, with or without --aannssii.

	   The --aannssii option does not cause non-ISO programs to be rejected
	   gratuitously.  For that, --ppeeddaannttiicc is required in addition to
	   --aannssii.

	   The macro "__STRICT_ANSI__" is predefined when the --aannssii option is
	   used.  Some header files may notice this macro and refrain from
	   declaring certain functions or defining certain macros that the ISO
	   standard doesn't call for; this is to avoid interfering with any
	   programs that might use these names for other things.

	   Functions which would normally be built in but do not have seman-
	   tics defined by ISO C (such as "alloca" and "ffs") are not built-in
	   functions with --aannssii is used.

       --ssttdd==
	   Determine the language standard.  This option is currently only
	   supported when compiling C or C++.  A value for this option must be
	   provided; possible values are

	   cc8899
	   iissoo99889999::11999900
	       ISO C90 (same as --aannssii).

	   iissoo99889999::119999440099
	       ISO C90 as modified in amendment 1.

	   cc9999
	   cc99xx
	   iissoo99889999::11999999
	   iissoo99889999::119999xx
	       ISO C99.	 Note that this standard is not yet fully supported;
	       see <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--33..33//cc9999ssttaattuuss..hhttmmll> for more infor-
	       mation.	The names cc99xx and iissoo99889999::119999xx are deprecated.

	   ggnnuu8899
	       Default, ISO C90 plus GNU extensions (including some C99 fea-
	       tures).

	   ggnnuu9999
	   ggnnuu99xx
	       ISO C99 plus GNU extensions.  When ISO C99 is fully implemented
	       in GCC, this will become the default.  The name ggnnuu99xx is depre-
	       cated.

	   cc++++9988
	       The 1998 ISO C++ standard plus amendments.

	   ggnnuu++++9988
	       The same as --ssttdd==cc++++9988 plus GNU extensions.  This is the
	       default for C++ code.

	   Even when this option is not specified, you can still use some of
	   the features of newer standards in so far as they do not conflict
	   with previous C standards.  For example, you may use "__restrict__"
	   even when --ssttdd==cc9999 is not specified.

	   The --ssttdd options specifying some version of ISO C have the same
	   effects as --aannssii, except that features that were not in ISO C90 but
	   are in the specified version (for example, //// comments and the
	   "inline" keyword in ISO C99) are not disabled.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
	   Output to the given filename prototyped declarations for all func-
	   tions declared and/or defined in a translation unit, including
	   those in header files.  This option is silently ignored in any lan-
	   guage other than C.

	   Besides declarations, the file indicates, in comments, the origin
	   of each declaration (source file and line), whether the declaration
	   was implicit, prototyped or unprototyped (II, NN for new or OO for
	   old, respectively, in the first character after the line number and
	   the colon), and whether it came from a declaration or a definition
	   (CC or FF, respectively, in the following character).	In the case of
	   function definitions, a K&R-style list of arguments followed by
	   their declarations is also provided, inside comments, after the
	   declaration.

       --ffaallttiivveecc
	   Enable the AltiVec language extensions, as defined in Motorola's
	   AltiVec PIM.	 This includes the recognition of "vector" and "pixel"
	   as (context-dependent) keywords, the definition of built-in func-
	   tions such as "vec_add", and other extensions.  Note that unlike
	   the option --mmaallttiivveecc, the extensions do not require the inclusion
	   of any special header files. (APPLE ONLY)

       --ffaassmm--bblloocckkss
	   Enable the use of blocks and entire functions of assembly code
	   within a C or C++ file.  The syntax follows that used in CodeWar-
	   rior. (APPLE ONLY)

       --ffnnoo--aassmm
	   Do not recognize "asm", "inline" or "typeof" as a keyword, so that
	   code can use these words as identifiers.  You can use the keywords
	   "__asm__", "__inline__" and "__typeof__" instead.  --aannssii implies
	   --ffnnoo--aassmm.

	   In C++, this switch only affects the "typeof" keyword, since "asm"
	   and "inline" are standard keywords.	You may want to use the
	   --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead, which has the same effect.  In C99
	   mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this switch only affects the "asm"
	   and "typeof" keywords, since "inline" is a standard keyword in ISO
	   C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
	   Don't recognize built-in functions that do not begin with
	   ____bbuuiillttiinn__ as prefix.

	   GCC normally generates special code to handle certain built-in
	   functions more efficiently; for instance, calls to "alloca" may
	   become single instructions that adjust the stack directly, and
	   calls to "memcpy" may become inline copy loops.  The resulting code
	   is often both smaller and faster, but since the function calls no
	   longer appear as such, you cannot set a breakpoint on those calls,
	   nor can you change the behavior of the functions by linking with a
	   different library.

	   With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-in function
	   _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not begin with ____bbuuiillttiinn__.  If
	   a function is named this is not built-in in this version of GCC,
	   this option is ignored.  There is no corresponding --ffbbuuiillttiinn--_f_u_n_c_-
	   _t_i_o_n option; if you wish to enable built-in functions selectively
	   when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg, you may define macros
	   such as:

		   #define abs(n)	   __builtin_abs ((n))
		   #define strcpy(d, s)	   __builtin_strcpy ((d), (s))

       --ffhhoosstteedd
	   Assert that compilation takes place in a hosted environment.	 This
	   implies --ffbbuuiillttiinn.  A hosted environment is one in which the entire
	   standard library is available, and in which "main" has a return
	   type of "int".  Examples are nearly everything except a kernel.
	   This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
	   Assert that compilation takes place in a freestanding environment.
	   This implies --ffnnoo--bbuuiillttiinn.  A freestanding environment is one in
	   which the standard library may not exist, and program startup may
	   not necessarily be at "main".  The most obvious example is an OS
	   kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffmmss--eexxtteennssiioonnss
	   Accept some non-standard constructs used in Microsoft header files.

       --ttrriiggrraapphhss
	   Support ISO C trigraphs.  The --aannssii option (and --ssttdd options for
	   strict ISO C conformance) implies --ttrriiggrraapphhss.

       --nnoo--iinntteeggrraatteedd--ccpppp
	   Performs a compilation in two passes: preprocessing and compiling.
	   This option allows a user supplied "cc1", "cc1plus", or "cc1obj"
	   via the --BB option. The user supplied compilation step can then add
	   in an additional preprocessing step after normal preprocessing but
	   before compiling. The default is to use the integrated cpp (inter-
	   nal cpp)

	   The semantics of this option will change if "cc1", "cc1plus", and
	   "cc1obj" are merged.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
	   Formerly, these options caused GCC to attempt to emulate a pre-
	   standard C compiler.	 They are now only supported with the --EE
	   switch.  The preprocessor continues to support a pre-standard mode.
	   See the GNU CPP manual for details.

       --ffccoonndd--mmiissmmaattcchh
	   Allow conditional expressions with mismatched types in the second
	   and third arguments.	 The value of such an expression is void.
	   This option is not supported for C++.

       --ffppcchh--pprreepprroocceessss
	   Enable PCH processing even when --EE or --ssaavvee--tteemmppss is used.

       --ffuunnssiiggnneedd--cchhaarr
	   Let the type "char" be unsigned, like "unsigned char".

	   Each kind of machine has a default for what "char" should be.  It
	   is either like "unsigned char" by default or like "signed char" by
	   default.

	   Ideally, a portable program should always use "signed char" or
	   "unsigned char" when it depends on the signedness of an object.
	   But many programs have been written to use plain "char" and expect
	   it to be signed, or expect it to be unsigned, depending on the
	   machines they were written for.  This option, and its inverse, let
	   you make such a program work with the opposite default.

	   The type "char" is always a distinct type from each of "signed
	   char" or "unsigned char", even though its behavior is always just
	   like one of those two.

       --ffssiiggnneedd--cchhaarr
	   Let the type "char" be signed, like "signed char".

	   Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the
	   negative form of --ffuunnssiiggnneedd--cchhaarr.  Likewise, the option
	   --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
	   These options control whether a bit-field is signed or unsigned,
	   when the declaration does not use either "signed" or "unsigned".
	   By default, such a bit-field is signed, because this is consistent:
	   the basic integer types such as "int" are signed types.

       --ffwwrriittaabbllee--ssttrriinnggss
	   Store string constants in the writable data segment and don't
	   uniquize them.  This is for compatibility with old programs which
	   assume they can write into string constants.

	   Writing into string constants is a very bad idea; ``constants''
	   should be constant.

       --ffccoonnssttaanntt--ccffssttrriinnggss
	   Enable the automatic creation of a CoreFoundation-type constant
	   string whenever a special builtin "__builtin__CFStringMakeCon-
	   stantString" is called on a literal string, and for "@"..."" liter-
	   als in Objective-C (thus overriding the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss
	   setting).  This option will also be enabled if the environment
	   variable "MACOSX_DEPLOYMENT_TARGET" exists and is set to "10.2" or
	   greater.  (APPLE ONLY)

       --ffppaassccaall--ssttrriinnggss
	   Allow Pascal-style string literals to be constructed.  (APPLE ONLY)

       --ffccooaalleessccee
	   Coalesce duplicated functions and data. The linker will discard all
	   but one, saving space.  Enabled by default. (APPLE ONLY)

       --ffwweeaakk--ccooaalleesscceedd
	   Use the new OS X "weak_definitions" section attribute for coalesced
	   items.  A single "normal" definition will be chosen by the linker
	   over any number of weakly-coalesced ones.  (APPLE ONLY)

       OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt

       This section describes the command-line options that are only meaning-
       ful for C++ programs; but you can also use most of the GNU compiler
       options regardless of what language your program is in.	For example,
       you might compile a file "firstClass.C" like this:

	       g++ -g -frepo -O -c firstClass.C

       In this example, only --ffrreeppoo is an option meant only for C++ programs;
       you can use the other options with any language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++ programs:

       --ffaabbii--vveerrssiioonn==_n
	   Use version _n of the C++ ABI.  Version 1 is the version of the C++
	   ABI that first appeared in G++ 3.2.	Version 0 will always be the
	   version that conforms most closely to the C++ ABI specification.
	   Therefore, the ABI obtained using version 0 will change as ABI bugs
	   are fixed.

	   The default is version 1.

       --ffnnoo--aacccceessss--ccoonnttrrooll
	   Turn off all access checking.  This switch is mainly useful for
	   working around bugs in the access control code.

       --ffcchheecckk--nneeww
	   Check that the pointer returned by "operator new" is non-null
	   before attempting to modify the storage allocated.  The current
	   Working Paper requires that "operator new" never return a null
	   pointer, so this check is normally unnecessary.

	   An alternative to using this option is to specify that your "opera-
	   tor new" does not throw any exceptions; if you declare it _tt_hh_rr_oo_ww_((_)),
	   G++ will check the return value.  See also nneeww ((nnootthhrrooww)).

       --ffccoonnsseerrvvee--ssppaaccee
	   Put uninitialized or runtime-initialized global variables into the
	   common segment, as C does.  This saves space in the executable at
	   the cost of not diagnosing duplicate definitions.  If you compile
	   with this flag and your program mysteriously crashes after "main()"
	   has completed, you may have an object that is being destroyed twice
	   because two definitions were merged.

	   This option is no longer useful on most targets, now that support
	   has been added for putting variables into BSS without making them
	   common.

       --ffnnoo--ccoonnsstt--ssttrriinnggss
	   Give string constants type "char *" instead of type "const char *".
	   By default, G++ uses type "const char *" as required by the stan-
	   dard.  Even if you use --ffnnoo--ccoonnsstt--ssttrriinnggss, you cannot actually mod-
	   ify the value of a string constant, unless you also use
	   --ffwwrriittaabbllee--ssttrriinnggss.

	   This option might be removed in a future release of G++.  For maxi-
	   mum portability, you should structure your code so that it works
	   with string constants that have type "const char *".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
	   Accept $$ in identifiers.  You can also explicitly prohibit use of $$
	   with the option --ffnnoo--ddoollllaarrss--iinn--iiddeennttiiffiieerrss.	 (GNU C allows $$ by
	   default on most target systems, but there are a few exceptions.)
	   Traditional C allowed the character $$ to form part of identifiers.
	   However, ISO C and C++ forbid $$ in identifiers.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
	   The C++ standard allows an implementation to omit creating a tempo-
	   rary which is only used to initialize another object of the same
	   type.  Specifying this option disables that optimization, and
	   forces G++ to call the copy constructor in all cases.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
	   Don't check for violation of exception specifications at runtime.
	   This option violates the C++ standard, but may be useful for reduc-
	   ing code size in production builds, much like defining NNDDEEBBUUGG.  The
	   compiler will still optimize based on the exception specifications.

       --ffeexxtteerrnnaall--tteemmppllaatteess
	   Cause ##pprraaggmmaa iinntteerrffaaccee and iimmpplleemmeennttaattiioonn to apply to template
	   instantiation; template instances are emitted or not according to
	   the location of the template definition.

	   This option is deprecated.

       --ffaalltt--eexxtteerrnnaall--tteemmppllaatteess
	   Similar to --ffeexxtteerrnnaall--tteemmppllaatteess, but template instances are emitted
	   or not according to the place where they are first instantiated.

	   This option is deprecated.

       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
	   If --ffffoorr--ssccooppee is specified, the scope of variables declared in a
	   _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffoorr loop itself, as specified
	   by the C++ standard.	 If --ffnnoo--ffoorr--ssccooppee is specified, the scope of
	   variables declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
	   the enclosing scope, as was the case in old versions of G++, and
	   other (traditional) implementations of C++.

	   The default if neither flag is given to follow the standard, but to
	   allow and give a warning for old-style code that would otherwise be
	   invalid, or have different behavior.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
	   Do not recognize "typeof" as a keyword, so that code can use this
	   word as an identifier.  You can use the keyword "__typeof__"
	   instead.  --aannssii implies --ffnnoo--ggnnuu--kkeeyywwoorrddss.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
	   Never emit code for non-inline templates which are instantiated
	   implicitly (i.e. by use); only emit code for explicit instantia-
	   tions.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
	   Don't emit code for implicit instantiations of inline templates,
	   either.  The default is to handle inlines differently so that com-
	   piles with and without optimization will need the same set of
	   explicit instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
	   To save space, do not emit out-of-line copies of inline functions
	   controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn.  This will cause linker
	   errors if these functions are not inlined everywhere they are
	   called.

       --ffiinnddiirreecctt--vviirrttuuaall--ccaallllss
	   Do not make direct calls to virtual functions; instead, always go
	   through the vtable. (APPLE ONLY)

       --ffaappppllee--kkeexxtt
	   Alter vtables, destructors, and other implementation details to
	   more closely resemble the GCC 2.95 ABI.  This is to make kernel
	   extensions loadable by Darwin kernels, and is required to build any
	   Darwin kernel extension.  --ffnnoo--eexxcceeppttiioonnss and --ssttaattiicc must also be
	   used with this flag.	 (APPLE ONLY)

       --ffccooaalleessccee--tteemmppllaatteess
	   Mark instantiated templates as "coalesced": the linker will discard
	   all but one, thus saving space. (APPLE ONLY)

       --ffmmss--eexxtteennssiioonnss
	   Disable pedantic warnings about constructs used in MFC, such as
	   implicit int and getting a pointer to member function via non-stan-
	   dard syntax.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
	   Disable built-in declarations of functions that are not mandated by
	   ANSI/ISO C.	These include "ffs", "alloca", "_exit", "index",
	   "bzero", "conjf", and other related functions.

       --ffnnoo--ooppeerraattoorr--nnaammeess
	   Do not treat the operator name keywords "and", "bitand", "bitor",
	   "compl", "not", "or" and "xor" as synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
	   Disable diagnostics that the standard says a compiler does not need
	   to issue.  Currently, the only such diagnostic issued by G++ is the
	   one for a name having multiple meanings within a class.

       --ffppeerrmmiissssiivvee
	   Downgrade messages about nonconformant code from errors to warn-
	   ings.  By default, G++ effectively sets --ppeeddaannttiicc--eerrrroorrss without
	   --ppeeddaannttiicc; this option reverses that.  This behavior and this
	   option are superseded by --ppeeddaannttiicc, which works as it does for GNU
	   C.

       --ffrreeppoo
	   Enable automatic template instantiation at link time.  This option
	   also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
	   Disable generation of information about every class with virtual
	   functions for use by the C++ runtime type identification features
	   (ddyynnaammiicc__ccaasstt and ttyyppeeiidd).  If you don't use those parts of the
	   language, you can save some space by using this flag.  Note that
	   exception handling uses the same information, but it will generate
	   it as needed.

       --ffssttaattss
	   Emit statistics about front-end processing at the end of the compi-
	   lation.  This information is generally only useful to the G++
	   development team.

       --fftteemmppllaattee--ddeepptthh--_n
	   Set the maximum instantiation depth for template classes to _n.  A
	   limit on the template instantiation depth is needed to detect end-
	   less recursions during template class instantiation.	 ANSI/ISO C++
	   conforming programs must not rely on a maximum depth greater than
	   17.

       --ffuussee--ccxxaa--aatteexxiitt
	   Register destructors for objects with static storage duration with
	   the "__cxa_atexit" function rather than the "atexit" function.
	   This option is required for fully standards-compliant handling of
	   static destructors, but will only work if your C library supports
	   "__cxa_atexit".  This option is not supported on Mac OS X.

       --ffvvttaabbllee--ggcc
	   Emit special relocations for vtables and virtual function refer-
	   ences so that the linker can identify unused virtual functions and
	   zero out vtable slots that refer to them.  This is most useful with
	   --ffffuunnccttiioonn--sseeccttiioonnss and --WWll,,----ggcc--sseeccttiioonnss, in order to also discard
	   the functions themselves.

	   This optimization requires GNU as and GNU ld.  Not all systems sup-
	   port this option.  --WWll,,----ggcc--sseeccttiioonnss is ignored without --ssttaattiicc.

       --ffnnoo--wweeaakk
	   Do not use weak symbol support, even if it is provided by the
	   linker.  By default, G++ will use weak symbols if they are avail-
	   able.  This option exists only for testing, and should not be used
	   by end-users; it will result in inferior code and has no benefits.
	   This option may be removed in a future release of G++.

       --nnoossttddiinncc++++
	   Do not search for header files in the standard directories specific
	   to C++, but do still search the other standard directories.	(This
	   option is used when building the C++ library.)

       In addition, these optimization, warning, and code generation options
       have meanings only for C++ programs:

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
	   Do not assume iinnlliinnee for functions defined inside a class scope.
	     Note that these functions will have linkage like inline func-
	   tions; they just won't be inlined by default.

       --WWaabbii (C++ only)
	   Warn when G++ generates code that is probably not compatible with
	   the vendor-neutral C++ ABI.	Although an effort has been made to
	   warn about all such cases, there are probably some cases that are
	   not warned about, even though G++ is generating incompatible code.
	   There may also be cases where warnings are emitted even though the
	   code that is generated will be compatible.

	   You should rewrite your code to avoid these warnings if you are
	   concerned about the fact that code generated by G++ may not be
	   binary compatible with code generated by other compilers.

	   The known incompatibilities at this point include:

	   *   Incorrect handling of tail-padding for bit-fields.  G++ may
	       attempt to pack data into the same byte as a base class.	 For
	       example:

		       struct A { virtual void f(); int f1 : 1; };
		       struct B : public A { int f2 : 1; };

	       In this case, G++ will place "B::f2" into the same byte
	       as"A::f1"; other compilers will not.  You can avoid this prob-
	       lem by explicitly padding "A" so that its size is a multiple of
	       the byte size on your platform; that will cause G++ and other
	       compilers to layout "B" identically.

	   *   Incorrect handling of tail-padding for virtual bases.  G++ does
	       not use tail padding when laying out virtual bases.  For exam-
	       ple:

		       struct A { virtual void f(); char c1; };
		       struct B { B(); char c2; };
		       struct C : public A, public virtual B {};

	       In this case, G++ will not place "B" into the tail-padding for
	       "A"; other compilers will.  You can avoid this problem by
	       explicitly padding "A" so that its size is a multiple of its
	       alignment (ignoring virtual base classes); that will cause G++
	       and other compilers to layout "C" identically.

	   *   Incorrect handling of bit-fields with declared widths greater
	       than that of their underlying types, when the bit-fields appear
	       in a union.  For example:

		       union U { int i : 4096; };

	       Assuming that an "int" does not have 4096 bits, G++ will make
	       the union too small by the number of bits in an "int".

	   *   Empty classes can be placed at incorrect offsets.  For example:

		       struct A {};

		       struct B {
			 A a;
			 virtual void f ();
		       };

		       struct C : public B, public A {};

	       G++ will place the "A" base class of "C" at a nonzero offset;
	       it should be placed at offset zero.  G++ mistakenly believes
	       that the "A" data member of "B" is already at offset zero.

	   *   Names of template functions whose types involve "typename" or
	       template template parameters can be mangled incorrectly.

		       template <typename Q>
		       void f(typename Q::X) {}

		       template <template <typename> class Q>
		       void f(typename Q<int>::X) {}

	       Instantiations of these templates may be mangled incorrectly.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ only)
	   Warn when a class seems unusable, because all the constructors or
	   destructors in a class are private and the class has no friends or
	   public static member functions.  This warning is enabled by
	   default.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ only)
	   Warn when a class declares a non-virtual destructor that should
	   probably be virtual, because it looks like the class will be used
	   polymorphically.  This warning is enabled by --WWaallll.

       --WWrreeoorrddeerr (C++ only)
	   Warn when the order of member initializers given in the code does
	   not match the order in which they must be executed.	For instance:

		   struct A {
		     int i;
		     int j;
		     A(): j (0), i (1) { }
		   };

	   Here the compiler will warn that the member initializers for ii and
	   jj will be rearranged to match the declaration order of the members.
	   This warning is enabled by --WWaallll.

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ only)
	   Warn about violations of the following style guidelines from Scott
	   Meyers' _E_f_f_e_c_t_i_v_e _C_+_+ book:

	   *   Item 11:	 Define a copy constructor and an assignment operator
	       for classes with dynamically allocated memory.

	   *   Item 12:	 Prefer initialization to assignment in constructors.

	   *   Item 14:	 Make destructors virtual in base classes.

	   *   Item 15:	 Have "operator=" return a reference to *this.

	   *   Item 23:	 Don't try to return a reference when you must return
	       an object.

	   and about violations of the following style guidelines from Scott
	   Meyers' _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

	   *   Item 6:	Distinguish between prefix and postfix forms of incre-
	       ment and decrement operators.

	   *   Item 7:	Never overload "&&", "||", or ",".

	   If you use this option, you should be aware that the standard
	   library headers do not obey all of these guidelines; you can use
	   ggrreepp --vv to filter out those warnings.

       --WWnnoo--ddeepprreeccaatteedd (C++ only)
	   Do not warn about usage of deprecated features.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ only)
	   Disable warnings when non-templatized friend functions are declared
	   within a template.  With the advent of explicit template specifica-
	   tion support in G++, if the name of the friend is an unqualified-id
	   (i.e., ffrriieenndd ffoooo((iinntt))), the C++ language specification demands
	   that the friend declare or define an ordinary, nontemplate func-
	   tion.  (Section 14.5.3).  Before G++ implemented explicit specifi-
	   cation, unqualified-ids could be interpreted as a particular spe-
	   cialization of a templatized function.  Because this non-conforming
	   behavior is no longer the default behavior for G++, --WWnnoonn--tteemm--
	   ppllaattee--ffrriieenndd allows the compiler to check existing code for poten-
	   tial trouble spots, and is on by default.  This new compiler behav-
	   ior can be turned off with --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd which keeps the
	   conformant compiler code but disables the helpful warning.

       --WWoolldd--ssttyyllee--ccaasstt (C++ only)
	   Warn if an old-style (C-style) cast to a non-void type is used
	   within a C++ program.  The new-style casts (ssttaattiicc__ccaasstt, rreeiinntteerr--
	   pprreett__ccaasstt, and ccoonnsstt__ccaasstt) are less vulnerable to unintended
	   effects, and much easier to grep for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ only)
	   Warn when a function declaration hides virtual functions from a
	   base class.	For example, in:

		   struct A {
		     virtual void f();
		   };

		   struct B: public A {
		     void f(int);
		   };

	   the "A" class version of "f" is hidden in "B", and code like this:

		   B* b;
		   b->f();

	   will fail to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ only)
	   Disable the diagnostic for converting a bound pointer to member
	   function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ only)
	   Warn when overload resolution chooses a promotion from unsigned or
	   enumeral type to a signed type over a conversion to an unsigned
	   type of the same size.  Previous versions of G++ would try to pre-
	   serve unsignedness, but the standard mandates the current behavior.

       --WWssyynntthh (C++ only)
	   Warn when G++'s synthesis behavior does not match that of cfront.
	   For instance:

		   struct A {
		     operator int ();
		     A& operator = (int);
		   };

		   main ()
		   {
		     A a,b;
		     a = b;
		   }

	   In this example, G++ will synthesize a default AA&& ooppeerraattoorr == ((ccoonnsstt
	   AA&&));;, while cfront will use the user-defined ooppeerraattoorr ==.

       OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC DDiiaalleecctt

       This section describes the command-line options that are only meaning-
       ful for Objective-C programs; but you can also use most of the GNU com-
       piler options regardless of what language your program is in.  For
       example, you might compile a file "some_class.m" like this:

	       gcc -g -fgnu-runtime -O -c some_class.m

       In this example, only --ffggnnuu--rruunnttiimmee is an option meant only for Objec-
       tive-C programs; you can use the other options with any language sup-
       ported by GCC.

       Here is a list of options that are _o_n_l_y for compiling Objective-C pro-
       grams:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
	   Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate for each
	   literal string specified with the syntax "@"..."".  The default
	   class name is "NXConstantString" if the GNU runtime is being used,
	   and "NSConstantString" if the NeXT runtime is being used (see
	   below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if also present, will
	   override the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
	   literals to be laid out as constant CoreFoundation strings.

       --ffggnnuu--rruunnttiimmee
	   Generate object code compatible with the standard GNU Objective-C
	   runtime.  This is the default for most types of systems.

       --ffnneexxtt--rruunnttiimmee
	   Generate output compatible with the NeXT runtime.  This is the
	   default for NeXT-based systems, including Darwin and Mac OS X.  The
	   macro "__NEXT_RUNTIME__" is predefined if (and only if) this option
	   is used.

       --ffnnoo--nniill--rreecceeiivveerrss (APPLE ONLY)
	   Assume that all Objective-C message dispatches (e.g., "[receiver
	   message:arg]") in this translation unit ensure that the receiver is
	   not "nil".  This allows for more efficient entry points in the run-
	   time to be used.  Currently, this option is only available in con-
	   junciton with the NeXT runtime.

       --ffoobbjjcc--eexxcceeppttiioonnss (APPLE ONLY)
	   Enable syntactic support for structured exception handling in
	   Objective-C, similar to what is offered by C++ and Java.  This
	   option will also be enabled if the environment variable
	   "MACOSX_DEPLOYMENT_TARGET" exists and is set to "10.3" or greater.

		     @try {
		       ...
			  @throw expr;
		       ...
		     }
		     @catch (AnObjCClass *exc) {
		       ...
			 @throw expr;
		       ...
			 @throw;
		       ...
		     }
		     @catch (AnotherClass *exc) {
		       ...
		     }
		     @catch (id allOthers) {
		       ...
		     }
		     @finally {
		       ...
			 @throw expr;
		       ...
		     }

	   The @throw statement may appear anywhere in an Objective-C or
	   Objective-C++ program; when used inside of a @catch block, the
	   @throw may appear without an argument (as shown above), in which
	   case the object caught by the @catch will be rethrown.

	   Note that only (pointers to) Objective-C objects may be thrown and
	   caught using this scheme.  When an object is thrown, it will be
	   caught by the nearest @catch clause capable of handling objects of
	   that type, analogously to how "catch" blocks work in C++ and Java.
	   A "@catch(id ...)" clause (as shown above) may also be provided to
	   catch any and all Objective-C exceptions not caught by previous
	   @catch clauses (if any).

	   The @finally clause, if present, will be executed upon exit from
	   the immediately preceding "@try ... @catch" section.	 This will
	   happen regardless of whether any exceptions are thrown, caught or
	   rethrown inside the "@try ... @catch" section, analogously to the
	   behavior of the "finally" clause in Java.

	   There are several caveats to using the new exception mechanism:

	   *   Although currently designed to be binary compatible with
	       "NS_HANDLER"-style idioms provided by the "NSException" class,
	       the new exceptions can only be used on Mac OS X 10.3 (Panther)
	       and later systems, due to additional functionality needed in
	       the (NeXT) Objective-C runtime.

	   *   As mentioned above, the new exceptions do not support handling
	       types other than Objective-C objects.   Furthermore, when used
	       from Objective-C++, the Objective-C exception model does not
	       interoperate with C++ exceptions at this time.  This means you
	       cannot @throw an exception from Objective-C and "catch" it in
	       C++, or vice versa (i.e., "throw ... @catch").

	   The --ffoobbjjcc--eexxcceeppttiioonnss switch also enables the use of synchroniza-
	   tion blocks for thread-safe execution:

		     ObjCClass *lockObject = ...;
		     ...
		     @synchronized (lockObject) {
		       ...
			 @throw expr;
		       ...
		     }

	   Unlike Java, Objective-C does not allow for entire methods to be
	   marked @synchronized.  Note that throwing exceptions out of @syn-
	   chronized blocks is allowed, and will cause the guarding object to
	   be unlocked properly.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess (APPLE ONLY)
	   When compiling for the NeXT runtime, the compiler ordinarily
	   replaces calls to "objc_getClass("...")" (when the name of the
	   class is known at compile time) with static class references that
	   get initialized at load time, which improves run-time performance.
	   Specifying the --ffrreeppllaaccee--oobbjjcc--ccllaasssseess flag suppresses this behavior
	   and causes calls to "objc_getClass("...")" to be retained.  This is
	   useful in Fix-and-Continue debugging mode, since it allows for
	   individual class implementations to be modified during program exe-
	   cution.

       --ffzzeerroo--lliinnkk (APPLE ONLY)
	   Emit a special marker instructing _ll_dd((11)) not to statically link in
	   the resulting object file, and allow _dd_yy_ll_dd((11)) to load it in at run
	   time instead.  This is used in conjunction with the Zero Link
	   debugging mode.

       --ggeenn--ddeeccllss
	   Dump interface declarations for all classes seen in the source file
	   to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWnnoo--pprroottooccooll
	   If a class is declared to implement a protocol, a warning is issued
	   for every method in the protocol that is not implemented by the
	   class.  The default behavior is to issue a warning for every method
	   not explicitly implemented in the class, even if a method implemen-
	   tation is inherited from the superclass.  If you use the "-Wno-pro-
	   tocol" option, then methods inherited from the superclass are con-
	   sidered to be implemented, and no warning is issued for them.

       --WWsseelleeccttoorr
	   Warn if multiple methods of different types for the same selector
	   are found during compilation.  The check is performed on the list
	   of methods in the final stage of compilation.  Additionally, a
	   check is performed that for each selector appearing in a "@selec-
	   tor(...)"  expression, a corresponding method with that selector
	   has been found during compilation.  Because these checks scan the
	   method table only at the end of compilation, these warnings are not
	   produced if the final stage of compilation is not reached, for
	   example because an error is found during compilation, or because
	   the "-fsyntax-only" option is being used.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr
	   Warn if a "@selector(...)" expression referring to an undeclared
	   selector is found.  A selector is considered undeclared if no
	   method with that name has been declared (explicitly, in an @inter-
	   face or @protocol declaration, or implicitly, in an @implementation
	   section) before the "@selector(...)" expression.  This option
	   always performs its checks as soon as a "@selector(...)" expression
	   is found (while "-Wselector" only performs its checks in the final
	   stage of compilation), and so additionally enforces the coding
	   style convention that methods and selectors must be declared before
	   being used.

       OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg

       Traditionally, diagnostic messages have been formatted irrespective of
       the output device's aspect (e.g. its width, ...).  The options
       described below can be used to control the diagnostic messages format-
       ting algorithm, e.g. how many characters per line, how often source
       location information should be reported.	 Right now, only the C++ front
       end can honor these options.  However it is expected, in the near
       future, that the remaining front ends would be able to digest them cor-
       rectly.

       --ffmmeessssaaggee--lleennggtthh==_n
	   Try to format error messages so that they fit on lines of about _n
	   characters.	The default is 72 characters for gg++++ and 0 for the
	   rest of the front ends supported by GCC.  If _n is zero, then no
	   line-wrapping will be done; each error message will appear on a
	   single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
	   Only meaningful in line-wrapping mode.  Instructs the diagnostic
	   messages reporter to emit _o_n_c_e source location information; that
	   is, in case the message is too long to fit on a single physical
	   line and has to be wrapped, the source location won't be emitted
	   (as prefix) again, over and over, in subsequent continuation lines.
	   This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
	   Only meaningful in line-wrapping mode.  Instructs the diagnostic
	   messages reporter to emit the same source location information (as
	   prefix) for physical lines that result from the process of breaking
	   a message which is too long to fit on a single line.

       OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss

       Warnings are diagnostic messages that report constructions which are
       not inherently erroneous but which are risky or suggest there may have
       been an error.

       You can request many specific warnings with options beginning --WW, for
       example --WWiimmpplliicciitt to request warnings on implicit declarations.	 Each
       of these specific warning options also has a negative form beginning
       --WWnnoo-- to turn off warnings; for example, --WWnnoo--iimmpplliicciitt.	This manual
       lists only one of the two forms, whichever is not the default.

       The following options control the amount and kinds of warnings produced
       by GCC; for further, language-specific options also refer to @ref{C++
       Dialect Options} and @ref{Objective-C Dialect Options}.

       --ffssyynnttaaxx--oonnllyy
	   Check the code for syntax errors, but don't do anything beyond
	   that.

       --ppeeddaannttiicc
	   Issue all the warnings demanded by strict ISO C and ISO C++; reject
	   all programs that use forbidden extensions, and some other programs
	   that do not follow ISO C and ISO C++.  For ISO C, follows the ver-
	   sion of the ISO C standard specified by any --ssttdd option used.

	   Valid ISO C and ISO C++ programs should compile properly with or
	   without this option (though a rare few will require --aannssii or a --ssttdd
	   option specifying the required version of ISO C).  However, without
	   this option, certain GNU extensions and traditional C and C++ fea-
	   tures are supported as well.	 With this option, they are rejected.

	   --ppeeddaannttiicc does not cause warning messages for use of the alternate
	   keywords whose names begin and end with ____.	Pedantic warnings are
	   also disabled in the expression that follows "__extension__".  How-
	   ever, only system header files should use these escape routes;
	   application programs should avoid them.

	   Some users try to use --ppeeddaannttiicc to check programs for strict ISO C
	   conformance.	 They soon find that it does not do quite what they
	   want: it finds some non-ISO practices, but not all---only those for
	   which ISO C _r_e_q_u_i_r_e_s a diagnostic, and some others for which diag-
	   nostics have been added.

	   A feature to report any failure to conform to ISO C might be useful
	   in some instances, but would require considerable additional work
	   and would be quite different from --ppeeddaannttiicc.	 We don't have plans
	   to support such a feature in the near future.

	   Where the standard specified with --ssttdd represents a GNU extended
	   dialect of C, such as ggnnuu8899 or ggnnuu9999, there is a corresponding _b_a_s_e
	   _s_t_a_n_d_a_r_d, the version of ISO C on which the GNU extended dialect is
	   based.  Warnings from --ppeeddaannttiicc are given where they are required
	   by the base standard.  (It would not make sense for such warnings
	   to be given only for features not in the specified GNU C dialect,
	   since by definition the GNU dialects of C include all features the
	   compiler supports with the given option, and there would be nothing
	   to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
	   Like --ppeeddaannttiicc, except that errors are produced rather than warn-
	   ings.

       --ww  Inhibit all warning messages.

       --WWnnoo--iimmppoorrtt
	   Inhibit warning messages about the use of ##iimmppoorrtt.

       --WWnnoo--##wwaarrnniinnggss
	   Inhibit warning messages issued by ##wwaarrnniinngg.

       --WWpprraaggmmaa--oonnccee
	   Warn about the use of ##pprraaggmmaa oonnccee.	(APPLE ONLY)

       --WWeexxttrraa--ttookkeennss
	   Warn about extra tokens at the end of prepreprocessor directives.
	   (APPLE ONLY)

       --WWnneewwlliinnee--eeooff
	   Warn about files missing a newline at the end of the file.  (APPLE
	   ONLY)

       --WWnnoo--aallttiivveecc--lloonngg--ddeepprreeccaatteedd
	   Do not warn about the use of the deprecated 'long' keyword in
	   AltiVec data types.	(APPLE ONLY)

       --WWcchhaarr--ssuubbssccrriippttss
	   Warn if an array subscript has type "char".	This is a common cause
	   of error, as programmers often forget that this type is signed on
	   some machines.

       --WWccoommmmeenntt
	   Warn whenever a comment-start sequence //** appears in a //** comment,
	   or whenever a Backslash-Newline appears in a //// comment.

       --WWffoorrmmaatt
	   Check calls to "printf" and "scanf", etc., to make sure that the
	   arguments supplied have types appropriate to the format string
	   specified, and that the conversions specified in the format string
	   make sense.	This includes standard functions, and others specified
	   by format attributes, in the "printf", "scanf", "strftime" and
	   "strfmon" (an X/Open extension, not in the C standard) families.

	   The formats are checked against the format features supported by
	   GNU libc version 2.2.  These include all ISO C90 and C99 features,
	   as well as features from the Single Unix Specification and some BSD
	   and GNU extensions.	Other library implementations may not support
	   all these features; GCC does not support warning about features
	   that go beyond a particular library's limitations.  However, if
	   --ppeeddaannttiicc is used with --WWffoorrmmaatt, warnings will be given about for-
	   mat features not in the selected standard version (but not for
	   "strfmon" formats, since those are not in any version of the C
	   standard).

	   Since --WWffoorrmmaatt also checks for null format arguments for several
	   functions, --WWffoorrmmaatt also implies --WWnnoonnnnuullll.

	   --WWffoorrmmaatt is included in --WWaallll.  For more control over some aspects
	   of format checking, the options --WWnnoo--ffoorrmmaatt--yy22kk, --WWnnoo--ffoorr--
	   mmaatt--eexxttrraa--aarrggss, --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh, --WWffoorrmmaatt--nnoonnlliitteerraall,
	   --WWffoorrmmaatt--sseeccuurriittyy, and --WWffoorrmmaatt==22 are available, but are not
	   included in --WWaallll.

       --WWnnoo--ffoorrmmaatt--yy22kk
	   If --WWffoorrmmaatt is specified, do not warn about "strftime" formats
	   which may yield only a two-digit year.

       --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
	   If --WWffoorrmmaatt is specified, do not warn about excess arguments to a
	   "printf" or "scanf" format function.	 The C standard specifies that
	   such arguments are ignored.

	   Where the unused arguments lie between used arguments that are
	   specified with $$ operand number specifications, normally warnings
	   are still given, since the implementation could not know what type
	   to pass to "va_arg" to skip the unused arguments.  However, in the
	   case of "scanf" formats, this option will suppress the warning if
	   the unused arguments are all pointers, since the Single Unix Speci-
	   fication says that such unused arguments are allowed.

       --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh
	   If --WWffoorrmmaatt is specified, do not warn about zero-length formats.
	   The C standard specifies that zero-length formats are allowed.

       --WWffoorrmmaatt--nnoonnlliitteerraall
	   If --WWffoorrmmaatt is specified, also warn if the format string is not a
	   string literal and so cannot be checked, unless the format function
	   takes its format arguments as a "va_list".

       --WWffoorrmmaatt--sseeccuurriittyy
	   If --WWffoorrmmaatt is specified, also warn about uses of format functions
	   that represent possible security problems.  At present, this warns
	   about calls to "printf" and "scanf" functions where the format
	   string is not a string literal and there are no format arguments,
	   as in "printf (foo);".  This may be a security hole if the format
	   string came from untrusted input and contains %%nn.  (This is cur-
	   rently a subset of what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in
	   future warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are not
	   included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

       --WWffoorrmmaatt==22
	   Enable --WWffoorrmmaatt plus format checks not included in --WWffoorrmmaatt.	 Cur-
	   rently equivalent to --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuu--
	   rriittyy.

       --WWnnoonnnnuullll
	   Enable warning about passing a null pointer for arguments marked as
	   requiring a non-null value by the "nonnull" function attribute.

	   --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.	 It can be disabled
	   with the --WWnnoo--nnoonnnnuullll option.

       --WWiimmpplliicciitt--iinntt
	   Warn when a declaration does not specify a type.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
       --WWeerrrroorr--iimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
	   Give a warning (or error) whenever a function is used before being
	   declared.

       --WWiimmpplliicciitt
	   Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.

       --WWmmaaiinn
	   Warn if the type of mmaaiinn is suspicious.  mmaaiinn should be a function
	   with external linkage, returning int, taking either zero arguments,
	   two, or three arguments of appropriate types.

       --WWmmiissssiinngg--bbrraacceess
	   Warn if an aggregate or union initializer is not fully bracketed.
	   In the following example, the initializer for aa is not fully brack-
	   eted, but that for bb is fully bracketed.

		   int a[2][2] = { 0, 1, 2, 3 };
		   int b[2][2] = { { 0, 1 }, { 2, 3 } };

       --WWppaarreenntthheesseess
	   Warn if parentheses are omitted in certain contexts, such as when
	   there is an assignment in a context where a truth value is
	   expected, or when operators are nested whose precedence people
	   often get confused about.

	   Also warn about constructions where there may be confusion to which
	   "if" statement an "else" branch belongs.  Here is an example of
	   such a case:

		   {
		     if (a)
		       if (b)
			 foo ();
		     else
		       bar ();
		   }

	   In C, every "else" branch belongs to the innermost possible "if"
	   statement, which in this example is "if (b)".  This is often not
	   what the programmer expected, as illustrated in the above example
	   by indentation the programmer chose.	 When there is the potential
	   for this confusion, GCC will issue a warning when this flag is
	   specified.  To eliminate the warning, add explicit braces around
	   the innermost "if" statement so there is no way the "else" could
	   belong to the enclosing "if".  The resulting code would look like
	   this:

		   {
		     if (a)
		       {
			 if (b)
			   foo ();
			 else
			   bar ();
		       }
		   }

       --WWsseeqquueennccee--ppooiinntt
	   Warn about code that may have undefined semantics because of viola-
	   tions of sequence point rules in the C standard.

	   The C standard defines the order in which expressions in a C pro-
	   gram are evaluated in terms of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which represent a
	   partial ordering between the execution of parts of the program:
	   those executed before the sequence point, and those executed after
	   it.	These occur after the evaluation of a full expression (one
	   which is not part of a larger expression), after the evaluation of
	   the first operand of a "&&", "||", "? :" or "," (comma) operator,
	   before a function is called (but after the evaluation of its argu-
	   ments and the expression denoting the called function), and in cer-
	   tain other places.  Other than as expressed by the sequence point
	   rules, the order of evaluation of subexpressions of an expression
	   is not specified.  All these rules describe only a partial order
	   rather than a total order, since, for example, if two functions are
	   called within one expression with no sequence point between them,
	   the order in which the functions are called is not specified.  How-
	   ever, the standards committee have ruled that function calls do not
	   overlap.

	   It is not specified when between sequence points modifications to
	   the values of objects take effect.  Programs whose behavior depends
	   on this have undefined behavior; the C standard specifies that
	   ``Between the previous and next sequence point an object shall have
	   its stored value modified at most once by the evaluation of an
	   expression.	Furthermore, the prior value shall be read only to
	   determine the value to be stored.''.	 If a program breaks these
	   rules, the results on any particular implementation are entirely
	   unpredictable.

	   Examples of code with undefined behavior are "a = a++;", "a[n] =
	   b[n++]" and "a[i++] = i;".  Some more complicated cases are not
	   diagnosed by this option, and it may give an occasional false posi-
	   tive result, but in general it has been found fairly effective at
	   detecting this sort of problem in programs.

	   The present implementation of this option only works for C pro-
	   grams.  A future implementation may also work for C++ programs.

	   The C standard is worded confusingly, therefore there is some
	   debate over the precise meaning of the sequence point rules in sub-
	   tle cases.  Links to discussions of the problem, including proposed
	   formal definitions, may be found on our readings page, at
	   <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

       --WWrreettuurrnn--ttyyppee
	   Warn whenever a function is defined with a return-type that
	   defaults to "int".  Also warn about any "return" statement with no
	   return-value in a function whose return-type is not "void".

	   For C++, a function without return type always produces a diagnos-
	   tic message, even when --WWnnoo--rreettuurrnn--ttyyppee is specified.  The only
	   exceptions are mmaaiinn and functions defined in system headers.

       --WWsswwiittcchh
	   Warn whenever a "switch" statement has an index of enumeral type
	   and lacks a "case" for one or more of the named codes of that enu-
	   meration.  (The presence of a "default" label prevents this warn-
	   ing.)  "case" labels outside the enumeration range also provoke
	   warnings when this option is used.

       --WWsswwiittcchh--ddeeffaauulltt
	   Warn whenever a "switch" statement does not have a "default" case.

       --WWsswwiittcchh--eennuumm
	   Warn whenever a "switch" statement has an index of enumeral type
	   and lacks a "case" for one or more of the named codes of that
	   enumeration.	 "case" labels outside the enumeration range also pro-
	   voke warnings when this option is used.

       --WWttrriiggrraapphhss
	   Warn if any trigraphs are encountered that might change the meaning
	   of the program (trigraphs within comments are not warned about).

       --WWuunnuusseedd--ffuunnccttiioonn
	   Warn whenever a static function is declared but not defined or a
	   non\-inline static function is unused.

       --WWuunnuusseedd--llaabbeell
	   Warn whenever a label is declared but not used.

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--ppaarraammeetteerr
	   Warn whenever a function parameter is unused aside from its decla-
	   ration.

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaarriiaabbllee
	   Warn whenever a local variable or non-constant static variable is
	   unused aside from its declaration

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaalluuee
	   Warn whenever a statement computes a result that is explicitly not
	   used.

	   To suppress this warning cast the expression to vvooiidd.

       --WWuunnuusseedd
	   All the above --WWuunnuusseedd options combined.

	   In order to get a warning about an unused function parameter, you
	   must either specify --WW --WWuunnuusseedd or separately specify
	   --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
	   Warn if an automatic variable is used without first being initial-
	   ized or if a variable may be clobbered by a "setjmp" call.

	   These warnings are possible only in optimizing compilation, because
	   they require data flow information that is computed only when opti-
	   mizing.  If you don't specify --OO, you simply won't get these warn-
	   ings.

	   These warnings occur only for variables that are candidates for
	   register allocation.	 Therefore, they do not occur for a variable
	   that is declared "volatile", or whose address is taken, or whose
	   size is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for
	   structures, unions or arrays, even when they are in registers.

	   Note that there may be no warning about a variable that is used
	   only to compute a value that itself is never used, because such
	   computations may be deleted by data flow analysis before the warn-
	   ings are printed.

	   These warnings are made optional because GCC is not smart enough to
	   see all the reasons why the code might be correct despite appearing
	   to have an error.  Here is one example of how this can happen:

		   {
		     int x;
		     switch (y)
		       {
		       case 1: x = 1;
			 break;
		       case 2: x = 4;
			 break;
		       case 3: x = 5;
		       }
		     foo (x);
		   }

	   If the value of "y" is always 1, 2 or 3, then "x" is always ini-
	   tialized, but GCC doesn't know this.	 Here is another common case:

		   {
		     int save_y;
		     if (change_y) save_y = y, y = new_y;
		     ...
		     if (change_y) y = save_y;
		   }

	   This has no bug because "save_y" is used only if it is set.

	   This option also warns when a non-volatile automatic variable might
	   be changed by a call to "longjmp".  These warnings as well are pos-
	   sible only in optimizing compilation.

	   The compiler sees only the calls to "setjmp".  It cannot know where
	   "longjmp" will be called; in fact, a signal handler could call it
	   at any point in the code.  As a result, you may get a warning even
	   when there is in fact no problem because "longjmp" cannot in fact
	   be called at the place which would cause a problem.

	   Some spurious warnings can be avoided if you declare all the func-
	   tions you use that never return as "noreturn".

       --WWuunnkknnoowwnn--pprraaggmmaass
	   Warn when a #pragma directive is encountered which is not under-
	   stood by GCC.  If this command line option is used, warnings will
	   even be issued for unknown pragmas in system header files.  This is
	   not the case if the warnings were only enabled by the --WWaallll command
	   line option.

       --WWssttrriicctt--aalliiaassiinngg
	   This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.	 It
	   warns about code which might break the strict aliasing rules that
	   the compiler is using for optimization. The warning does not catch
	   all cases, but does attempt to catch the more common pitfalls. It
	   is included in --WWaallll.

       --WWaallll
	   All of the above --WW options combined.  This enables all the warn-
	   ings about constructions that some users consider questionable, and
	   that are easy to avoid (or modify to prevent the warning), even in
	   conjunction with macros.  This also enables some language-specific
	   warnings described in @ref{C++ Dialect Options} and @ref{Objec-
	   tive-C Dialect Options}.

       --WWmmoosstt
	   This is equivalent to -Wall -Wno-parentheses. (APPLE ONLY)

       The following --WW...... options are not implied by --WWaallll.  Some of them
       warn about constructions that users generally do not consider question-
       able, but which occasionally you might wish to check for; others warn
       about constructions that are necessary or hard to avoid in some cases,
       and there is no simple way to modify the code to suppress the warning.

       --WW  Print extra warning messages for these events:

	   *   A function can return either with or without a value.  (Falling
	       off the end of the function body is considered returning with-
	       out a value.)  For example, this function would evoke such a
	       warning:

		       foo (a)
		       {
			 if (a > 0)
			   return a;
		       }

	   *   An expression-statement or the left-hand side of a comma
	       expression contains no side effects.  To suppress the warning,
	       cast the unused expression to void.  For example, an expression
	       such as xx[[ii,,jj]] will cause a warning, but xx[[((vvooiidd))ii,,jj]] will not.

	   *   An unsigned value is compared against zero with << or <<==.

	   *   A comparison like xx<<==yy<<==zz appears; this is equivalent to ((xx<<==yy
	       ?? 11 :: 00)) <<== zz, which is a different interpretation from that of
	       ordinary mathematical notation.

	   *   Storage-class specifiers like "static" are not the first things
	       in a declaration.  According to the C Standard, this usage is
	       obsolescent.

	   *   The return type of a function has a type qualifier such as
	       "const".	 Such a type qualifier has no effect, since the value
	       returned by a function is not an lvalue.	 (But don't warn about
	       the GNU extension of "volatile void" return types.  That exten-
	       sion will be warned about if --ppeeddaannttiicc is specified.)

	   *   If --WWaallll or --WWuunnuusseedd is also specified, warn about unused argu-
	       ments.

	   *   A comparison between signed and unsigned values could produce
	       an incorrect result when the signed value is converted to
	       unsigned.  (But don't warn if --WWnnoo--ssiiggnn--ccoommppaarree is also speci-
	       fied.)

	   *   An aggregate has a partly bracketed initializer.	 For example,
	       the following code would evoke such a warning, because braces
	       are missing around the initializer for "x.h":

		       struct s { int f, g; };
		       struct t { struct s h; int i; };
		       struct t x = { 1, 2, 3 };

	   *   An aggregate has an initializer which does not initialize all
	       members.	 For example, the following code would cause such a
	       warning, because "x.h" would be implicitly initialized to zero:

		       struct s { int f, g, h; };
		       struct s x = { 3, 4 };

       --WWnnoo--ddiivv--bbyy--zzeerroo
	   Do not warn about compile-time integer division by zero.  Floating
	   point division by zero is not warned about, as it can be a legiti-
	   mate way of obtaining infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
	   Print warning messages for constructs found in system header files.
	   Warnings from system headers are normally suppressed, on the
	   assumption that they usually do not indicate real problems and
	   would only make the compiler output harder to read.	Using this
	   command line option tells GCC to emit warnings from system headers
	   as if they occurred in user code.  However, note that using --WWaallll
	   in conjunction with this option will _n_o_t warn about unknown pragmas
	   in system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also be used.

       --WWffllooaatt--eeqquuaall
	   Warn if floating point values are used in equality comparisons.

	   The idea behind this is that sometimes it is convenient (for the
	   programmer) to consider floating-point values as approximations to
	   infinitely precise real numbers.  If you are doing this, then you
	   need to compute (by analyzing the code, or in some other way) the
	   maximum or likely maximum error that the computation introduces,
	   and allow for it when performing comparisons (and when producing
	   output, but that's a different problem).  In particular, instead of
	   testing for equality, you would check to see whether the two values
	   have ranges that overlap; and this is done with the relational
	   operators, so equality comparisons are probably mistaken.

       --WWttrraaddiittiioonnaall (C only)
	   Warn about certain constructs that behave differently in tradi-
	   tional and ISO C.  Also warn about ISO C constructs that have no
	   traditional C equivalent, and/or problematic constructs which
	   should be avoided.

	   *   Macro parameters that appear within string literals in the
	       macro body.  In traditional C macro replacement takes place
	       within string literals, but does not in ISO C.

	   *   In traditional C, some preprocessor directives did not exist.
	       Traditional preprocessors would only consider a line to be a
	       directive if the ## appeared in column 1 on the line.  Therefore
	       --WWttrraaddiittiioonnaall warns about directives that traditional C under-
	       stands but would ignore because the ## does not appear as the
	       first character on the line.  It also suggests you hide direc-
	       tives like ##pprraaggmmaa not understood by traditional C by indenting
	       them.  Some traditional implementations would not recognize
	       ##eelliiff, so it suggests avoiding it altogether.

	   *   A function-like macro that appears without arguments.

	   *   The unary plus operator.

	   *   The UU integer constant suffix, or the FF or LL floating point
	       constant suffixes.  (Traditional C does support the LL suffix on
	       integer constants.)  Note, these suffixes appear in macros
	       defined in the system headers of most modern systems, e.g. the
	       __MMIINN/__MMAAXX macros in "<limits.h>".  Use of these macros in user
	       code might normally lead to spurious warnings, however gcc's
	       integrated preprocessor has enough context to avoid warning in
	       these cases.

	   *   A function declared external in one block and then used after
	       the end of the block.

	   *   A "switch" statement has an operand of type "long".

	   *   A non-"static" function declaration follows a "static" one.
	       This construct is not accepted by some traditional C compilers.

	   *   The ISO type of an integer constant has a different width or
	       signedness from its traditional type.  This warning is only
	       issued if the base of the constant is ten.  I.e. hexadecimal or
	       octal values, which typically represent bit patterns, are not
	       warned about.

	   *   Usage of ISO string concatenation is detected.

	   *   Initialization of automatic aggregates.

	   *   Identifier conflicts with labels.  Traditional C lacks a sepa-
	       rate namespace for labels.

	   *   Initialization of unions.  If the initializer is zero, the
	       warning is omitted.  This is done under the assumption that the
	       zero initializer in user code appears conditioned on e.g.
	       "__STDC__" to avoid missing initializer warnings and relies on
	       default initialization to zero in the traditional C case.

	   *   Conversions by prototypes between fixed/floating point values
	       and vice versa.	The absence of these prototypes when compiling
	       with traditional C would cause serious problems.	 This is a
	       subset of the possible conversion warnings, for the full set
	       use --WWccoonnvveerrssiioonn.

	   *   Use of ISO C style function definitions.	 This warning inten-
	       tionally is _n_o_t issued for prototype declarations or variadic
	       functions because these ISO C features will appear in your code
	       when using libiberty's traditional C compatibility macros,
	       "PARAMS" and "VPARAMS".	This warning is also bypassed for
	       nested functions because that feature is already a gcc exten-
	       sion and thus not relevant to traditional C compatibility.

       --WWuunnddeeff
	   Warn if an undefined identifier is evaluated in an ##iiff directive.

       --WWeennddiiff--llaabbeellss
	   Warn whenever an ##eellssee or an ##eennddiiff are followed by text.

       --WWsshhaaddooww
	   Warn whenever a local variable shadows another local variable,
	   parameter or global variable or whenever a built-in function is
	   shadowed.

       --WWllaarrggeerr--tthhaann--_l_e_n
	   Warn whenever an object of larger than _l_e_n bytes is defined.

       --WWppooiinntteerr--aarriitthh
	   Warn about anything that depends on the ``size of'' a function type
	   or of "void".  GNU C assigns these types a size of 1, for conve-
	   nience in calculations with "void *" pointers and pointers to func-
	   tions.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C only)
	   Warn whenever a function call is cast to a non-matching type.  For
	   example, warn if "int malloc()" is cast to "anything *".

       --WWccaasstt--qquuaall
	   Warn whenever a pointer is cast so as to remove a type qualifier
	   from the target type.  For example, warn if a "const char *" is
	   cast to an ordinary "char *".

       --WWccaasstt--aalliiggnn
	   Warn whenever a pointer is cast such that the required alignment of
	   the target is increased.  For example, warn if a "char *" is cast
	   to an "int *" on machines where integers can only be accessed at
	   two- or four-byte boundaries.

       --WWwwrriittee--ssttrriinnggss
	   When compiling C, give string constants the type "const
	   char[length]" so that copying the address of one into a non-"const"
	   "char *" pointer will get a warning; when compiling C++, warn about
	   the deprecated conversion from string constants to "char *".	 These
	   warnings will help you find at compile time code that can try to
	   write into a string constant, but only if you have been very care-
	   ful about using "const" in declarations and prototypes.  Otherwise,
	   it will just be a nuisance; this is why we did not make --WWaallll
	   request these warnings.

       --WWccoonnvveerrssiioonn
	   Warn if a prototype causes a type conversion that is different from
	   what would happen to the same argument in the absence of a proto-
	   type.  This includes conversions of fixed point to floating and
	   vice versa, and conversions changing the width or signedness of a
	   fixed point argument except when the same as the default promotion.

	   Also, warn if a negative integer constant expression is implicitly
	   converted to an unsigned type.  For example, warn about the assign-
	   ment "x = -1" if "x" is unsigned.  But do not warn about explicit
	   casts like "(unsigned) -1".

       --WWssiiggnn--ccoommppaarree
	   Warn when a comparison between signed and unsigned values could
	   produce an incorrect result when the signed value is converted to
	   unsigned.  This warning is enabled by --WW, and by --WWaallll in C++ only.

       --WWaaggggrreeggaattee--rreettuurrnn
	   Warn if any functions that return structures or unions are defined
	   or called.  (In languages where you can return an array, this also
	   elicits a warning.)

       --WWssttrriicctt--pprroottoottyyppeess (C only)
	   Warn if a function is declared or defined without specifying the
	   argument types.  (An old-style function definition is permitted
	   without a warning if preceded by a declaration which specifies the
	   argument types.)

       --WWmmiissssiinngg--pprroottoottyyppeess (C only)
	   Warn if a global function is defined without a previous prototype
	   declaration.	 This warning is issued even if the definition itself
	   provides a prototype.  The aim is to detect global functions that
	   fail to be declared in header files.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
	   Warn if a global function is defined without a previous declara-
	   tion.  Do so even if the definition itself provides a prototype.
	   Use this option to detect global functions that are not declared in
	   header files.

       --WWmmiissssiinngg--nnoorreettuurrnn
	   Warn about functions which might be candidates for attribute "nore-
	   turn".  Note these are only possible candidates, not absolute ones.
	   Care should be taken to manually verify functions actually do not
	   ever return before adding the "noreturn" attribute, otherwise sub-
	   tle code generation bugs could be introduced.  You will not get a
	   warning for "main" in hosted C environments.

       --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
	   If --WWffoorrmmaatt is enabled, also warn about functions which might be
	   candidates for "format" attributes.	Note these are only possible
	   candidates, not absolute ones.  GCC will guess that "format"
	   attributes might be appropriate for any function that calls a func-
	   tion like "vprintf" or "vscanf", but this might not always be the
	   case, and some functions for which "format" attributes are appro-
	   priate may not be detected.	This option has no effect unless
	   --WWffoorrmmaatt is enabled (possibly by --WWaallll).

       --WWnnoo--mmuullttiicchhaarr
	   Do not warn if a multicharacter constant (''FFOOOOFF'') is used.  Usually
	   they indicate a typo in the user's code, as they have implementa-
	   tion-defined values, and should not be used in portable code.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
	   Do not warn about uses of functions, variables, and types marked as
	   deprecated by using the "deprecated" attribute.  (@pxref{Function
	   Attributes}, @pxref{Variable Attributes}, @pxref{Type Attributes}.)

       --WWppaacckkeedd
	   Warn if a structure is given the packed attribute, but the packed
	   attribute has no effect on the layout or size of the structure.
	   Such structures may be mis-aligned for little benefit.  For
	   instance, in this code, the variable "f.x" in "struct bar" will be
	   misaligned even though "struct bar" does not itself have the packed
	   attribute:

		   struct foo {
		     int x;
		     char a, b, c, d;
		   } __attribute__((packed));
		   struct bar {
		     char z;
		     struct foo f;
		   };

       --WWppaaddddeedd
	   Warn if padding is included in a structure, either to align an ele-
	   ment of the structure or to align the whole structure.  Sometimes
	   when this happens it is possible to rearrange the fields of the
	   structure to reduce the padding and so make the structure smaller.

       --WWrreedduunnddaanntt--ddeeccllss
	   Warn if anything is declared more than once in the same scope, even
	   in cases where multiple declaration is valid and changes nothing.

       --WWnneesstteedd--eexxtteerrnnss (C only)
	   Warn if an "extern" declaration is encountered within a function.

       --WWuunnrreeaacchhaabbllee--ccooddee
	   Warn if the compiler detects that code will never be executed.

	   This option is intended to warn when the compiler detects that at
	   least a whole line of source code will never be executed, because
	   some condition is never satisfied or because it is after a proce-
	   dure that never returns.

	   It is possible for this option to produce a warning even though
	   there are circumstances under which part of the affected line can
	   be executed, so care should be taken when removing apparently-
	   unreachable code.

	   For instance, when a function is inlined, a warning may mean that
	   the line is unreachable in only one inlined copy of the function.

	   This option is not made part of --WWaallll because in a debugging ver-
	   sion of a program there is often substantial code which checks cor-
	   rect functioning of the program and is, hopefully, unreachable
	   because the program does work.  Another common use of unreachable
	   code is to provide behavior which is selectable at compile-time.

       --WWiinnlliinnee
	   Warn if a function can not be inlined and it was declared as
	   inline.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ only)
	   Suppress warnings from applying the ooffffsseettooff macro to a non-POD
	   type.

       --WWnnoo--lloonngg--ddoouubbllee
	   Inhibit warning if the lloonngg ddoouubbllee type is used. (APPLE ONLY)

       --WWiinnvvaalliidd--ppcchh
	   Warn if a precompiled header is found in the search path but can't
	   be used.

       --WWlloonngg--lloonngg
	   Warn if lloonngg lloonngg type is used.  This is default.  To inhibit the
	   warning messages, use --WWnnoo--lloonngg--lloonngg.  Flags --WWlloonngg--lloonngg and
	   --WWnnoo--lloonngg--lloonngg are taken into account only when --ppeeddaannttiicc flag is
	   used.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
	   Warn if a requested optimization pass is disabled.  This warning
	   does not generally indicate that there is anything wrong with your
	   code; it merely indicates that GCC's optimizers were unable to han-
	   dle the code effectively.  Often, the problem is that your code is
	   too big or too complex; GCC will refuse to optimize programs when
	   the optimization itself is likely to take inordinate amounts of
	   time.

       --WWeerrrroorr
	   Make all warnings into errors.

       OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC

       GCC has various special options that are used for debugging either your
       program or GCC:

       --gg  Produce debugging information in the operating system's native for-
	   mat (stabs, COFF, XCOFF, or DWARF).	GDB can work with this debug-
	   ging information.

	   On most systems that use stabs format, --gg enables use of extra
	   debugging information that only GDB can use; this extra information
	   makes debugging work better in GDB but will probably make other
	   debuggers crash or refuse to read the program.  If you want to con-
	   trol for certain whether to generate the extra information, use
	   --ggssttaabbss++ or --ggssttaabbss (see below).

	   Unlike most other C compilers, GCC allows you to use --gg with --OO.
	   The shortcuts taken by optimized code may occasionally produce sur-
	   prising results: some variables you declared may not exist at all;
	   flow of control may briefly move where you did not expect it; some
	   statements may not be executed because they compute constant
	   results or their values were already at hand; some statements may
	   execute in different places because they were moved out of loops.

	   Nevertheless it proves possible to debug optimized output.  This
	   makes it reasonable to use the optimizer for programs that might
	   have bugs.

	   The following options are useful when GCC is generated with the
	   capability for more than one debugging format.

       --ggggddbb
	   Produce debugging information for use by GDB.  This means to use
	   the most expressive format available (DWARF 2, stabs, or the native
	   format if neither of those are supported), including GDB extensions
	   if at all possible.

       --ggssttaabbss
	   Produce debugging information in stabs format (if that is sup-
	   ported), without GDB extensions.  This is the format used by DBX on
	   most BSD systems.  On MIPS, Alpha and System V Release 4 systems
	   this option produces stabs debugging output which is not understood
	   by DBX or SDB.  On System V Release 4 systems this option requires
	   the GNU assembler.

       --ggssttaabbss++
	   Produce debugging information in stabs format (if that is sup-
	   ported), using GNU extensions understood only by the GNU debugger
	   (GDB).  The use of these extensions is likely to make other debug-
	   gers crash or refuse to read the program.

	   (Other debug formats, such as --ggccooffff, are not supported in Darwin
	   or Mac OS X.)

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
	   Request debugging information and also use _l_e_v_e_l to specify how
	   much information.  The default level is 2.

	   Level 1 produces minimal information, enough for making backtraces
	   in parts of the program that you don't plan to debug.  This
	   includes descriptions of functions and external variables, but no
	   information about local variables and no line numbers.

	   Level 3 includes extra information, such as all the macro defini-
	   tions present in the program.  Some debuggers support macro expan-
	   sion when you use --gg33.

	   Note that in order to avoid confusion between DWARF1 debug level 2,
	   and DWARF2, neither --ggddwwaarrff nor --ggddwwaarrff--22 accept a concatenated
	   debug level.	 Instead use an additional --gg_l_e_v_e_l option to change
	   the debug level for DWARF1 or DWARF2.

       --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
	   Compress DWARF2 debugging information by eliminating duplicated
	   information about each symbol.  This option only makes sense when
	   generating DWARF2 debugging information with --ggddwwaarrff--22.

       --pp  Generate extra code to write profile information suitable for the
	   analysis program pprrooff.  You must use this option when compiling the
	   source files you want data about, and you must also use it when
	   linking.

       --ppgg Generate extra code to write profile information suitable for the
	   analysis program ggpprrooff.  You must use this option when compiling
	   the source files you want data about, and you must also use it when
	   linking.

       --QQ  Makes the compiler print out each function name as it is compiled,
	   and print some statistics about each pass when it finishes.

       --ffttiimmee--rreeppoorrtt
	   Makes the compiler print some statistics about the time consumed by
	   each pass when it finishes.

       --ffmmeemm--rreeppoorrtt
	   Makes the compiler print some statistics about permanent memory
	   allocation when it finishes.

       --ffpprrooffiillee--aarrccss
	   Instrument _a_r_c_s during compilation to generate coverage data or for
	   profile-directed block ordering.  During execution the program
	   records how many times each branch is executed and how many times
	   it is taken.	 When the compiled program exits it saves this data to
	   a file called _a_u_x_n_a_m_e_._d_a for each source file.  _a_u_x_n_a_m_e is gener-
	   ated from the name of the output file, if explicitly specified and
	   it is not the final executable, otherwise it is the basename of the
	   source file. In both cases any suffix is removed (e.g.  _f_o_o_._d_a for
	   input file _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._d_a for output file specified as --oo
	   ddiirr//ffoooo..oo).

	   For profile-directed block ordering, compile the program with
	   --ffpprrooffiillee--aarrccss plus optimization and code generation options, gen-
	   erate the arc profile information by running the program on a
	   selected workload, and then compile the program again with the same
	   optimization and code generation options plus --ffbbrraanncchh--pprroobbaabbiillii--
	   ttiieess.

	   The other use of --ffpprrooffiillee--aarrccss is for use with ggccoovv, when it is
	   used with the --fftteesstt--ccoovveerraaggee option.

	   With --ffpprrooffiillee--aarrccss, for each function of your program GCC creates
	   a program flow graph, then finds a spanning tree for the graph.
	   Only arcs that are not on the spanning tree have to be instru-
	   mented: the compiler adds code to count the number of times that
	   these arcs are executed.  When an arc is the only exit or only
	   entrance to a block, the instrumentation code can be added to the
	   block; otherwise, a new basic block must be created to hold the
	   instrumentation code.

       --fftteesstt--ccoovveerraaggee
	   Create data files for the ggccoovv code-coverage utility.  See --ffpprroo--
	   ffiillee--aarrccss option above for a description of _a_u_x_n_a_m_e.

	   _a_u_x_n_a_m_e..bbbb
	       A mapping from basic blocks to line numbers, which ggccoovv uses to
	       associate basic block execution counts with line numbers.

	   _a_u_x_n_a_m_e..bbbbgg
	       A list of all arcs in the program flow graph.  This allows ggccoovv
	       to reconstruct the program flow graph, so that it can compute
	       all basic block and arc execution counts from the information
	       in the _a_u_x_n_a_m_e_._d_a file.

	   Use --fftteesstt--ccoovveerraaggee with --ffpprrooffiillee--aarrccss; the latter option adds
	   instrumentation to the program, which then writes execution counts
	   to another data file:

	   _a_u_x_n_a_m_e..ddaa
	       Runtime arc execution counts, used in conjunction with the arc
	       information in the file _a_u_x_n_a_m_e_._b_b_g.

	   Coverage data will map better to the source files if --fftteesstt--ccoovveerr--
	   aaggee is used without optimization.

       --dd_l_e_t_t_e_r_s
	   Says to make debugging dumps during compilation at times specified
	   by _l_e_t_t_e_r_s.	This is used for debugging the compiler.  The file
	   names for most of the dumps are made by appending a pass number and
	   a word to the _d_u_m_p_n_a_m_e. _d_u_m_p_n_a_m_e is generated from the name of the
	   output file, if explicitly specified and it is not an executable,
	   otherwise it is the basename of the source file. In both cases any
	   suffix is removed (e.g.  _f_o_o_._0_0_._r_t_l or _f_o_o_._0_1_._s_i_b_l_i_n_g).  Here are
	   the possible letters for use in _l_e_t_t_e_r_s, and their meanings:

	   AA   Annotate the assembler output with miscellaneous debugging
	       information.

	   bb   Dump after computing branch probabilities, to _f_i_l_e_._1_4_._b_p.

	   BB   Dump after block reordering, to _f_i_l_e_._3_2_._b_b_r_o.

	   cc   Dump after instruction combination, to the file _f_i_l_e_._1_9_._c_o_m_-
	       _b_i_n_e.

	   CC   Dump after the first if conversion, to the file _f_i_l_e_._1_5_._c_e_1.

	   dd   Dump after delayed branch scheduling, to _f_i_l_e_._3_4_._d_b_r.

	   DD   Dump all macro definitions, at the end of preprocessing, in
	       addition to normal output.

	   ee   Dump after SSA optimizations, to _f_i_l_e_._0_4_._s_s_a and _f_i_l_e_._0_7_._u_s_s_a.

	   EE   Dump after the second if conversion, to _f_i_l_e_._2_9_._c_e_3.

	   ff   Dump after life analysis, to _f_i_l_e_._1_8_._l_i_f_e.

	   FF   Dump after purging "ADDRESSOF" codes, to _f_i_l_e_._1_0_._a_d_d_r_e_s_s_o_f.

	   gg   Dump after global register allocation, to _f_i_l_e_._2_4_._g_r_e_g.

	   hh   Dump after finalization of EH handling code, to _f_i_l_e_._0_2_._e_h.

	   kk   Dump after reg-to-stack conversion, to _f_i_l_e_._3_1_._s_t_a_c_k.

	   oo   Dump after post-reload optimizations, to _f_i_l_e_._2_5_._p_o_s_t_r_e_l_o_a_d.

	   GG   Dump after GCSE, to _f_i_l_e_._1_1_._g_c_s_e.

	   ii   Dump after sibling call optimizations, to _f_i_l_e_._0_1_._s_i_b_l_i_n_g.

	   jj   Dump after the first jump optimization, to _f_i_l_e_._0_3_._j_u_m_p.

	   kk   Dump after conversion from registers to stack, to
	       _f_i_l_e_._3_1_._s_t_a_c_k.

	   ll   Dump after local register allocation, to _f_i_l_e_._2_3_._l_r_e_g.

	   LL   Dump after loop optimization, to _f_i_l_e_._1_2_._l_o_o_p.

	   MM   Dump after performing the machine dependent reorganization
	       pass, to _f_i_l_e_._3_3_._m_a_c_h.

	   nn   Dump after register renumbering, to _f_i_l_e_._2_8_._r_n_r_e_g.

	   NN   Dump after the register move pass, to _f_i_l_e_._2_1_._r_e_g_m_o_v_e.

	   rr   Dump after RTL generation, to _f_i_l_e_._0_0_._r_t_l.

	   RR   Dump after the second scheduling pass, to _f_i_l_e_._3_0_._s_c_h_e_d_2.

	   ss   Dump after CSE (including the jump optimization that sometimes
	       follows CSE), to _f_i_l_e_._0_9_._c_s_e.

	   SS   Dump after the first scheduling pass, to _f_i_l_e_._2_2_._s_c_h_e_d.

	   tt   Dump after the second CSE pass (including the jump optimization
	       that sometimes follows CSE), to _f_i_l_e_._1_7_._c_s_e_2.

	   uu   Dump after null pointer elimination pass to _f_i_l_e_._0_8_._n_u_l_l.

	   ww   Dump after the second flow pass, to _f_i_l_e_._2_6_._f_l_o_w_2.

	   XX   Dump after SSA dead code elimination, to _f_i_l_e_._0_6_._s_s_a_d_c_e.

	   zz   Dump after the peephole pass, to _f_i_l_e_._2_7_._p_e_e_p_h_o_l_e_2.

	   aa   Produce all the dumps listed above.

	   mm   Print statistics on memory usage, at the end of the run, to
	       standard error.

	   pp   Annotate the assembler output with a comment indicating which
	       pattern and alternative was used.  The length of each instruc-
	       tion is also printed.

	   PP   Dump the RTL in the assembler output as a comment before each
	       instruction.  Also turns on --ddpp annotation.

	   vv   For each of the other indicated dump files (except for
	       _f_i_l_e_._0_0_._r_t_l), dump a representation of the control flow graph
	       suitable for viewing with VCG to _f_i_l_e_._p_a_s_s_._v_c_g.

	   xx   Just generate RTL for a function instead of compiling it.  Usu-
	       ally used with rr.

	   yy   Dump debugging information during parsing, to standard error.

       --ffdduummpp--uunnnnuummbbeerreedd
	   When doing debugging dumps (see --dd option above), suppress instruc-
	   tion numbers and line number note output.  This makes it more fea-
	   sible to use diff on debugging dumps for compiler invocations with
	   different options, in particular with and without --gg.

       --ffdduummpp--ttrraannssllaattiioonn--uunniitt (C and C++ only)
       --ffdduummpp--ttrraannssllaattiioonn--uunniitt--_o_p_t_i_o_n_s (C and C++ only)
	   Dump a representation of the tree structure for the entire transla-
	   tion unit to a file.	 The file name is made by appending _._t_u to the
	   source file name.  If the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls
	   the details of the dump as described for the --ffdduummpp--ttrreeee options.

       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy (C++ only)
       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy--_o_p_t_i_o_n_s (C++ only)
	   Dump a representation of each class's hierarchy and virtual func-
	   tion table layout to a file.	 The file name is made by appending
	   _._c_l_a_s_s to the source file name.  If the --_o_p_t_i_o_n_s form is used,
	   _o_p_t_i_o_n_s controls the details of the dump as described for the
	   --ffdduummpp--ttrreeee options.

       --ffdduummpp--ttrreeee--_s_w_i_t_c_h (C++ only)
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s (C++ only)
	   Control the dumping at various stages of processing the intermedi-
	   ate language tree to a file.	 The file name is generated by append-
	   ing a switch specific suffix to the source file name.  If the
	   --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s is a list of -- separated options
	   that control the details of the dump. Not all options are applica-
	   ble to all dumps, those which are not meaningful will be ignored.
	   The following options are available

	   aaddddrreessss
	       Print the address of each node.	Usually this is not meaningful
	       as it changes according to the environment and source file. Its
	       primary use is for tying up a dump file with a debug environ-
	       ment.

	   sslliimm
	       Inhibit dumping of members of a scope or body of a function
	       merely because that scope has been reached. Only dump such
	       items when they are directly reachable by some other path.

	   aallll Turn on all options.

	   The following tree dumps are possible:

	   oorriiggiinnaall
	       Dump before any tree based optimization, to _f_i_l_e_._o_r_i_g_i_n_a_l.

	   ooppttiimmiizzeedd
	       Dump after all tree based optimization, to _f_i_l_e_._o_p_t_i_m_i_z_e_d.

	   iinnlliinneedd
	       Dump after function inlining, to _f_i_l_e_._i_n_l_i_n_e_d.

       --ffsscchheedd--vveerrbboossee==_n
	   On targets that use instruction scheduling, this option controls
	   the amount of debugging output the scheduler prints.	 This informa-
	   tion is written to standard error, unless --ddSS or --ddRR is specified,
	   in which case it is output to the usual dump listing file, _._s_c_h_e_d
	   or _._s_c_h_e_d_2 respectively.  However for _n greater than nine, the out-
	   put is always printed to standard error.

	   For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the same informa-
	   tion as --ddRRSS.  For _n greater than one, it also output basic block
	   probabilities, detailed ready list information and unit/insn info.
	   For _n greater than two, it includes RTL at abort point, control-
	   flow and regions info.  And for _n over four, --ffsscchheedd--vveerrbboossee also
	   includes dependence info.

       --ssaavvee--tteemmppss
	   Store the usual ``temporary'' intermediate files permanently; place
	   them in the current directory and name them based on the source
	   file.  Thus, compiling _f_o_o_._c with --cc --ssaavvee--tteemmppss would produce
	   files _f_o_o_._i and _f_o_o_._s, as well as _f_o_o_._o.  This creates a prepro-
	   cessed _f_o_o_._i output file even though the compiler now normally uses
	   an integrated preprocessor.

       --ttiimmee
	   Report the CPU time taken by each subprocess in the compilation
	   sequence.  For C source files, this is the compiler proper and
	   assembler (plus the linker if linking is done).  The output looks
	   like this:

		   # cc1 0.12 0.01
		   # as 0.00 0.01

	   The first number on each line is the ``user time,'' that is time
	   spent executing the program itself.	The second number is ``system
	   time,'' time spent executing operating system routines on behalf of
	   the program.	 Both numbers are in seconds.

       --ffssaavvee--rreeppoossiittoorryy==_l_o_c_a_t_i_o_n
	   Creates separate symbol repository at _l_o_c_a_t_i_o_n for given input
	   header file. Separate repository contains only debugging symbols in
	   stabs format.

       --ggrreeppoossiittoorryy
	   Instructs compiler to use separate symbol repository with debugging
	   symbols. Compiler searches for such repositories in include paths.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
	   Print the full absolute name of the library file _l_i_b_r_a_r_y that would
	   be used when linking---and don't do anything else.  With this
	   option, GCC does not compile or link anything; it just prints the
	   file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
	   Print the directory name corresponding to the multilib selected by
	   any other switches present in the command line.  This directory is
	   supposed to exist in GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
	   Print the mapping from multilib directory names to compiler
	   switches that enable them.  The directory name is separated from
	   the switches by ;;, and each switch starts with an @@}} iinnsstteeaadd ooff tthhee
	   @@ssaammpp{{--, without spaces between multiple switches.  This is sup-
	   posed to ease shell-processing.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
	   Like --pprriinntt--ffiillee--nnaammee, but searches for a program such as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
	   Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

	   This is useful when you use --nnoossttddlliibb or --nnooddeeffaauullttlliibbss but you do
	   want to link with _l_i_b_g_c_c_._a.	You can do

		   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
	   Print the name of the configured installation directory and a list
	   of program and library directories gcc will search---and don't do
	   anything else.

	   This is useful when gcc prints the error message iinnssttaallllaattiioonn pprroobb--
	   lleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee oorr ddiirreeccttoorryy.  To resolve this
	   you either need to put _c_p_p_0 and the other compiler components where
	   gcc expects to find them, or you can set the environment variable
	   GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you installed them.  Don't
	   forget the trailing '/'.

       --dduummppmmaacchhiinnee
	   Print the compiler's target machine (for example,
	   ii668866--ppcc--lliinnuuxx--ggnnuu)---and don't do anything else.

       --dduummppvveerrssiioonn
	   Print the compiler version (for example, 33..00)---and don't do any-
	   thing else.

       --dduummppssppeeccss
	   Print the compiler's built-in specs---and don't do anything else.
	   (This is used when GCC itself is being built.)

       OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to reduce the
       cost of compilation and to make debugging produce the expected results.
       Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or
       change the program counter to any other statement in the function and
       get exactly the results you would expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the
       performance and/or code size at the expense of compilation time and
       possibly the ability to debug the program.

       Not all optimizations are controlled directly by a flag.	 Only opti-
       mizations that have a flag are listed.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more time, and a
	   lot more memory for a large function.

	   With --OO, the compiler tries to reduce code size and execution time,
	   without performing any optimizations that take a great deal of com-
	   pilation time.

	   In Apple's version of GCC, --ffssttrriicctt--aalliiaassiinngg, --ffrreeoorrddeerr--bblloocckkss, and
	   --ffsscchheedd--iinntteerrbblloocckk are disabled by default when optimizing.

       --OO22 Optimize even more.	GCC performs nearly all supported optimiza-
	   tions that do not involve a space-speed tradeoff.  The compiler
	   does not perform loop unrolling or function inlining when you spec-
	   ify --OO22.  As compared to --OO, this option increases both compilation
	   time and the performance of the generated code.

	   --OO22 turns on all optimization flags specified by --OO.	 It also turns
	   on the following optimization flags: --ffffoorrccee--mmeemm --ffooppttiimmiizzee--ssiibb--
	   lliinngg--ccaallllss --ffssttrreennggtthh--rreedduuccee --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
	   --ffrreerruunn--ccssee--aafftteerr--lloooopp  --ffrreerruunn--lloooopp--oopptt --ffggccssee   --ffggccssee--llmm
	   --ffggccssee--ssmm --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
	   --ffrreeggmmoovvee --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22 --ffsscchheedd--iinntteerrbblloocckk
	   --ffsscchheedd--ssppeecc --ffccaalllleerr--ssaavveess --ffppeeeepphhoollee22 --ffrreeoorrddeerr--bblloocckkss  --ffrree--
	   oorrddeerr--ffuunnccttiioonnss --ffssttrriicctt--aalliiaassiinngg --ffaalliiggnn--ffuunnccttiioonnss	--ffaalliiggnn--jjuummppss
	   --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss

	   Please note the warning under --ffggccssee about invoking --OO22 on programs
	   that use computed gotos.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations specified by --OO22
	   and also turns on the --ffiinnlliinnee--ffuunnccttiioonnss and --ffrreennaammee--rreeggiisstteerrss
	   options.

       --OO00 Do not optimize.  This is the default.

       --ffaasstt
	   Optimize for maximum performance. --ffaasstt changes the overall opti-
	   mization strategy of GCC in order to produce the fastest possible
	   running code for PPC7450 and G5 architectures. By default, --ffaasstt
	   optimizes for G5. Programs optimized for G5 will not run on
	   PPC7450. To optimize for PPC7450, add --mmccppuu==77445500 on command line.

	   --ffaasstt currently enables the following optimization flags (for G5
	   and PPC7450).  These flags may change in the future. You cannot
	   override any of these options if you use --ffaasstt except by setting
	   --mmccppuu==77445500. Note that --ffffaasstt--mmaatthh, --ffssttrriicctt--aalliiaassiinngg and
	   --mmaalliiggnn--nnaattuurraall are unsafe in some situations.  To build shared
	   libraries with --ffaasstt, specify --ffPPIICC on command line.

	   --OO33 --ffuunnrroollll--llooooppss --ffssttrriicctt--aalliiaassiinngg --ffsscchheedd--iinntteerrbblloocckk
	   --ffaalliiggnn--llooooppss==1166 --ffaalliiggnn--jjuummppss==1166 --ffaalliiggnn--ffuunnccttiioonnss==1166
	   --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==1155 --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==1155 --mmaalliiggnn--nnaattuurraall
	   --ffffaasstt--mmaatthh --mmddyynnaammiicc--nnoo--ppiicc --mmppoowweerrppcc--ggppoopptt --ffoorrccee__ccppuussuubbttyyppee__AALLLL
	   --ffssttrriicctt--aalliiaassiinngg --mmttuunnee==GG55 --mmccppuu==GG55 --mmppoowweerrppcc6644

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations that do not
	   typically increase code size.  It also performs further optimiza-
	   tions designed to reduce code size.

	   --OOss disables the following optimization flags: --ffaalliiggnn--ffuunnccttiioonnss
	   --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss	--ffrreeoorrddeerr--bblloocckkss
	   --ffpprreeffeettcchh--lloooopp--aarrrraayyss

	   If you use multiple --OO options, with or without level numbers, the
	   last such option is the one that is effective.

       Options of the form --ff_f_l_a_g specify machine-independent flags.  Most
       flags have both positive and negative forms; the negative form of --ffffoooo
       would be --ffnnoo--ffoooo.  In the table below, only one of the forms is
       listed---the one you typically will use.	 You can figure out the other
       form by either removing nnoo-- or adding it.

       The following options control specific optimizations.  They are either
       activated by --OO options or are related to ones that are.	 You can use
       the following flags in the rare cases when ``fine-tuning'' of optimiza-
       tions to be performed is desired.

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
	   Do not make member functions inline by default merely because they
	   are defined inside the class scope (C++ only).  Otherwise, when you
	   specify --OO, member functions defined inside class scope are com-
	   piled inline by default; i.e., you don't need to add iinnlliinnee in
	   front of the member function name.

       --ffnnoo--ddeeffeerr--ppoopp
	   Always pop the arguments to each function call as soon as that
	   function returns.  For machines which must pop arguments after a
	   function call, the compiler normally lets arguments accumulate on
	   the stack for several function calls and pops them all at once.

	   Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrccee--mmeemm
	   Force memory operands to be copied into registers before doing
	   arithmetic on them.	This produces better code by making all memory
	   references potential common subexpressions.	When they are not com-
	   mon subexpressions, instruction combination should eliminate the
	   separate register-load.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffffoorrccee--aaddddrr
	   Force memory address constants to be copied into registers before
	   doing arithmetic on them.  This may produce better code just as
	   --ffffoorrccee--mmeemm may.

       --ffoommiitt--ffrraammee--ppooiinntteerr
	   Don't keep the frame pointer in a register for functions that don't
	   need one.  This avoids the instructions to save, set up and restore
	   frame pointers; it also makes an extra register available in many
	   functions.  IItt aallssoo mmaakkeess ddeebbuuggggiinngg iimmppoossssiibbllee oonn ssoommee mmaacchhiinneess..

	   On some machines, such as the VAX, this flag has no effect, because
	   the standard calling sequence automatically handles the frame
	   pointer and nothing is saved by pretending it doesn't exist.	 The
	   machine-description macro "FRAME_POINTER_REQUIRED" controls whether
	   a target machine supports this flag.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
	   Optimize sibling and tail recursive calls.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--iinnlliinnee
	   Don't pay attention to the "inline" keyword.	 Normally this option
	   is used to keep the compiler from expanding any functions inline.
	   Note that if you are not optimizing, no functions can be expanded
	   inline.

       --ffiinnlliinnee--ffuunnccttiioonnss
	   Integrate all simple functions into their callers.  The compiler
	   heuristically decides which functions are simple enough to be worth
	   integrating in this way.

	   If all calls to a given function are integrated, and the function
	   is declared "static", then the function is normally not output as
	   assembler code in its own right.

	   Enabled at level --OO33.

       --ffiinnlliinnee--lliimmiitt==_n
	   By default, gcc limits the size of functions that can be inlined.
	   This flag allows the control of this limit for functions that are
	   explicitly marked as inline (i.e., marked with the inline keyword
	   or defined within the class definition in c++).  _n is the size of
	   functions that can be inlined in number of pseudo instructions (not
	   counting parameter handling).  The default value of _n is 600.
	   Increasing this value can result in more inlined code at the cost
	   of compilation time and memory consumption.	Decreasing usually
	   makes the compilation faster and less code will be inlined (which
	   presumably means slower programs).  This option is particularly
	   useful for programs that use inlining heavily such as those based
	   on recursive templates with C++.

	   Inlining is actually controlled by a number of parameters, which
	   may be specified individually by using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The
	   --ffiinnlliinnee--lliimmiitt==_n option sets some of these parameters as follows:

	    @item max-inline-insns
	     is set to I<n>.
	    @item max-inline-insns-single
	     is set to I<n>/2.
	    @item max-inline-insns-single-auto
	     is set to I<n>/2.
	    @item min-inline-insns
	     is set to 130 or I<n>/4, whichever is smaller.
	    @item max-inline-insns-rtl
	     is set to I<n>.

	   Using --ffiinnlliinnee--lliimmiitt==660000 thus results in the default settings for
	   these parameters.  See below for a documentation of the individual
	   parameters controlling inlining.

	   _N_o_t_e_: pseudo instruction represents, in this particular context, an
	   abstract measurement of function's size.  In no way, it represents
	   a count of assembly instructions and as such its exact meaning
	   might change from one release to an another.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
	   Even if all calls to a given function are integrated, and the func-
	   tion is declared "static", nevertheless output a separate run-time
	   callable version of the function.  This switch does not affect
	   "extern inline" functions.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
	   Emit variables declared "static const" when optimization isn't
	   turned on, even if the variables aren't referenced.

	   GCC enables this option by default.	If you want to force the com-
	   piler to check if the variable was referenced, regardless of
	   whether or not optimization is turned on, use the
	   --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
	   Attempt to merge identical constants (string constants and floating
	   point constants) across compilation units.

	   This option is the default for optimized compilation if the assem-
	   bler and linker support it.	Use --ffnnoo--mmeerrggee--ccoonnssttaannttss to inhibit
	   this behavior.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
	   Attempt to merge identical constants and identical variables.

	   This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to --ffmmeerrggee--ccoonn--
	   ssttaannttss this considers e.g. even constant initialized arrays or ini-
	   tialized constant variables with integral or floating point types.
	   Languages like C or C++ require each non-automatic variable to have
	   distinct location, so using this option will result in non-conform-
	   ing behavior.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
	   Do not use ``decrement and branch'' instructions on a count regis-
	   ter, but instead generate a sequence of instructions that decrement
	   a register, compare it against zero, then branch based upon the
	   result.  This option is only meaningful on architectures that sup-
	   port such instructions, which include x86, PowerPC, IA-64 and
	   S/390.

	   The default is --ffbbrraanncchh--ccoouunntt--rreegg, enabled when --ffssttrreennggtthh--rreedduuccee
	   is enabled.

       --ffnnoo--ffuunnccttiioonn--ccssee
	   Do not put function addresses in registers; make each instruction
	   that calls a constant function contain the function's address
	   explicitly.

	   This option results in less efficient code, but some strange hacks
	   that alter the assembler output may be confused by the optimiza-
	   tions performed when this option is not used.

	   The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
	   If the target supports a BSS section, GCC by default puts variables
	   that are initialized to zero into BSS.  This can save space in the
	   resulting code.

	   This option turns off this behavior because some programs explic-
	   itly rely on variables going to the data section.  E.g., so that
	   the resulting executable can find the beginning of that section
	   and/or make assumptions based on that.

	   The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --ffssttrreennggtthh--rreedduuccee
	   Perform the optimizations of loop strength reduction and elimina-
	   tion of iteration variables.

	   Enabled at levels --OO22, --OO33, --OOss.

       --fftthhrreeaadd--jjuummppss
	   Perform optimizations where we check to see if a jump branches to a
	   location where another comparison subsumed by the first is found.
	   If so, the first branch is redirected to either the destination of
	   the second branch or a point immediately following it, depending on
	   whether the condition is known to be true or false.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
	   In common subexpression elimination, scan through jump instructions
	   when the target of the jump is not reached by any other path.  For
	   example, when CSE encounters an "if" statement with an "else"
	   clause, CSE will follow the jump when the condition tested is
	   false.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
	   This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE to follow
	   jumps which conditionally skip over blocks.	When CSE encounters a
	   simple "if" statement with no else clause, --ffccssee--sskkiipp--bblloocckkss causes
	   CSE to follow the jump around the body of the "if".

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
	   Re-run common subexpression elimination after loop optimizations
	   has been performed.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--lloooopp--oopptt
	   Run the loop optimizer twice.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
	   Perform a global common subexpression elimination pass.  This pass
	   also performs global constant and copy propagation.

	   _N_o_t_e_: When compiling a program using computed gotos, a GCC exten-
	   sion, you may get better runtime performance if you disable the
	   global common subexpression elimination pass by adding --ffnnoo--ggccssee to
	   the command line.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
	   When --ffggccssee--llmm is enabled, global common subexpression elimination
	   will attempt to move loads which are only killed by stores into
	   themselves.	This allows a loop containing a load/store sequence to
	   be changed to a load outside the loop, and a copy/store within the
	   loop.

	   Enabled by default when gcse is enabled.

       --ffggccssee--ssmm
	   When --ffggccssee--ssmm is enabled, A store motion pass is run after global
	   common subexpression elimination.  This pass will attempt to move
	   stores out of loops.	 When used in conjunction with --ffggccssee--llmm,
	   loops containing a load/store sequence can be changed to a load
	   before the loop and a store after the loop.

	   Enabled by default when gcse is enabled.

       --fflloooopp--ooppttiimmiizzee
	   Perform loop optimizations: move constant expressions out of loops,
	   simplify exit test conditions and optionally do strength-reduction
	   and loop unrolling as well.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccrroossssjjuummppiinngg
	   Perform cross-jumping transformation. This transformation unifies
	   equivalent code and save code size. The resulting code may or may
	   not perform better than without cross-jumping.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn
	   Attempt to transform conditional jumps into branch-less equiva-
	   lents.  This include use of conditional moves, min, max, set flags
	   and abs instructions, and some tricks doable by standard arith-
	   metics.  The use of conditional execution on chips where it is
	   available is controlled by "if-conversion2".

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
	   Use conditional execution (where available) to transform condi-
	   tional jumps into branch-less equivalents.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
	   Use global dataflow analysis to identify and eliminate useless
	   checks for null pointers.  The compiler assumes that dereferencing
	   a null pointer would have halted the program.  If a pointer is
	   checked after it has already been dereferenced, it cannot be null.

	   In some environments, this assumption is not true, and programs can
	   safely dereference null pointers.  Use
	   --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this optimization for
	   programs which depend on that behavior.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
	   Perform a number of minor optimizations that are relatively expen-
	   sive.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
       --ffrreeggmmoovvee
	   Attempt to reassign register numbers in move instructions and as
	   operands of other simple instructions in order to maximize the
	   amount of register tying.  This is especially helpful on machines
	   with two-operand instructions.

	   Note --ffrreeggmmoovvee and --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee are the same optimiza-
	   tion.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffddeellaayyeedd--bbrraanncchh
	   If supported for the target machine, attempt to reorder instruc-
	   tions to exploit instruction slots available after delayed branch
	   instructions.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
	   If supported for the target machine, attempt to reorder instruc-
	   tions to eliminate execution stalls due to required data being
	   unavailable.	 This helps machines that have slow floating point or
	   memory load instructions by allowing other instructions to be
	   issued until the result of the load or floating point instruction
	   is required.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss22
	   Similar to --ffsscchheedduullee--iinnssnnss, but requests an additional pass of
	   instruction scheduling after register allocation has been done.
	   This is especially useful on machines with a relatively small num-
	   ber of registers and where memory load instructions take more than
	   one cycle.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
	   Don't schedule instructions across basic blocks.  This is normally
	   enabled by default when scheduling before register allocation, i.e.
	   with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
	   Don't allow speculative motion of non-load instructions.  This is
	   normally enabled by default when scheduling before register alloca-
	   tion, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd
	   Allow speculative motion of some load instructions.	This only
	   makes sense when scheduling before register allocation, i.e. with
	   --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
	   Allow speculative motion of more load instructions.	This only
	   makes sense when scheduling before register allocation, i.e. with
	   --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffccaalllleerr--ssaavveess
	   Enable values to be allocated in registers that will be clobbered
	   by function calls, by emitting extra instructions to save and
	   restore the registers around such calls.  Such allocation is done
	   only when it seems to result in better code than would otherwise be
	   produced.

	   This option is always enabled by default on certain machines, usu-
	   ally those which have no call-preserved registers to use instead.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffmmoovvee--aallll--mmoovvaabblleess
	   Forces all invariant computations in loops to be moved outside the
	   loop.

       --ffrreedduuccee--aallll--ggiivvss
	   Forces all general-induction variables in loops to be
	   strength-reduced.

	   _N_o_t_e_: When compiling programs written in Fortran, --ffmmoovvee--aallll--mmoovv--
	   aabblleess and --ffrreedduuccee--aallll--ggiivvss are enabled by default when you use the
	   optimizer.

	   These options may generate better or worse code; results are highly
	   dependent on the structure of loops within the source code.

	   These two options are intended to be removed someday, once they
	   have helped determine the efficacy of various approaches to improv-
	   ing loop optimizations.

	   Please let us (<ggcccc@@ggcccc..ggnnuu..oorrgg> and <ffoorrttrraann@@ggnnuu..oorrgg>) know how
	   use of these options affects the performance of your production
	   code.  We're very interested in code that runs _s_l_o_w_e_r when these
	   options are _e_n_a_b_l_e_d.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
	   Disable any machine-specific peephole optimizations.	 The differ-
	   ence between --ffnnoo--ppeeeepphhoollee and --ffnnoo--ppeeeepphhoollee22 is in how they are
	   implemented in the compiler; some targets use one, some use the
	   other, a few use both.

	   --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled at levels
	   --OO22, --OO33, --OOss.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
	   Do not guess branch probabilities using a randomized model.

	   Sometimes gcc will opt to use a randomized model to guess branch
	   probabilities, when none are available from either profiling feed-
	   back (--ffpprrooffiillee--aarrccss) or ____bbuuiillttiinn__eexxppeecctt.  This means that differ-
	   ent runs of the compiler on the same program may produce different
	   object code.

	   In a hard real-time system, people don't want different runs of the
	   compiler to produce code that has different behavior; minimizing
	   non-determinism is of paramount import.  This switch allows users
	   to reduce non-determinism, possibly at the expense of inferior
	   optimization.

	   The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels --OO, --OO22, --OO33,
	   --OOss.

       --ffrreeoorrddeerr--bblloocckkss
	   Reorder basic blocks in the compiled function in order to reduce
	   number of taken branches and improve code locality.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
	   Reorder basic blocks in the compiled function in order to reduce
	   number of taken branches and improve code locality. This is imple-
	   mented by using special subsections "text.hot" for most frequently
	   executed functions and "text.unlikely" for unlikely executed func-
	   tions.  Reordering is done by the linker so object file format must
	   support named sections and linker must place them in a reasonable
	   way.

	   Also profile feedback must be available in to make this option
	   effective.  See --ffpprrooffiillee--aarrccss for details.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
	   Allows the compiler to assume the strictest aliasing rules applica-
	   ble to the language being compiled.	For C (and C++), this acti-
	   vates optimizations based on the type of expressions.  In particu-
	   lar, an object of one type is assumed never to reside at the same
	   address as an object of a different type, unless the types are
	   almost the same.  For example, an "unsigned int" can alias an
	   "int", but not a "void*" or a "double".  A character type may alias
	   any other type.

	   Pay special attention to code like this:

		   union a_union {
		     int i;
		     double d;
		   };

		   int f() {
		     a_union t;
		     t.d = 3.0;
		     return t.i;
		   }

	   The practice of reading from a different union member than the one
	   most recently written to (called ``type-punning'') is common.  Even
	   with --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided the mem-
	   ory is accessed through the union type.  So, the code above will
	   work as expected.  However, this code might not:

		   int f() {
		     a_union t;
		     int* ip;
		     t.d = 3.0;
		     ip = &t.i;
		     return *ip;
		   }

	   Every language that wishes to perform language-specific alias anal-
	   ysis should define a function that computes, given an "tree" node,
	   an alias set for the node.  Nodes in different alias sets are not
	   allowed to alias.  For an example, see the C front-end function
	   "c_get_alias_set".

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
	   Align the start of functions to the next power-of-two greater than
	   _n, skipping up to _n bytes.  For instance, --ffaalliiggnn--ffuunnccttiioonnss==3322
	   aligns functions to the next 32-byte boundary, but --ffaalliiggnn--ffuunncc--
	   ttiioonnss==2244 would align to the next 32-byte boundary only if this can
	   be done by skipping 23 bytes or less.

	   --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are equivalent and
	   mean that functions will not be aligned.

	   Some assemblers only support this flag when _n is a power of two; in
	   that case, it is rounded up.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
	   Align all branch targets to a power-of-two boundary, skipping up to
	   _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This option can easily make code
	   slower, because it must insert dummy operations for when the branch
	   target is reached in the usual flow of the code.

	   If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and are greater
	   than this value, then their values are used instead.

	   If _n is not specified, use a machine-dependent default which is
	   very likely to be 11, meaning no alignment.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
	   Align loops to a power-of-two boundary, skipping up to _n bytes like
	   --ffaalliiggnn--ffuunnccttiioonnss.  The hope is that the loop will be executed many
	   times, which will make up for any execution of the dummy opera-
	   tions.

       --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp
       --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==_n
	   When aligning loops to a power-of-two boundary, only do so if can
	   skip by up to _n bytes.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
	   Align branch targets to a power-of-two boundary, for branch targets
	   where the targets can only be reached by jumping, skipping up to _n
	   bytes like --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
	   need be executed.

       --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp
       --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==_n
	   When aligning branch targets to a power-of-two boundary, only do so
	   if can skip by up to _n bytes.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffrreennaammee--rreeggiisstteerrss
	   Attempt to avoid false dependencies in scheduled code by making use
	   of registers left over after register allocation.  This optimiza-
	   tion will most benefit processors with lots of registers.  It can,
	   however, make debugging impossible, since variables will no longer
	   stay in a ``home register''.

	   Enabled at levels --OO33.

       --ffnnoo--ccpprroopp--rreeggiisstteerrss
	   After register allocation and post-register allocation instruction
	   splitting, we perform a copy-propagation pass to try to reduce
	   scheduling dependencies and occasionally eliminate the copy.

	   Disabled at levels --OO, --OO22, --OO33, --OOss.

       The following options control compiler behavior regarding floating
       point arithmetic.  These options trade off between speed and correct-
       ness.  All must be specifically enabled.

       --ffffllooaatt--ssttoorree
	   Do not store floating point variables in registers, and inhibit
	   other options that might change whether a floating point value is
	   taken from a register or memory.

	   This option prevents undesirable excess precision on machines such
	   as the 68000 where the floating registers (of the 68881) keep more
	   precision than a "double" is supposed to have.  Similarly for the
	   x86 architecture.  For most programs, the excess precision does
	   only good, but a few programs rely on the precise definition of
	   IEEE floating point.	 Use --ffffllooaatt--ssttoorree for such programs, after
	   modifying them to store all pertinent intermediate computations
	   into variables.

       --ffffaasstt--mmaatthh
	   Sets --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss, --ffnnoo--ttrraapp--
	   ppiinngg--mmaatthh, --ffffiinniittee--mmaatthh--oonnllyy and --ffnnoo--ssiiggnnaalliinngg--nnaannss.

	   This option causes the preprocessor macro "__FAST_MATH__" to be
	   defined.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

       --ffnnoo--mmaatthh--eerrrrnnoo
	   Do not set ERRNO after calling math functions that are executed
	   with a single instruction, e.g., sqrt.  A program that relies on
	   IEEE exceptions for math error handling may want to use this flag
	   for speed while maintaining IEEE arithmetic compatibility.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffmmaatthh--eerrrrnnoo.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
	   Allow optimizations for floating-point arithmetic that (a) assume
	   that arguments and results are valid and (b) may violate IEEE or
	   ANSI standards.  When used at link-time, it may include libraries
	   or startup files that change the default FPU control word or other
	   similar optimizations.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffffiinniittee--mmaatthh--oonnllyy
	   Allow optimizations for floating-point arithmetic that assume that
	   arguments and results are not NaNs or +-Infs.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications.

	   The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ttrraappppiinngg--mmaatthh
	   Compile code assuming that floating-point operations cannot gener-
	   ate user-visible traps.  These traps include division by zero,
	   overflow, underflow, inexact result and invalid operation.  This
	   option implies --ffnnoo--ssiiggnnaalliinngg--nnaannss.	Setting this option may allow
	   faster code if one relies on ``non-stop'' IEEE arithmetic, for
	   example.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffttrraappppiinngg--mmaatthh.

       --ffssiiggnnaalliinngg--nnaannss
	   Compile code assuming that IEEE signaling NaNs may generate user-
	   visible traps during floating-point operations.  Setting this
	   option disables optimizations that may change the number of excep-
	   tions visible with signaling NaNs.  This option implies --ffttrraapp--
	   ppiinngg--mmaatthh.

	   This option causes the preprocessor macro "__SUPPORT_SNAN__" to be
	   defined.

	   The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

	   This option is experimental and does not currently guarantee to
	   disable all GCC optimizations that affect signaling NaN behavior.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
	   Treat floating point constant as single precision constant instead
	   of implicitly converting it to double precision constant.

       The following options control optimizations that may improve perfor-
       mance, but are not enabled by any --OO options.  This section includes
       experimental options that may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
	   After running a program compiled with --ffpprrooffiillee--aarrccss, you can com-
	   pile it a second time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve
	   optimizations based on the number of times each branch was taken.
	   When the program compiled with --ffpprrooffiillee--aarrccss exits it saves arc
	   execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._d_a for each source
	   file	 The information in this data file is very dependent on the
	   structure of the generated code, so you must use the same source
	   code and the same optimization options for both compilations.

	   With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each
	   JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be used to improve optimiza-
	   tion.  Currently, they are only used in one place: in _r_e_o_r_g_._c,
	   instead of guessing which path a branch is mostly to take, the
	   RREEGG__BBRR__PPRROOBB values are used to exactly determine which path is
	   taken more often.

       --ffnneeww--rraa
	   Use a graph coloring register allocator.  Currently this option is
	   meant for testing, so we are interested to hear about miscompila-
	   tions with --ffnneeww--rraa.

       --ffttrraacceerr
	   Perform tail duplication to enlarge superblock size. This transfor-
	   mation simplifies the control flow of the function allowing other
	   optimizations to do better job.

       --ffuunnrroollll--llooooppss
	   Unroll loops whose number of iterations can be determined at com-
	   pile time or upon entry to the loop.	 --ffuunnrroollll--llooooppss implies both
	   --ffssttrreennggtthh--rreedduuccee and --ffrreerruunn--ccssee--aafftteerr--lloooopp.  This option makes
	   code larger, and may or may not make it run faster.

       --ffuunnrroollll--aallll--llooooppss
	   Unroll all loops, even if their number of iterations is uncertain
	   when the loop is entered.  This usually makes programs run more
	   slowly.  --ffuunnrroollll--aallll--llooooppss implies the same options as --ffuunn--
	   rroollll--llooooppss,

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
	   If supported by the target machine, generate instructions to
	   prefetch memory to improve the performance of loops that access
	   large arrays.

	   Disabled at level --OOss.

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
	   Place each function or data item into its own section in the output
	   file if the target supports arbitrary sections.  The name of the
	   function or the name of the data item determines the section's name
	   in the output file.

	   Use these options on systems where the linker can perform optimiza-
	   tions to improve locality of reference in the instruction space.
	   HPPA processors running HP-UX and SPARC processors running Solaris
	   2 have linkers with such optimizations.  Other systems using the
	   ELF object format as well as AIX may have these optimizations in
	   the future.

	   Only use these options when there are significant benefits from
	   doing so.  When you specify these options, the assembler and linker
	   will create larger object and executable files and will also be
	   slower.  You will not be able to use "gprof" on all systems if you
	   specify this option and you may have problems with debugging if you
	   specify both this option and --gg.

       --ffssssaa
	   Perform optimizations in static single assignment form.  Each func-
	   tion's flow graph is translated into SSA form, optimizations are
	   performed, and the flow graph is translated back from SSA form.
	   Users should not specify this option, since it is not yet ready for
	   production use.

       --ffssssaa--ccccpp
	   Perform Sparse Conditional Constant Propagation in SSA form.
	   Requires --ffssssaa.  Like --ffssssaa, this is an experimental feature.

       --ffssssaa--ddccee
	   Perform aggressive dead-code elimination in SSA form.  Requires
	   --ffssssaa.  Like --ffssssaa, this is an experimental feature.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
	   In some places, GCC uses various constants to control the amount of
	   optimization that is done.  For example, GCC will not inline func-
	   tions that contain more that a certain number of instructions.  You
	   can control some of these constants on the command-line using the
	   ----ppaarraamm option.

	   In each case, the _v_a_l_u_e is an integer.  The allowable choices for
	   _n_a_m_e are given in the following table:

	   mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
	       The maximum number of instructions to consider when looking for
	       an instruction to fill a delay slot.  If more than this arbi-
	       trary number of instructions is searched, the time savings from
	       filling the delay slot will be minimal so stop searching.
	       Increasing values mean more aggressive optimization, making the
	       compile time increase with probably small improvement in exe-
	       cutable run time.

	   mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
	       When trying to fill delay slots, the maximum number of instruc-
	       tions to consider when searching for a block with valid live
	       register information.  Increasing this arbitrarily chosen value
	       means more aggressive optimization, increasing the compile
	       time.  This parameter should be removed when the delay slot
	       code is rewritten to maintain the control-flow graph.

	   mmaaxx--ggccssee--mmeemmoorryy
	       The approximate maximum amount of memory that will be allocated
	       in order to perform the global common subexpression elimination
	       optimization.  If more memory than specified is required, the
	       optimization will not be done.

	   mmaaxx--ggccssee--ppaasssseess
	       The maximum number of passes of GCSE to run.

	   mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
	       The maximum number of pending dependencies scheduling will
	       allow before flushing the current state and starting over.
	       Large functions with few branches or calls can create exces-
	       sively large lists which needlessly consume memory and
	       resources.

	   mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
	       Several parameters control the tree inliner used in gcc.	 This
	       number sets the maximum number of instructions (counted in
	       gcc's internal representation) in a single function that the
	       tree inliner will consider for inlining.	 This only affects
	       functions declared inline and methods implemented in a class
	       declaration (C++).  The default value is 300.

	   mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
	       When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of
	       functions that would otherwise not be considered for inlining
	       by the compiler will be investigated.  To those functions, a
	       different (more restrictive) limit compared to functions
	       declared inline can be applied.	The default value is 300.

	   mmaaxx--iinnlliinnee--iinnssnnss
	       The tree inliner does decrease the allowable size for single
	       functions to be inlined after we already inlined the number of
	       instructions given here by repeated inlining.  This number
	       should be a factor of two or more larger than the single func-
	       tion limit.  Higher numbers result in better runtime perfor-
	       mance, but incur higher compile-time resource (CPU time, mem-
	       ory) requirements and result in larger binaries.	 Very high
	       values are not advisable, as too large binaries may adversely
	       affect runtime performance.  The default value is 600.

	   mmaaxx--iinnlliinnee--ssllooppee
	       After exceeding the maximum number of inlined instructions by
	       repeated inlining, a linear function is used to decrease the
	       allowable size for single functions.  The slope of that func-
	       tion is the negative reciprocal of the number specified here.
	       The default value is 32.

	   mmiinn--iinnlliinnee--iinnssnnss
	       The repeated inlining is throttled more and more by the linear
	       function after exceeding the limit.  To avoid too much throt-
	       tling, a minimum for this function is specified here to allow
	       repeated inlining for very small functions even when a lot of
	       repeated inlining already has been done.	 The default value is
	       130.

	   mmaaxx--iinnlliinnee--iinnssnnss--rrttll
	       For languages that use the RTL inliner (this happens at a later
	       stage than tree inlining), you can set the maximum allowable
	       size (counted in RTL instructions) for the RTL inliner with
	       this parameter.	The default value is 600.

	   mmaaxx--uunnrroolllleedd--iinnssnnss
	       The maximum number of instructions that a loop should have if
	       that loop is unrolled, and if the loop is unrolled, it deter-
	       mines how many times the loop code is unrolled.

	   hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
	       Select fraction of the maximal count of repetitions of basic
	       block in program given basic block needs to have to be consid-
	       ered hot.

	   hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
	       Select fraction of the maximal frequency of executions of basic
	       block in function given basic block needs to have to be consid-
	       ered hot

	   ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
	   ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
	       This value is used to limit superblock formation once the given
	       percentage of executed instructions is covered.	This limits
	       unnecessary code size expansion.

	       The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only when profile
	       feedback is available.  The real profiles (as opposed to stati-
	       cally estimated ones) are much less balanced allowing the
	       threshold to be larger value.

	   ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
	       Stop tail duplication once code growth has reached given per-
	       centage.	 This is rather hokey argument, as most of the dupli-
	       cates will be eliminated later in cross jumping, so it may be
	       set to much higher values than is the desired code growth.

	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
	       Stop reverse growth when the reverse probability of best edge
	       is less than this threshold (in percent).

	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
	       Stop forward growth if the best edge do have probability lower
	       than this threshold.

	       Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values are present,
	       one for compilation for profile feedback and one for compila-
	       tion without.  The value for compilation with profile feedback
	       needs to be more conservative (higher) in order to make tracer
	       effective.

	   ggggcc--mmiinn--eexxppaanndd
	       GCC uses a garbage collector to manage its own memory alloca-
	       tion.  This parameter specifies the minimum percentage by which
	       the garbage collector's heap should be allowed to expand
	       between collections.  Tuning this may improve compilation
	       speed; it has no effect on code generation.

	       The default is 30% + 70% * (RAM/1GB) with an upper bound of
	       100% when RAM >= 1GB.  If "getrlimit" is available, the notion
	       of "RAM" is the smallest of actual RAM, RLIMIT_RSS, RLIMIT_DATA
	       and RLIMIT_AS.  If GCC is not able to calculate RAM on a par-
	       ticular platform, the lower bound of 30% is used.  Setting this
	       parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full collection
	       to occur at every opportunity.  This is extremely slow, but can
	       be useful for debugging.

	   ggggcc--mmiinn--hheeaappssiizzee
	       Minimum size of the garbage collector's heap before it begins
	       bothering to collect garbage.  The first collection occurs
	       after the heap expands by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaapp--
	       ssiizzee.  Again, tuning this may improve compilation speed, and
	       has no effect on code generation.

	       The default is RAM/8, with a lower bound of 4096 (four
	       megabytes) and an upper bound of 131072 (128 megabytes).	 If
	       "getrlimit" is available, the notion of "RAM" is the smallest
	       of actual RAM, RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If GCC
	       is not able to calculate RAM on a particular platform, the
	       lower bound is used.  Setting this parameter very large effec-
	       tively disables garbage collection.  Setting this parameter and
	       ggggcc--mmiinn--eexxppaanndd to zero causes a full collection to occur at
	       every opportunity.

       OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr

       These options control the C preprocessor, which is run on each C source
       file before actual compilation.

       If you use the --EE option, nothing is done except preprocessing.	Some
       of these options make sense only together with --EE because they cause
       the preprocessor output to be unsuitable for actual compilation.

       You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver and pass _o_p_t_i_o_n
       directly through to the preprocessor.  If _o_p_t_i_o_n contains commas, it is
       split into multiple options at the commas.  However, many options are
       modified, translated or interpreted by the compiler driver before being
       passed to the preprocessor, and --WWpp forcibly bypasses this phase.  The
       preprocessor's direct interface is undocumented and subject to change,
       so whenever possible you should avoid using --WWpp and let the driver han-
       dle the options instead.

       --DD _n_a_m_e
	   Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
	   Predefine _n_a_m_e as a macro, with definition _d_e_f_i_n_i_t_i_o_n.  There are
	   no restrictions on the contents of _d_e_f_i_n_i_t_i_o_n, but if you are
	   invoking the preprocessor from a shell or shell-like program you
	   may need to use the shell's quoting syntax to protect characters
	   such as spaces that have a meaning in the shell syntax.

	   If you wish to define a function-like macro on the command line,
	   write its argument list with surrounding parentheses before the
	   equals sign (if any).  Parentheses are meaningful to most shells,
	   so you will need to quote the option.  With sshh and ccsshh,
	   --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

	   --DD and --UU options are processed in the order they are given on the
	   command line.  All --iimmaaccrrooss _f_i_l_e and --iinncclluuddee _f_i_l_e options are pro-
	   cessed after all --DD and --UU options.

       --UU _n_a_m_e
	   Cancel any previous definition of _n_a_m_e, either built in or provided
	   with a --DD option.

       --uunnddeeff
	   Do not predefine any system-specific macros.	 The common predefined
	   macros remain defined.

       --II _d_i_r
	   Add the directory _d_i_r to the list of directories to be searched for
	   header files.  Directories named by --II are searched before the
	   standard system include directories.	 If the directory _d_i_r is a
	   standard system include directory, the option is ignored to ensure
	   that the default search order for system directories and the spe-
	   cial treatment of system headers are not defeated .

       --oo _f_i_l_e
	   Write output to _f_i_l_e.  This is the same as specifying _f_i_l_e as the
	   second non-option argument to ccpppp.  ggcccc has a different interpreta-
	   tion of a second non-option argument, so you must use --oo to specify
	   the output file.

       --WWaallll
	   Turns on all optional warnings which are desirable for normal code.
	   At present this is --WWccoommmmeenntt and --WWttrriiggrraapphhss.  Note that many of
	   the preprocessor's warnings are on by default and have no options
	   to control them.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
	   Warn whenever a comment-start sequence //** appears in a //** comment,
	   or whenever a backslash-newline appears in a //// comment.  (Both
	   forms have the same effect.)

       --WWttrriiggrraapphhss
	   Warn if any trigraphs are encountered.  This option used to take
	   effect only if --ttrriiggrraapphhss was also specified, but now works inde-
	   pendently.  Warnings are not given for trigraphs within comments,
	   as they do not affect the meaning of the program.

       --WWttrraaddiittiioonnaall
	   Warn about certain constructs that behave differently in tradi-
	   tional and ISO C.  Also warn about ISO C constructs that have no
	   traditional C equivalent, and problematic constructs which should
	   be avoided.

       --WWiimmppoorrtt
	   Warn the first time ##iimmppoorrtt is used.

       --WWuunnddeeff
	   Warn whenever an identifier which is not a macro is encountered in
	   an ##iiff directive, outside of ddeeffiinneedd.  Such identifiers are
	   replaced with zero.

       --WWuunnuusseedd--mmaaccrrooss
	   Warn about macros defined in the main file that are unused.	A
	   macro is _u_s_e_d if it is expanded or tested for existence at least
	   once.  The preprocessor will also warn if the macro has not been
	   used at the time it is redefined or undefined.

	   Built-in macros, macros defined on the command line, and macros
	   defined in include files are not warned about.

	   NNoottee:: If a macro is actually used, but only used in skipped condi-
	   tional blocks, then CPP will report it as unused.  To avoid the
	   warning in such a case, you might improve the scope of the macro's
	   definition by, for example, moving it into the first skipped block.
	   Alternatively, you could provide a dummy use with something like:

		   #if defined the_macro_causing_the_warning
		   #endif

       --WWeennddiiff--llaabbeellss
	   Warn whenever an ##eellssee or an ##eennddiiff are followed by text.  This
	   usually happens in code of the form

		   #if FOO
		   ...
		   #else FOO
		   ...
		   #endif FOO

	   The second and third "FOO" should be in comments, but often are not
	   in older programs.  This warning is on by default.

       --WWeerrrroorr
	   Make all warnings into hard errors.	Source code which triggers
	   warnings will be rejected.

       --WWssyysstteemm--hheeaaddeerrss
	   Issue warnings for code in system headers.  These are normally
	   unhelpful in finding bugs in your own code, therefore suppressed.
	   If you are responsible for the system library, you may want to see
	   them.

       --ww  Suppress all warnings, including those which GNU CPP issues by
	   default.

       --ppeeddaannttiicc
	   Issue all the mandatory diagnostics listed in the C standard.  Some
	   of them are left out by default, since they trigger frequently on
	   harmless code.

       --ppeeddaannttiicc--eerrrroorrss
	   Issue all the mandatory diagnostics, and make all mandatory diag-
	   nostics into errors.	 This includes mandatory diagnostics that GCC
	   issues without --ppeeddaannttiicc but treats as warnings.

       --MM  Instead of outputting the result of preprocessing, output a rule
	   suitable for mmaakkee describing the dependencies of the main source
	   file.  The preprocessor outputs one mmaakkee rule containing the object
	   file name for that source file, a colon, and the names of all the
	   included files, including those coming from --iinncclluuddee or --iimmaaccrrooss
	   command line options.

	   Unless specified explicitly (with --MMTT or --MMQQ), the object file name
	   consists of the basename of the source file with any suffix
	   replaced with object file suffix.  If there are many included files
	   then the rule is split into several lines using \\-newline.  The
	   rule has no commands.

	   This option does not suppress the preprocessor's debug output, such
	   as --ddMM.  To avoid mixing such debug output with the dependency
	   rules you should explicitly specify the dependency output file with
	   --MMFF, or use an environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.
	   Debug output will still be sent to the regular output stream as
	   normal.

	   Passing --MM to the driver implies --EE, and suppresses warnings with
	   an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found in system
	   header directories, nor header files that are included, directly or
	   indirectly, from such a header.

	   This implies that the choice of angle brackets or double quotes in
	   an ##iinncclluuddee directive does not in itself determine whether that
	   header will appear in --MMMM dependency output.	 This is a slight
	   change in semantics from GCC versions 3.0 and earlier.

       --MMFF _f_i_l_e
	   @anchor{-MF} When used with --MM or --MMMM, specifies a file to write
	   the dependencies to.	 If no --MMFF switch is given the preprocessor
	   sends the rules to the same place it would have sent preprocessed
	   output.

	   When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the
	   default dependency output file.

       --ddeeppeennddeennccyy--ffiillee
	   Like --MMFF. (APPLE ONLY)

       --MMGG In conjunction with an option such as --MM requesting dependency gen-
	   eration, --MMGG assumes missing header files are generated files and
	   adds them to the dependency list without raising an error.  The
	   dependency filename is taken directly from the "#include" directive
	   without prepending any path.	 --MMGG also suppresses preprocessed out-
	   put, as a missing header file renders this useless.

	   This feature is used in automatic updating of makefiles.

       --MMPP This option instructs CPP to add a phony target for each dependency
	   other than the main file, causing each to depend on nothing.	 These
	   dummy rules work around errors mmaakkee gives if you remove header
	   files without updating the _M_a_k_e_f_i_l_e to match.

	   This is typical output:

		   test.o: test.c test.h

		   test.h:

       --MMTT _t_a_r_g_e_t
	   Change the target of the rule emitted by dependency generation.  By
	   default CPP takes the name of the main input file, including any
	   path, deletes any file suffix such as ..cc, and appends the plat-
	   form's usual object suffix.	The result is the target.

	   An --MMTT option will set the target to be exactly the string you
	   specify.  If you want multiple targets, you can specify them as a
	   single argument to --MMTT, or use multiple --MMTT options.

	   For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

		   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
	   Same as --MMTT, but it quotes any characters which are special to
	   Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

		   $$(objpfx)foo.o: foo.c

	   The default target is automatically quoted, as if it were given
	   with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is not implied.
	   The driver determines _f_i_l_e based on whether an --oo option is given.
	   If it is, the driver uses its argument but with a suffix of _._d,
	   otherwise it take the basename of the input file and applies a _._d
	   suffix.

	   If --MMDD is used in conjunction with --EE, any --oo switch is understood
	   to specify the dependency output file (but @pxref{-MF}), but if
	   used without --EE, each --oo is understood to specify a target object
	   file.

	   Since --EE is not implied, --MMDD can be used to generate a dependency
	   output file as a side-effect of the compilation process.

       --MMMMDD
	   Like --MMDD except mention only user header files, not system -header
	   files.

       --ffppcchh--ddeeppss
	   When using precompiled headers, this flag will cause the depen-
	   dency-output flags to also list the files from the precompiled
	   header's dependencies.  If not specified only the precompiled
	   header would be listed and not the files that were used to create
	   it because those files are not consulted when a precompiled header
	   is used.

       --xx cc
       --xx cc++++
       --xx oobbjjeeccttiivvee--cc
       --xx oobbjjeeccttiivvee--cc++++
       --xx aasssseemmbblleerr--wwiitthh--ccpppp
	   Specify the source language: C, C++, Objective-C, Objective-C++, or
	   assembly.  This has nothing to do with standards conformance or
	   extensions; it merely selects which base syntax to expect.  If you
	   give none of these options, cpp will deduce the language from the
	   extension of the source file: ..cc, ..cccc, ..mm, ..mmmm, or ..SS.  Some other
	   common extensions for C++ and assembly are also recognized.	If cpp
	   does not recognize the extension, it will treat the file as C; this
	   is the most generic mode.

	   NNoottee:: Previous versions of cpp accepted a --llaanngg option which
	   selected both the language and the standards conformance level.
	   This option has been removed, because it conflicts with the --ll
	   option.

       --ssttdd==_s_t_a_n_d_a_r_d
       --aannssii
	   Specify the standard to which the code should conform.  Currently
	   CPP knows about C and C++ standards; others may be added in the
	   future.

	   _s_t_a_n_d_a_r_d may be one of:

	   "iso9899:1990"
	   "c89"
	       The ISO C standard from 1990.  cc8899 is the customary shorthand
	       for this version of the standard.

	       The --aannssii option is equivalent to --ssttdd==cc8899.

	   "iso9899:199409"
	       The 1990 C standard, as amended in 1994.

	   "iso9899:1999"
	   "c99"
	   "iso9899:199x"
	   "c9x"
	       The revised ISO C standard, published in December 1999.	Before
	       publication, this was known as C9X.

	   "gnu89"
	       The 1990 C standard plus GNU extensions.	 This is the default.

	   "gnu99"
	   "gnu9x"
	       The 1999 C standard plus GNU extensions.

	   "c++98"
	       The 1998 ISO C++ standard plus amendments.

	   "gnu++98"
	       The same as --ssttdd==cc++++9988 plus GNU extensions.  This is the
	       default for C++ code.

       --II-- Split the include path.  Any directories specified with --II options
	   before --II-- are searched only for headers requested with
	   "#include "file""; they are not searched for "#include <file>".  If
	   additional directories are specified with --II options after the --II--,
	   those directories are searched for all ##iinncclluuddee directives.

	   In addition, --II-- inhibits the use of the directory of the current
	   file directory as the first search directory for "#include "file"".

       --nnoossttddiinncc
	   Do not search the standard system directories for header files.
	   Only the directories you have specified with --II options (and the
	   directory of the current file, if appropriate) are searched.

       --nnoossttddiinncc++++
	   Do not search for header files in the C++-specific standard direc-
	   tories, but do still search the other standard directories.	(This
	   option is used when building the C++ library.)

       --iinncclluuddee _f_i_l_e
	   Process _f_i_l_e as if "#include "file"" appeared as the first line of
	   the primary source file.  However, the first directory searched for
	   _f_i_l_e is the preprocessor's working directory _i_n_s_t_e_a_d _o_f the direc-
	   tory containing the main source file.  If not found there, it is
	   searched for in the remainder of the "#include "..."" search chain
	   as normal.

	   If multiple --iinncclluuddee options are given, the files are included in
	   the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
	   Exactly like --iinncclluuddee, except that any output produced by scanning
	   _f_i_l_e is thrown away.	 Macros it defines remain defined.  This
	   allows you to acquire all the macros from a header without also
	   processing its declarations.

	   All files specified by --iimmaaccrrooss are processed before all files
	   specified by --iinncclluuddee.

       --iiddiirraafftteerr _d_i_r
	   Search _d_i_r for header files, but do it _a_f_t_e_r all directories speci-
	   fied with --II and the standard system directories have been
	   exhausted.  _d_i_r is treated as a system include directory.

       --iipprreeffiixx _p_r_e_f_i_x
	   Specify _p_r_e_f_i_x as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
	   If the prefix represents a directory, you should include the final
	   //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
	   Append _d_i_r to the prefix specified previously with --iipprreeffiixx, and
	   add the resulting directory to the include search path.  --iiwwiitthhpprree--
	   ffiixxbbeeffoorree puts it in the same place --II would; --iiwwiitthhpprreeffiixx puts it
	   where --iiddiirraafftteerr would.

	   Use of these options is discouraged.

       --iissyysstteemm _d_i_r
	   Search _d_i_r for header files, after all directories specified by --II
	   but before the standard system directories.	Mark it as a system
	   directory, so that it gets the same special treatment as is applied
	   to the standard system directories.

       --ffpprreepprroocceesssseedd
	   Indicate to the preprocessor that the input file has already been
	   preprocessed.  This suppresses things like macro expansion, tri-
	   graph conversion, escaped newline splicing, and processing of most
	   directives.	The preprocessor still recognizes and removes com-
	   ments, so that you can pass a file preprocessed with --CC to the com-
	   piler without problems.  In this mode the integrated preprocessor
	   is little more than a tokenizer for the front ends.

	   --ffpprreepprroocceesssseedd is implicit if the input file has one of the exten-
	   sions ..ii, ..iiii or ..mmii.  These are the extensions that GCC uses for
	   preprocessed files created by --ssaavvee--tteemmppss.

       --ffttaabbssttoopp==_w_i_d_t_h
	   Set the distance between tab stops.	This helps the preprocessor
	   report correct column numbers in warnings or errors, even if tabs
	   appear on the line.	If the value is less than 1 or greater than
	   100, the option is ignored.	The default is 8.

       --ffnnoo--sshhooww--ccoolluummnn
	   Do not print column numbers in diagnostics.	This may be necessary
	   if diagnostics are being scanned by a program that does not under-
	   stand the column numbers, such as ddeejjaaggnnuu.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
	   Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.
	   This form is preferred to the older form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)),
	   which is still supported, because it does not use shell special
	   characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
	   Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.

       --AA-- Cancel all predefined assertions and all assertions preceding it on
	   the command line.  Also, undefine all predefined macros and all
	   macros preceding it on the command line.  (This is a historical
	   wart and may change in the future.)

       --ddCCHHAARRSS
	   _C_H_A_R_S is a sequence of one or more of the following characters, and
	   must not be preceded by a space.  Other characters are interpreted
	   by the compiler proper, or reserved for future versions of GCC, and
	   so are silently ignored.  If you specify characters whose behavior
	   conflicts, the result is undefined.

	   MM   Instead of the normal output, generate a list of ##ddeeffiinnee direc-
	       tives for all the macros defined during the execution of the
	       preprocessor, including predefined macros.  This gives you a
	       way of finding out what is predefined in your version of the
	       preprocessor.  Assuming you have no file _f_o_o_._h, the command

		       touch foo.h; cpp -dM foo.h

	       will show all the predefined macros.

	   DD   Like MM except in two respects: it does _n_o_t include the prede-
	       fined macros, and it outputs _b_o_t_h the ##ddeeffiinnee directives and
	       the result of preprocessing.  Both kinds of output go to the
	       standard output file.

	   NN   Like DD, but emit only the macro names, not their expansions.

	   II   Output ##iinncclluuddee directives in addition to the result of prepro-
	       cessing.

       --PP  Inhibit generation of linemarkers in the output from the preproces-
	   sor.	 This might be useful when running the preprocessor on some-
	   thing that is not C code, and will be sent to a program which might
	   be confused by the linemarkers.

       --CC  Do not discard comments.  All comments are passed through to the
	   output file, except for comments in processed directives, which are
	   deleted along with the directive.

	   You should be prepared for side effects when using --CC; it causes
	   the preprocessor to treat comments as tokens in their own right.
	   For example, comments appearing at the start of what would be a
	   directive line have the effect of turning that line into an ordi-
	   nary source line, since the first token on the line is no longer a
	   ##.

       --CCCC Do not discard comments, including during macro expansion.  This is
	   like --CC, except that comments contained within macros are also
	   passed through to the output file where the macro is expanded.

	   In addition to the side-effects of the --CC option, the --CCCC option
	   causes all C++-style comments inside a macro to be converted to
	   C-style comments.  This is to prevent later use of that macro from
	   inadvertently commenting out the remainder of the source line.

	   The --CCCC option is generally used to support lint comments.

       --ggcccc
	   Define the macros __GNUC__, __GNUC_MINOR__ and __GNUC_PATCHLEVEL__.
	   These are defined automatically when you use ggcccc --EE; you can turn
	   them off in that case with --nnoo--ggcccc.

       --ttrraaddiittiioonnaall--ccpppp
	   Try to imitate the behavior of old-fashioned C preprocessors, as
	   opposed to ISO C preprocessors.

       --ttrriiggrraapphhss
	   Process trigraph sequences.	These are three-character sequences,
	   all starting with ????, that are defined by ISO C to stand for single
	   characters.	For example, ????// stands for \\, so ''????//nn'' is a charac-
	   ter constant for a newline.	By default, GCC ignores trigraphs, but
	   in standard-conforming modes it converts them.  See the --ssttdd and
	   --aannssii options.

	   The nine trigraphs and their replacements are

		   Trigraph:	   ??(	??)  ??<  ??>  ??=  ??/	 ??'  ??!  ??-
		   Replacement:	     [	  ]    {    }	 #    \	   ^	|    ~

       --rreemmaapp
	   Enable special code to work around file systems which only permit
	   very short file names, such as MS-DOS.

       ----hheellpp
       ----ttaarrggeett--hheellpp
	   Print text describing all the command line options instead of pre-
	   processing anything.

       --vv  Verbose mode.  Print out GNU CPP's version number at the beginning
	   of execution, and report the final form of the include path.

       --HH  Print the name of each header file used, in addition to other nor-
	   mal activities.  Each name is indented to show how deep in the
	   ##iinncclluuddee stack it is.  Precompiled header files are also printed,
	   even if they are found to be invalid; an invalid precompiled header
	   file is printed with ......xx and a valid one with ......!! .

       --vveerrssiioonn
       ----vveerrssiioonn
	   Print out GNU CPP's version number.	With one dash, proceed to pre-
	   process as normal.  With two dashes, exit immediately.

       PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr

       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n contains com-
	   mas, it is split into multiple options at the commas.

       OOppttiioonnss ffoorr LLiinnkkiinngg

       These options come into play when the compiler links object files into
       an executable output file.  They are meaningless if the compiler is not
       doing a link step.

       In addition to the options listed below, Apple's GCC also accepts and
       passes nearly all of the options defined by the linker lldd and by the
       library tool lliibbttooooll.  Common options include --ffrraammeewwoorrkk, --ddyynnaammiicc,
       --bbuunnddllee, --ffllaatt__nnaammeessppaaccee, and so forth.	See the ld and libtool man
       pages for further details.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
	   A file name that does not end in a special recognized suffix is
	   considered to name an object file or library.  (Object files are
	   distinguished from libraries by the linker according to the file
	   contents.)  If linking is done, these object files are used as
	   input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is not run, and
	   object file names should not be used as arguments.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
	   Search the library named _l_i_b_r_a_r_y when linking.  (The second alter-
	   native with the library as a separate argument is only for POSIX
	   compliance and is not recommended.)

	   It makes a difference where in the command you write this option;
	   the linker searches and processes libraries and object files in the
	   order they are specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
	   after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to functions in
	   zz, those functions may not be loaded.

	   The linker searches a standard list of directories for the library,
	   which is actually a file named _l_i_b_l_i_b_r_a_r_y_._a.	 The linker then uses
	   this file as if it had been specified precisely by name.

	   The directories searched include several standard system directo-
	   ries plus any that you specify with --LL.

	   Normally the files found this way are library files---archive files
	   whose members are object files.  The linker handles an archive file
	   by scanning through it for members which define symbols that have
	   so far been referenced but not defined.  But if the file that is
	   found is an ordinary object file, it is linked in the usual fash-
	   ion.	 The only difference between using an --ll option and specifying
	   a file name is that --ll surrounds _l_i_b_r_a_r_y with lliibb and ..aa and
	   searches several directories.

       --lloobbjjcc
	   You need this special case of the --ll option in order to link an
	   Objective-C program.

       --nnoossttaarrttffiilleess
	   Do not use the standard system startup files when linking.  The
	   standard system libraries are used normally, unless --nnoossttddlliibb or
	   --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
	   Do not use the standard system libraries when linking.  Only the
	   libraries you specify will be passed to the linker.	The standard
	   startup files are used normally, unless --nnoossttaarrttffiilleess is used.  The
	   compiler may generate calls to memcmp, memset, and memcpy for Sys-
	   tem V (and ISO C) environments or to bcopy and bzero for BSD envi-
	   ronments.  These entries are usually resolved by entries in libc.
	   These entry points should be supplied through some other mechanism
	   when this option is specified.

       --nnoossttddlliibb
	   Do not use the standard system startup files or libraries when
	   linking.  No startup files and only the libraries you specify will
	   be passed to the linker.  The compiler may generate calls to mem-
	   cmp, memset, and memcpy for System V (and ISO C) environments or to
	   bcopy and bzero for BSD environments.  These entries are usually
	   resolved by entries in libc.	 These entry points should be supplied
	   through some other mechanism when this option is specified.

       --nnoo--cc++++ffiilltt
	   By default all linker diagnostic output is piped through c++filt.
	   This option suppresses that behavior. (APPLE ONLY)

	   One of the standard libraries bypassed by --nnoossttddlliibb and --nnooddeeffaauulltt--
	   lliibbss is _l_i_b_g_c_c_._a, a library of internal subroutines that GCC uses
	   to overcome shortcomings of particular machines, or special needs
	   for some languages.

	   In most cases, you need _l_i_b_g_c_c_._a even when you want to avoid other
	   standard libraries.	In other words, when you specify --nnoossttddlliibb or
	   --nnooddeeffaauullttlliibbss you should usually specify --llggcccc as well.  This
	   ensures that you have no unresolved references to internal GCC
	   library subroutines.	 (For example, ____mmaaiinn, used to ensure C++ con-
	   structors will be called.)

       --ss  Remove all symbol table and relocation information from the exe-
	   cutable.

       --ssttaattiicc
	   On systems that support dynamic linking, this prevents linking with
	   the shared libraries.  On other systems, this option has no effect.

	   This option will not work on Mac OS X unless all of your libraries
	   (including _l_i_b_g_c_c_._a) have also been compiled with --ssttaattiicc.

       --sshhaarreedd
	   Produce a shared object which can then be linked with other objects
	   to form an executable.  Not all systems support this option.	 For
	   predictable results, you must also specify the same set of options
	   that were used to generate code (--ffppiicc, --ffPPIICC, or model suboptions)
	   when you specify this option.[1]

	   This option is not supported on Mac OS X.

       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
	   On systems that provide _l_i_b_g_c_c as a shared library, these options
	   force the use of either the shared or static version respectively.
	   If no shared version of _l_i_b_g_c_c was built when the compiler was con-
	   figured, these options have no effect.

	   There are several situations in which an application should use the
	   shared _l_i_b_g_c_c instead of the static version.	 The most common of
	   these is when the application wishes to throw and catch exceptions
	   across different shared libraries.  In that case, each of the
	   libraries as well as the application itself should use the shared
	   _l_i_b_g_c_c.

	   Therefore, the G++ and GCJ drivers automatically add --sshhaarreedd--lliibbggcccc
	   whenever you build a shared library or a main executable, because
	   C++ and Java programs typically use exceptions, so this is the
	   right thing to do.

	   If, instead, you use the GCC driver to create shared libraries, you
	   may find that they will not always be linked with the shared
	   _l_i_b_g_c_c.  If GCC finds, at its configuration time, that you have a
	   GNU linker that does not support option ----eehh--ffrraammee--hhddrr, it will
	   link the shared version of _l_i_b_g_c_c into shared libraries by default.
	   Otherwise, it will take advantage of the linker and optimize away
	   the linking with the shared version of _l_i_b_g_c_c, linking with the
	   static version of libgcc by default.	 This allows exceptions to
	   propagate through such shared libraries, without incurring reloca-
	   tion costs at library load time.

	   However, if a library or main executable is supposed to throw or
	   catch exceptions, you must link it using the G++ or GCJ driver, as
	   appropriate for the languages used in the program, or using the
	   option --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
	   _l_i_b_g_c_c.

       --ssyymmbboolliicc
	   Bind references to global symbols when building a shared object.
	   Warn about any unresolved references (unless overridden by the link
	   editor option --XXlliinnkkeerr --zz --XXlliinnkkeerr ddeeffss).  Only a few systems sup-
	   port this option.

       --XXlliinnkkeerr _o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the linker.  You can use this to supply
	   system-specific linker options which GCC does not know how to rec-
	   ognize.

	   If you want to pass an option that takes an argument, you must use
	   --XXlliinnkkeerr twice, once for the option and once for the argument.  For
	   example, to pass --aasssseerrtt ddeeffiinniittiioonnss, you must write --XXlliinnkkeerr
	   --aasssseerrtt --XXlliinnkkeerr ddeeffiinniittiioonnss.  It does not work to write --XXlliinnkkeerr
	   ""--aasssseerrtt ddeeffiinniittiioonnss"", because this passes the entire string as a
	   single argument, which is not what the linker expects.

       --WWll,,_o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n contains commas,
	   it is split into multiple options at the commas.

       --uu _s_y_m_b_o_l
	   Pretend the symbol _s_y_m_b_o_l is undefined, to force linking of library
	   modules to define it.  You can use --uu multiple times with different
	   symbols to force loading of additional library modules.

       OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh

       These options specify directories to search for header files, for
       libraries and for parts of the compiler:

       --II_d_i_r
	   Add the directory _d_i_r to the head of the list of directories to be
	   searched for header files.  This can be used to override a system
	   header file, substituting your own version, since these directories
	   are searched before the system header file directories.  However,
	   you should not use this option to add directories that contain ven-
	   dor-supplied system header files (use --iissyysstteemm for that).  If you
	   use more than one --II option, the directories are scanned in left-
	   to-right order; the standard system directories come after.

	   If a standard system include directory, or a directory specified
	   with --iissyysstteemm, is also specified with --II, the --II option will be
	   ignored.  The directory will still be searched but as a system
	   directory at its normal position in the system include chain.  This
	   is to ensure that GCC's procedure to fix buggy system headers and
	   the ordering for the include_next directive are not inadvertently
	   changed.  If you really need to change the search order for system
	   directories, use the --nnoossttddiinncc and/or --iissyysstteemm options.

       --II-- Any directories you specify with --II options before the --II-- option
	   are searched only for the case of ##iinncclluuddee ""_f_i_l_e""; they are not
	   searched for ##iinncclluuddee <<_f_i_l_e>>.

	   If additional directories are specified with --II options after the
	   --II--, these directories are searched for all ##iinncclluuddee directives.
	   (Ordinarily _a_l_l --II directories are used this way.)

	   In addition, the --II-- option inhibits the use of the current direc-
	   tory (where the current input file came from) as the first search
	   directory for ##iinncclluuddee ""_f_i_l_e"".  There is no way to override this
	   effect of --II--.  With --II.. you can specify searching the directory
	   which was current when the compiler was invoked.  That is not
	   exactly the same as what the preprocessor does by default, but it
	   is often satisfactory.

	   --II-- does not inhibit the use of the standard system directories for
	   header files.  Thus, --II-- and --nnoossttddiinncc are independent.

       --LL_d_i_r
	   Add directory _d_i_r to the list of directories to be searched for --ll.

       --FF_d_i_r
	   In Apple's version of GCC only, add the directory _d_i_r to the head
	   of the list of directories to be searched for frameworks.

	   The framework search algorithm is, for an inclusion of
	   <<FFmmwwkk//HHeeaaddeerr..hh>>, to look for files named _p_a_t_h_/_F_m_w_k_._f_r_a_m_e_w_o_r_k_/_H_e_a_d_-
	   _e_r_s_/_H_e_a_d_e_r_._h or _p_a_t_h_/_F_m_w_k_._f_r_a_m_e_w_o_r_k_/_P_r_i_v_a_t_e_H_e_a_d_e_r_s_/_H_e_a_d_e_r_._h where
	   _p_a_t_h includes _/_S_y_s_t_e_m_/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/ _/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/, and
	   _/_L_o_c_a_l_/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/, plus any additional paths specified by
	   --FF.

	   All the --FF options are also passed to the linker.

       --BB_p_r_e_f_i_x
	   This option specifies where to find the executables, libraries,
	   include files, and data files of the compiler itself.

	   The compiler driver program runs one or more of the subprograms
	   _c_p_p, _c_c_1, _a_s and _l_d.	 It tries _p_r_e_f_i_x as a prefix for each program
	   it tries to run, both with and without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n//.

	   For each subprogram to be run, the compiler driver first tries the
	   --BB prefix, if any.  If that name is not found, or if --BB was not
	   specified, the driver tries two standard prefixes, which are
	   _/_u_s_r_/_l_i_b_/_g_c_c_/ and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_-_l_i_b_/.  If neither of those
	   results in a file name that is found, the unmodified program name
	   is searched for using the directories specified in your PPAATTHH envi-
	   ronment variable.

	   The compiler will check to see if the path provided by the --BB
	   refers to a directory, and if necessary it will add a directory
	   separator character at the end of the path.

	   --BB prefixes that effectively specify directory names also apply to
	   libraries in the linker, because the compiler translates these
	   options into --LL options for the linker.  They also apply to
	   includes files in the preprocessor, because the compiler translates
	   these options into --iissyysstteemm options for the preprocessor.  In this
	   case, the compiler appends iinncclluuddee to the prefix.

	   The run-time support file _l_i_b_g_c_c_._a can also be searched for using
	   the --BB prefix, if needed.  If it is not found there, the two stan-
	   dard prefixes above are tried, and that is all.  The file is left
	   out of the link if it is not found by those means.

	   Another way to specify a prefix much like the --BB prefix is to use
	   the environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX.

	   As a special kludge, if the path provided by --BB is _[_d_i_r_/_]_s_t_a_g_e_N_/,
	   where _N is a number in the range 0 to 9, then it will be replaced
	   by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is to help with boot-strapping the com-
	   piler.

       --ssppeeccss==_f_i_l_e
	   Process _f_i_l_e after the compiler reads in the standard _s_p_e_c_s file,
	   in order to override the defaults that the _g_c_c driver program uses
	   when determining what switches to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d,
	   etc.	 More than one --ssppeeccss==_f_i_l_e can be specified on the command
	   line, and they are processed in order, from left to right.

       SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn

       The usual way to run GCC is to run the executable called _g_c_c, or
       _<_m_a_c_h_i_n_e_>_-_g_c_c when cross-compiling, or _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> to run a
       version other than the one that was installed last.  Sometimes this is
       inconvenient, so GCC provides options that will switch to another
       cross-compiler or version.

       --bb _m_a_c_h_i_n_e
	   The argument _m_a_c_h_i_n_e specifies the target machine for compilation.

	   The value to use for _m_a_c_h_i_n_e is the same as was specified as the
	   machine type when configuring GCC as a cross-compiler.  For exam-
	   ple, if a cross-compiler was configured with ccoonnffiigguurree ii338866vv, mean-
	   ing to compile for an 80386 running System V, then you would spec-
	   ify --bb ii338866vv to run that cross compiler.

       --VV _v_e_r_s_i_o_n
	   The argument _v_e_r_s_i_o_n specifies which version of GCC to run.	This
	   is useful when multiple versions are installed.  For example, _v_e_r_-
	   _s_i_o_n might be 22..00, meaning to run GCC version 2.0.

       The --VV and --bb options work by running the _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> exe-
       cutable, so there's no real reason to use them if you can just run that
       directly.

       HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss

       Earlier we discussed the standard option --bb which chooses among differ-
       ent installed compilers for completely different target machines, such
       as VAX vs. 68000 vs. 80386.

       In addition, each of these target machine types can have its own
       special options, starting with --mm, to choose among various hardware
       models or configurations---for example, 68010 vs 68020, floating copro-
       cessor or none.	A single installed version of the compiler can compile
       for any model or configuration, according to the options specified.

       Some configurations of the compiler also support additional special
       options, usually for compatibility with other compilers on the same
       platform.

       These options are defined by the macro "TARGET_SWITCHES" in the machine
       description.  The default for the options is also defined by that
       macro, which enables you to change the defaults.

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These --mm options are defined for the IBM RS/6000 and PowerPC:

       --mmppoowweerr
       --mmnnoo--ppoowweerr
       --mmppoowweerr22
       --mmnnoo--ppoowweerr22
       --mmppoowweerrppcc
       --mmnnoo--ppoowweerrppcc
       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
	   GCC supports two related instruction set architectures for the
	   RS/6000 and PowerPC.	 The _P_O_W_E_R instruction set are those instruc-
	   tions supported by the rriiooss chip set used in the original RS/6000
	   systems and the _P_o_w_e_r_P_C instruction set is the architecture of the
	   Motorola MPC5xx, MPC6xx, MPC8xx microprocessors, and the IBM 4xx
	   microprocessors.

	   Neither architecture is a subset of the other.  However there is a
	   large common subset of instructions supported by both.  An MQ reg-
	   ister is included in processors supporting the POWER architecture.

	   You use these options to specify which instructions are available
	   on the processor you are using.  The default value of these options
	   is determined when configuring GCC.	Specifying the --mmccppuu==_c_p_u___t_y_p_e
	   overrides the specification of these options.  We recommend you use
	   the --mmccppuu==_c_p_u___t_y_p_e option rather than the options listed above.

	   The --mmppoowweerr option allows GCC to generate instructions that are
	   found only in the POWER architecture and to use the MQ register.
	   Specifying --mmppoowweerr22 implies --ppoowweerr and also allows GCC to generate
	   instructions that are present in the POWER2 architecture but not
	   the original POWER architecture.

	   The --mmppoowweerrppcc option allows GCC to generate instructions that are
	   found only in the 32-bit subset of the PowerPC architecture.	 Spec-
	   ifying --mmppoowweerrppcc--ggppoopptt implies --mmppoowweerrppcc and also allows GCC to use
	   the optional PowerPC architecture instructions in the General Pur-
	   pose group, including floating-point square root.  Specifying
	   --mmppoowweerrppcc--ggffxxoopptt implies --mmppoowweerrppcc and also allows GCC to use the
	   optional PowerPC architecture instructions in the Graphics group,
	   including floating-point select.

	   The --mmppoowweerrppcc6644 option allows GCC to generate the additional 64-bit
	   instructions that are found in the full PowerPC64 architecture and
	   to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to
	   --mmnnoo--ppoowweerrppcc6644.

	   If you specify both --mmnnoo--ppoowweerr and --mmnnoo--ppoowweerrppcc, GCC will use only
	   the instructions in the common subset of both architectures plus
	   some special AIX common-mode calls, and will not use the MQ regis-
	   ter.	 Specifying both --mmppoowweerr and --mmppoowweerrppcc permits GCC to use any
	   instruction from either architecture and to allow use of the MQ
	   register; specify this for the Motorola MPC601.

       --mmnneeww--mmnneemmoonniiccss
       --mmoolldd--mmnneemmoonniiccss
	   Select which mnemonics to use in the generated assembler code.
	   With --mmnneeww--mmnneemmoonniiccss, GCC uses the assembler mnemonics defined for
	   the PowerPC architecture.  With --mmoolldd--mmnneemmoonniiccss it uses the assem-
	   bler mnemonics defined for the POWER architecture.  Instructions
	   defined in only one architecture have only one mnemonic; GCC uses
	   that mnemonic irrespective of which of these options is specified.

	   GCC defaults to the mnemonics appropriate for the architecture in
	   use.	 Specifying --mmccppuu==_c_p_u___t_y_p_e sometimes overrides the value of
	   these option.  Unless you are building a cross-compiler, you should
	   normally not specify either --mmnneeww--mmnneemmoonniiccss or --mmoolldd--mmnneemmoonniiccss, but
	   should instead accept the default.

       --mmccppuu==_c_p_u___t_y_p_e
	   Set architecture type, register usage, choice of mnemonics, and
	   instruction scheduling parameters for machine type _c_p_u___t_y_p_e.	 Sup-
	   ported values for _c_p_u___t_y_p_e are rriiooss, rriiooss11, rrsscc, rriiooss22, rrss6644aa, 660011,
	   660022, 660033, 660033ee, 660044, 660044ee, 662200, 663300, 774400, 77440000, 77445500, 775500, ppoowweerr,
	   ppoowweerr22, ppoowweerrppcc, 440033, 550055, 880011, 882211, 882233, and 886600 and ccoommmmoonn.

	   --mmccppuu==ccoommmmoonn selects a completely generic processor.	 Code gener-
	   ated under this option will run on any POWER or PowerPC processor.
	   GCC will use only the instructions in the common subset of both
	   architectures, and will not use the MQ register.  GCC assumes a
	   generic processor model for scheduling purposes.

	   --mmccppuu==ppoowweerr, --mmccppuu==ppoowweerr22, --mmccppuu==ppoowweerrppcc, and --mmccppuu==ppoowweerrppcc6644 spec-
	   ify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),
	   and 64-bit PowerPC architecture machine types, with an appropriate,
	   generic processor model assumed for scheduling purposes.

	   The other options specify a specific processor.  Code generated
	   under those options will run best on that processor, and may not
	   run at all on others.

	   The --mmccppuu options automatically enable or disable other --mm options
	   as follows:

	   ccoommmmoonn
	       --mmnnoo--ppoowweerr, --mmnnoo--ppoowweerrppcc

	   ppoowweerr
	   ppoowweerr22
	   rriiooss11
	   rriiooss22
	   rrsscc --mmppoowweerr, --mmnnoo--ppoowweerrppcc, --mmnnoo--nneeww--mmnneemmoonniiccss

	   ppoowweerrppcc
	   rrss6644aa
	   660022
	   660033
	   660033ee
	   660044
	   662200
	   663300
	   774400
	   77440000
	   77445500
	   775500
	   550055 --mmnnoo--ppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss

	   660011 --mmppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss

	   440033
	   882211
	   886600 --mmnnoo--ppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss, --mmssoofftt--ffllooaatt

       --mmttuunnee==_c_p_u___t_y_p_e
	   Set the instruction scheduling parameters for machine type
	   _c_p_u___t_y_p_e, but do not set the architecture type, register usage, or
	   choice of mnemonics, as --mmccppuu==_c_p_u___t_y_p_e would.  The same values for
	   _c_p_u___t_y_p_e are used for --mmttuunnee as for --mmccppuu.  If both are specified,
	   the code generated will use the architecture, registers, and
	   mnemonics set by --mmccppuu, but the scheduling parameters set by
	   --mmttuunnee.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
	   These switches enable or disable the use of built-in functions that
	   allow access to the AltiVec instruction set.	 You may also need to
	   set --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec ABI
	   enhancements.

	   This option is not supported on Mac OS X; use --ffaallttiivveecc instead.

       --mmaabbii==ssppee
	   Extend the current ABI with SPE ABI extensions.  This does not
	   change the default ABI, instead it adds the SPE ABI extensions to
	   the current ABI.

       --mmaabbii==nnoo--ssppee
	   Disable Booke SPE ABI extensions for the current ABI.

       --mmiisseell==_y_e_s_/_n_o
       --mmiisseell
	   This switch enables or disables the generation of ISEL instruc-
	   tions.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
	   Modify generation of the TOC (Table Of Contents), which is created
	   for every executable file.  The --mmffuullll--ttoocc option is selected by
	   default.  In that case, GCC will allocate at least one TOC entry
	   for each unique non-automatic variable reference in your program.
	   GCC will also place floating-point constants in the TOC.  However,
	   only 16,384 entries are available in the TOC.

	   If you receive a linker error message that saying you have over-
	   flowed the available TOC space, you can reduce the amount of TOC
	   space used with the --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
	   --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-point constants
	   in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces GCC to generate code to cal-
	   culate the sum of an address and a constant at run-time instead of
	   putting that sum into the TOC.  You may specify one or both of
	   these options.  Each causes GCC to produce very slightly slower and
	   larger code at the expense of conserving TOC space.

	   If you still run out of space in the TOC even when you specify both
	   of these options, specify --mmmmiinniimmaall--ttoocc instead.  This option
	   causes GCC to make only one TOC entry for every file.  When you
	   specify this option, GCC will produce code that is slower and
	   larger but which uses extremely little TOC space.  You may wish to
	   use this option only on files that contain less frequently executed
	   code.

       --mmaaiixx6644
       --mmaaiixx3322
	   Enable 64-bit AIX ABI and calling convention: 64-bit pointers,
	   64-bit "long" type, and the infrastructure needed to support them.
	   Specifying --mmaaiixx6644 implies --mmppoowweerrppcc6644 and --mmppoowweerrppcc, while --mmaaiixx3322
	   disables the 64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.	GCC defaults
	   to --mmaaiixx3322.

       --mmxxll--ccaallll
       --mmnnoo--xxll--ccaallll
	   On AIX, pass floating-point arguments to prototyped functions
	   beyond the register save area (RSA) on the stack in addition to
	   argument FPRs.  The AIX calling convention was extended but not
	   initially documented to handle an obscure K&R C case of calling a
	   function that takes the address of its arguments with fewer argu-
	   ments than declared.	 AIX XL compilers access floating point argu-
	   ments which do not fit in the RSA from the stack when a subroutine
	   is compiled without optimization.  Because always storing floating-
	   point arguments on the stack is inefficient and rarely needed, this
	   option is not enabled by default and only is necessary when calling
	   subroutines compiled by AIX XL compilers without optimization.

       --mmppee
	   Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).  Link an applica-
	   tion written to use message passing with special startup code to
	   enable the application to run.  The system must have PE installed
	   in the standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the _s_p_e_c_s file
	   must be overridden with the --ssppeeccss== option to specify the appropri-
	   ate directory location.  The Parallel Environment does not support
	   threads, so the --mmppee option and the --pptthhrreeaadd option are incompati-
	   ble.

       --mmaalliiggnn--mmaacc6688kk
       --mmaalliiggnn--ppoowweerr
       --mmaalliiggnn--nnaattuurraall
	   The option --mmaalliiggnn--mmaacc6688kk causes structure fields to be aligned on
	   2-byte boundaries, in order to be compatible with m68k compiler
	   output.  The option --mmaalliiggnn--ppoowweerr is the standard alignment mode
	   for the PowerPC.  The option --mmaalliiggnn--nnaattuurraall is an extension of
	   PowerPC alignment that aligns larger data types such as doubles on
	   their natural boundaries.  (APPLE ONLY)

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
	   Generate code that does not use (uses) the floating-point register
	   set.	 Software floating point emulation is provided if you use the
	   --mmssoofftt--ffllooaatt option, and pass the option to GCC when linking.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
	   Generate code that uses (does not use) the load multiple word
	   instructions and the store multiple word instructions.  These
	   instructions are generated by default on POWER systems, and not
	   generated on PowerPC systems.  Do not use --mmmmuullttiippllee on little
	   endian PowerPC systems, since those instructions do not work when
	   the processor is in little endian mode.  The exceptions are PPC740
	   and PPC750 which permit the instructions usage in little endian
	   mode.

       --mmssttrriinngg
       --mmnnoo--ssttrriinngg
	   Generate code that uses (does not use) the load string instructions
	   and the store string word instructions to save multiple registers
	   and do small block moves.  These instructions are generated by
	   default on POWER systems, and not generated on PowerPC systems.  Do
	   not use --mmssttrriinngg on little endian PowerPC systems, since those
	   instructions do not work when the processor is in little endian
	   mode.  The exceptions are PPC740 and PPC750 which permit the
	   instructions usage in little endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
	   Generate code that uses (does not use) the load or store instruc-
	   tions that update the base register to the address of the calcu-
	   lated memory location.  These instructions are generated by
	   default.  If you use --mmnnoo--uuppddaattee, there is a small window between
	   the time that the stack pointer is updated and the address of the
	   previous frame is stored, which means code that walks the stack
	   frame across interrupts or signals may get corrupted data.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
	   Generate code that uses (does not use) the floating point multiply
	   and accumulate instructions.	 These instructions are generated by
	   default if hardware floating is used.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
	   On System V.4 and embedded PowerPC systems do not (do) force struc-
	   tures and unions that contain bit-fields to be aligned to the base
	   type of the bit-field.

	   For example, by default a structure containing nothing but 8
	   "unsigned" bit-fields of length 1 would be aligned to a 4 byte
	   boundary and have a size of 4 bytes.	 By using --mmnnoo--bbiitt--aalliiggnn, the
	   structure would be aligned to a 1 byte boundary and be one byte in
	   size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
	   On System V.4 and embedded PowerPC systems do not (do) assume that
	   unaligned memory references will be handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
	   On embedded PowerPC systems generate code that allows (does not
	   allow) the program to be relocated to a different address at run-
	   time.  If you use --mmrreellooccaattaabbllee on any module, all objects linked
	   together must be compiled with --mmrreellooccaattaabbllee or --mmrreellooccaattaabbllee--lliibb.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
	   On embedded PowerPC systems generate code that allows (does not
	   allow) the program to be relocated to a different address at run-
	   time.  Modules compiled with --mmrreellooccaattaabbllee--lliibb can be linked with
	   either modules compiled without --mmrreellooccaattaabbllee and --mmrreellooccaattaabbllee--lliibb
	   or with modules compiled with the --mmrreellooccaattaabbllee options.

       --mmnnoo--ttoocc
       --mmttoocc
	   On System V.4 and embedded PowerPC systems do not (do) assume that
	   register 2 contains a pointer to a global area pointing to the
	   addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
	   On System V.4 and embedded PowerPC systems compile code for the
	   processor in little endian mode.  The --mmlliittttllee--eennddiiaann option is the
	   same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
	   On System V.4 and embedded PowerPC systems compile code for the
	   processor in big endian mode.  The --mmbbiigg--eennddiiaann option is the same
	   as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
	   On Darwin and Mac OS X systems, compile code so that it is not
	   relocatable, but that its external references are relocatable.  The
	   resulting code is suitable for applications, but not shared
	   libraries. (APPLE ONLY)

       --mmlloonngg--bbrraanncchh
	   On Darwin and Mac OS X systems, compile calls to use a 32-bit des-
	   tination address.  This is to support kernel extensions, which may
	   load anywhere within the kernel address space.  (APPLE ONLY)

       --mmccaallll--ssyyssvv
	   On System V.4 and embedded PowerPC systems compile code using call-
	   ing conventions that adheres to the March 1995 draft of the System
	   V Application Binary Interface, PowerPC processor supplement.  This
	   is the default unless you configured GCC using ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
	   Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
	   Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--aaiixx
	   On System V.4 and embedded PowerPC systems compile code using call-
	   ing conventions that are similar to those used on AIX.  This is the
	   default if you configured GCC using ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssoollaarriiss
	   On System V.4 and embedded PowerPC systems compile code for the
	   Solaris operating system.

       --mmccaallll--lliinnuuxx
	   On System V.4 and embedded PowerPC systems compile code for the
	   Linux-based GNU system.

       --mmccaallll--ggnnuu
	   On System V.4 and embedded PowerPC systems compile code for the
	   Hurd-based GNU system.

       --mmccaallll--nneettbbssdd
	   On System V.4 and embedded PowerPC systems compile code for the
	   NetBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
	   Return all structures in memory (as specified by the AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
	   Return structures smaller than 8 bytes in registers (as specified
	   by the SVR4 ABI).

       --mmaabbii==aallttiivveecc
	   Extend the current ABI with AltiVec ABI extensions.	This does not
	   change the default ABI, instead it adds the AltiVec ABI extensions
	   to the current ABI.

	   This option is effectively permanently enabled on Mac OS X.

       --mmaabbii==nnoo--aallttiivveecc
	   Disable AltiVec ABI extensions for the current ABI.

	   This option will not work on Mac OS X.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
	   On System V.4 and embedded PowerPC systems assume that all calls to
	   variable argument functions are properly prototyped.	 Otherwise,
	   the compiler must insert an instruction before every non prototyped
	   call to set or clear bit 6 of the condition code register (_C_R) to
	   indicate whether floating point values were passed in the floating
	   point registers in case the function takes a variable arguments.
	   With --mmpprroottoottyyppee, only calls to prototyped variable argument func-
	   tions will set or clear the bit.

       --mmssiimm
	   On embedded PowerPC systems, assume that the startup module is
	   called _s_i_m_-_c_r_t_0_._o and that the standard C libraries are _l_i_b_s_i_m_._a
	   and _l_i_b_c_._a.	This is the default for ppoowweerrppcc--**--eeaabbiissiimm.  configura-
	   tions.

       --mmmmvvmmee
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_m_v_m_e_._a and
	   _l_i_b_c_._a.

       --mmaaddss
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
	   On System V.4 and embedded PowerPC systems, specify that you are
	   compiling for a VxWorks system.

       --mmwwiinnddiissss
	   Specify that you are compiling for the WindISS simulation environ-
	   ment.

       --mmeemmbb
	   On embedded PowerPC systems, set the _P_P_C___E_M_B bit in the ELF flags
	   header to indicate that eeaabbii extended relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
	   On System V.4 and embedded PowerPC systems do (do not) adhere to
	   the Embedded Applications Binary Interface (eabi) which is a set of
	   modifications to the System V.4 specifications.  Selecting --mmeeaabbii
	   means that the stack is aligned to an 8 byte boundary, a function
	   "__eabi" is called to from "main" to set up the eabi environment,
	   and the --mmssddaattaa option can use both "r2" and "r13" to point to two
	   separate small data areas.  Selecting --mmnnoo--eeaabbii means that the
	   stack is aligned to a 16 byte boundary, do not call an initializa-
	   tion function from "main", and the --mmssddaattaa option will only use
	   "r13" to point to a single small data area.	The --mmeeaabbii option is
	   on by default if you configured GCC using one of the ppooww--
	   eerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
	   On System V.4 and embedded PowerPC systems, put small initialized
	   "const" global and static data in the ..ssddaattaa22 section, which is
	   pointed to by register "r2".	 Put small initialized non-"const"
	   global and static data in the ..ssddaattaa section, which is pointed to
	   by register "r13".  Put small uninitialized global and static data
	   in the ..ssbbssss section, which is adjacent to the ..ssddaattaa section.  The
	   --mmssddaattaa==eeaabbii option is incompatible with the --mmrreellooccaattaabbllee option.
	   The --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
	   On System V.4 and embedded PowerPC systems, put small global and
	   static data in the ..ssddaattaa section, which is pointed to by register
	   "r13".  Put small uninitialized global and static data in the ..ssbbssss
	   section, which is adjacent to the ..ssddaattaa section.  The --mmssddaattaa==ssyyssvv
	   option is incompatible with the --mmrreellooccaattaabbllee option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
	   On System V.4 and embedded PowerPC systems, if --mmeeaabbii is used, com-
	   pile code the same as --mmssddaattaa==eeaabbii, otherwise compile code the same
	   as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa--ddaattaa
	   On System V.4 and embedded PowerPC systems, put small global and
	   static data in the ..ssddaattaa section.  Put small uninitialized global
	   and static data in the ..ssbbssss section.  Do not use register "r13" to
	   address small data however.	This is the default behavior unless
	   other --mmssddaattaa options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
	   On embedded PowerPC systems, put all initialized global and static
	   data in the ..ddaattaa section, and all uninitialized data in the ..bbssss
	   section.

       --GG _n_u_m
	   On embedded PowerPC systems, put global and static items less than
	   or equal to _n_u_m bytes into the small data or bss sections instead
	   of the normal data or bss section.  By default, _n_u_m is 8.  The --GG
	   _n_u_m switch is also passed to the linker.  All modules should be
	   compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
	   On System V.4 and embedded PowerPC systems do (do not) emit regis-
	   ter names in the assembly language output using symbolic forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
	   Default to making all function calls indirectly, using a register,
	   so that functions which reside further than 32 megabytes
	   (33,554,432 bytes) from the current location can be called.	This
	   setting can be overridden by the "shortcall" function attribute, or
	   by "#pragma longcall(0)".

	   Some linkers are capable of detecting out-of-range calls and gener-
	   ating glue code on the fly.	On these systems, long calls are
	   unnecessary and generate slower code.  As of this writing, the AIX
	   linker can do this, as can the GNU linker for PowerPC/64.  It is
	   planned to add this feature to the GNU linker for 32-bit PowerPC
	   systems as well.

	   On Darwin/PPC systems, "#pragma longcall" will generate ``jbsr
	   callee, L42'', plus a ``branch island'' (glue code).	 The two tar-
	   get addresses represent the callee and the ``branch island.'' The
	   Darwin/PPC linker will prefer the first address and generate a ``bl
	   callee'' if the PPC ``bl'' instruction will reach the callee
	   directly; otherwise, the linker will generate ``bl L42'' to call
	   the ``branch island.''  The ``branch island'' is appended to the
	   body of the calling function; it computes the full 32-bit address
	   of the callee and jumps to it.

	   In the future, we may cause GCC to ignore all longcall specifica-
	   tions when the linker is known to generate glue.

       --pptthhrreeaadd
	   Adds support for multithreading with the _p_t_h_r_e_a_d_s library.  This
	   option sets flags for both the preprocessor and linker.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       --aallll__llooaadd
	   Loads all members of static archive libraries.  See man _l_d(1) for
	   more information.

       --aarrcchh__eerrrroorrss__ffaattaall
	   Cause the errors having to do with files that have the wrong archi-
	   tecture to be fatal.

       --bbiinndd__aatt__llooaadd
	   Causes the output file to be marked such that the dynamic linker
	   will bind all undefined references when the file is loaded or
	   launched.

       --bbuunnddllee
	   Produce a Mach-o bundle format file.	 See man _l_d(1) for more infor-
	   mation.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
	   This specifies the _e_x_e_c_u_t_a_b_l_e that will be loading the build output
	   file being linked. See man _l_d(1) for more information.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --aarrcchh__oonnllyy
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --ddyynnaammiicclliibb
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee
       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss
       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
	   This options are available for Darwin linker. Darwin linker man
	   page describes them in detail.

       _I_n_t_e_l _3_8_6 _a_n_d _A_M_D _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These --mm options are defined for the i386 and x86-64 family of comput-
       ers:

       --mmccppuu==_c_p_u_-_t_y_p_e
	   Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
	   except for the ABI and the set of available instructions.  The
	   choices for _c_p_u_-_t_y_p_e are ii338866, ii448866, ii558866, ii668866, ppeennttiiuumm, ppeennttiiuumm--
	   mmmmxx, ppeennttiiuummpprroo, ppeennttiiuumm22, ppeennttiiuumm33, ppeennttiiuumm44, kk66, kk66--22, kk66--33,
	   aatthhlloonn, aatthhlloonn--ttbbiirrdd, aatthhlloonn--44, aatthhlloonn--xxpp, aatthhlloonn--mmpp, wwiinncchhiipp--cc66,
	   wwiinncchhiipp22 and cc33.

	   While picking a specific _c_p_u_-_t_y_p_e will schedule things appropri-
	   ately for that particular chip, the compiler will not generate any
	   code that does not run on the i386 without the --mmaarrcchh==_c_p_u_-_t_y_p_e
	   option being used.  ii558866 is equivalent to ppeennttiiuumm and ii668866 is
	   equivalent to ppeennttiiuummpprroo.  kk66 and aatthhlloonn are the AMD chips as
	   opposed to the Intel ones.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
	   Generate instructions for the machine type _c_p_u_-_t_y_p_e.	 The choices
	   for _c_p_u_-_t_y_p_e are the same as for --mmccppuu.  Moreover, specifying
	   --mmaarrcchh==_c_p_u_-_t_y_p_e implies --mmccppuu==_c_p_u_-_t_y_p_e.

       --mm338866
       --mm448866
       --mmppeennttiiuumm
       --mmppeennttiiuummpprroo
	   These options are synonyms for --mmccppuu==ii338866, --mmccppuu==ii448866, --mmccppuu==ppeenn--
	   ttiiuumm, and --mmccppuu==ppeennttiiuummpprroo respectively.  These synonyms are depre-
	   cated.

       --mmffppmmaatthh==_u_n_i_t
	   generate floating point arithmetics for selected unit _u_n_i_t.	the
	   choices for _u_n_i_t are:

	   338877 Use the standard 387 floating point coprocessor present major-
	       ity of chips and emulated otherwise.  Code compiled with this
	       option will run almost everywhere.  The temporary results are
	       computed in 80bit precision instead of precision specified by
	       the type resulting in slightly different results compared to
	       most of other chips. See --ffffllooaatt--ssttoorree for more detailed
	       description.

	       This is the default choice for i386 compiler.

	   ssssee Use scalar floating point instructions present in the SSE
	       instruction set.	 This instruction set is supported by Pentium3
	       and newer chips, in the AMD line by Athlon-4, Athlon-xp and
	       Athlon-mp chips.	 The earlier version of SSE instruction set
	       supports only single precision arithmetics, thus the double and
	       extended precision arithmetics is still done using 387.	Later
	       version, present only in Pentium4 and the future AMD x86-64
	       chips supports double precision arithmetics too.

	       For i387 you need to use --mmaarrcchh==_c_p_u_-_t_y_p_e, --mmssssee or --mmssssee22
	       switches to enable SSE extensions and make this option effec-
	       tive.  For x86-64 compiler, these extensions are enabled by
	       default.

	       The resulting code should be considerably faster in majority of
	       cases and avoid the numerical instability problems of 387 code,
	       but may break some existing code that expects temporaries to be
	       80bit.

	       This is the default choice for x86-64 compiler.

	   ssssee,,338877
	       Attempt to utilize both instruction sets at once.  This effec-
	       tively double the amount of available registers and on chips
	       with separate execution units for 387 and SSE the execution
	       resources too.  Use this option with care, as it is still
	       experimental, because gcc register allocator does not model
	       separate functional units well resulting in instable perfor-
	       mance.

       --mmaassmm==_d_i_a_l_e_c_t
	   Output asm instructions using selected _d_i_a_l_e_c_t. Supported choices
	   are iinntteell or aatttt (the default one).

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
	   Control whether or not the compiler uses IEEE floating point com-
	   parisons.  These handle correctly the case where the result of a
	   comparison is unordered.

       --mmssoofftt--ffllooaatt
	   Generate output containing library calls for floating point.	 WWaarrnn--
	   iinngg:: the requisite libraries are not part of GCC.  Normally the
	   facilities of the machine's usual C compiler are used, but this
	   can't be done directly in cross-compilation.	 You must make your
	   own arrangements to provide suitable library functions for
	   cross-compilation.

	   On machines where a function returns floating point results in the
	   80387 register stack, some floating point opcodes may be emitted
	   even if --mmssoofftt--ffllooaatt is used.

       --mmnnoo--ffpp--rreett--iinn--338877
	   Do not use the FPU registers for return values of functions.

	   The usual calling convention has functions return values of types
	   "float" and "double" in an FPU register, even if there is no FPU.
	   The idea is that the operating system should emulate an FPU.

	   The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be returned in
	   ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
	   Some 387 emulators do not support the "sin", "cos" and "sqrt"
	   instructions for the 387.  Specify this option to avoid generating
	   those instructions.	This option is the default on FreeBSD, OpenBSD
	   and NetBSD.	This option is overridden when --mmaarrcchh indicates that
	   the target cpu will always have an FPU and so the instruction will
	   not need emulation.	As of revision 2.6.1, these instructions are
	   not generated unless you also use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
	   switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
	   Control whether GCC aligns "double", "long double", and "long long"
	   variables on a two word boundary or a one word boundary.  Aligning
	   "double" variables on a two word boundary will produce code that
	   runs somewhat faster on a PPeennttiiuumm at the expense of more memory.

	   WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch, structures contain-
	   ing the above types will be aligned differently than the published
	   application binary interface specifications for the 386 and will
	   not be binary compatible with structures in code compiled without
	   that switch.

       --mm112288bbiitt--lloonngg--ddoouubbllee
	   Control the size of "long double" type. i386 application binary
	   interface specify the size to be 12 bytes, while modern architec-
	   tures (Pentium and newer) prefer "long double" aligned to 8 or 16
	   byte boundary.  This is impossible to reach with 12 byte long dou-
	   bles in the array accesses.

	   WWaarrnniinngg:: if you use the --mm112288bbiitt--lloonngg--ddoouubbllee switch, the structures
	   and arrays containing "long double" will change their size as well
	   as function calling convention for function taking "long double"
	   will be modified.

       --mm9966bbiitt--lloonngg--ddoouubbllee
	   Set the size of "long double" to 96 bits as required by the i386
	   application binary interface.  This is the default.

       --mmssvvrr33--sshhlliibb
       --mmnnoo--ssvvrr33--sshhlliibb
	   Control whether GCC places uninitialized local variables into the
	   "bss" or "data" segments.  --mmssvvrr33--sshhlliibb places them into "bss".
	   These options are meaningful only on System V Release 3.

       --mmrrttdd
	   Use a different function-calling convention, in which functions
	   that take a fixed number of arguments return with the "ret" _n_u_m
	   instruction, which pops their arguments while returning.  This
	   saves one instruction in the caller since there is no need to pop
	   the arguments there.

	   You can specify that an individual function is called with this
	   calling sequence with the function attribute ssttddccaallll.  You can also
	   override the --mmrrttdd option by using the function attribute ccddeeccll.

	   WWaarrnniinngg:: this calling convention is incompatible with the one nor-
	   mally used on Unix, so you cannot use it if you need to call
	   libraries compiled with the Unix compiler.

	   Also, you must provide function prototypes for all functions that
	   take variable numbers of arguments (including "printf"); otherwise
	   incorrect code will be generated for calls to those functions.

	   In addition, seriously incorrect code will result if you call a
	   function with too many arguments.  (Normally, extra arguments are
	   harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
	   Control how many registers are used to pass integer arguments.  By
	   default, no registers are used to pass arguments, and at most 3
	   registers can be used.  You can control this behavior for a spe-
	   cific function by using the function attribute rreeggppaarrmm.

	   WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero, then you must
	   build all modules with the same value, including any libraries.
	   This includes the system libraries and startup modules.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
	   Attempt to keep the stack boundary aligned to a 2 raised to _n_u_m
	   byte boundary.  If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
	   default is 4 (16 bytes or 128 bits), except when optimizing for
	   code size (--OOss), in which case the default is the minimum correct
	   alignment (4 bytes for x86, and 8 bytes for x86-64).

	   On Pentium and PentiumPro, "double" and "long double" values should
	   be aligned to an 8 byte boundary (see --mmaalliiggnn--ddoouubbllee) or suffer
	   significant run time performance penalties.	On Pentium III, the
	   Streaming SIMD Extension (SSE) data type "__m128" suffers similar
	   penalties if it is not 16 byte aligned.

	   To ensure proper alignment of this values on the stack, the stack
	   boundary must be as aligned as that required by any value stored on
	   the stack.  Further, every function must be generated such that it
	   keeps the stack aligned.  Thus calling a function compiled with a
	   higher preferred stack boundary from a function compiled with a
	   lower preferred stack boundary will most likely misalign the stack.
	   It is recommended that libraries that use callbacks always use the
	   default setting.

	   This extra alignment does consume extra stack space, and generally
	   increases code size.	 Code that is sensitive to stack space usage,
	   such as embedded systems and operating system kernels, may want to
	   reduce the preferred alignment to --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmnnoo--mmmmxx
       --mmssssee
       --mmnnoo--ssssee
       --mmssssee22
       --mmnnoo--ssssee22
       --mm33ddnnooww
       --mmnnoo--33ddnnooww
	   These switches enable or disable the use of built-in functions that
	   allow direct access to the MMX, SSE and 3Dnow extensions of the
	   instruction set.

	   To have SSE/SSE2 instructions generated automatically from float-
	   ing-point code, see --mmffppmmaatthh==ssssee.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
	   Use PUSH operations to store outgoing parameters.  This method is
	   shorter and usually equally fast as method using SUB/MOV operations
	   and is enabled by default.  In some cases disabling it may improve
	   performance because of improved scheduling and reduced dependen-
	   cies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
	   If enabled, the maximum amount of space required for outgoing argu-
	   ments will be computed in the function prologue.  This is faster on
	   most modern CPUs because of reduced dependencies, improved schedul-
	   ing and reduced stack usage when preferred stack boundary is not
	   equal to 2.	The drawback is a notable increase in code size.  This
	   switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
	   Support thread-safe exception handling on MMiinnggww3322.  Code that
	   relies on thread-safe exception handling must compile and link all
	   code with the --mmtthhrreeaaddss option.  When compiling, --mmtthhrreeaaddss defines
	   --DD__MMTT; when linking, it links in a special thread helper library
	   --llmmiinnggwwtthhrrdd which cleans up per thread exception handling data.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
	   Do not align destination of inlined string operations.  This switch
	   reduces code size and improves performance in case the destination
	   is already aligned, but gcc don't know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
	   By default GCC inlines string operations only when destination is
	   known to be aligned at least to 4 byte boundary.  This enables more
	   inlining, increase code size, but may improve performance of code
	   that depends on fast memcpy, strlen and memset for short lengths.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
	   Don't keep the frame pointer in a register for leaf functions.
	   This avoids the instructions to save, set up and restore frame
	   pointers and makes an extra register available in leaf functions.
	   The option --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
	   functions which might make debugging harder.

       These --mm switches are supported in addition to the above on AMD x86-64
       processors in 64-bit environments.

       --mm3322
       --mm6644
	   Generate code for a 32-bit or 64-bit environment.  The 32-bit envi-
	   ronment sets int, long and pointer to 32 bits and generates code
	   that runs on any i386 system.  The 64-bit environment sets int to
	   32 bits and long and pointer to 64 bits and generates code for
	   AMD's x86-64 architecture.

       --mmnnoo--rreedd--zzoonnee
	   Do not use a so called red zone for x86-64 code.  The red zone is
	   mandated by the x86-64 ABI, it is a 128-byte area beyond the loca-
	   tion of the stack pointer that will not be modified by signal or
	   interrupt handlers and therefore can be used for temporary data
	   without adjusting the stack pointer.	 The flag --mmnnoo--rreedd--zzoonnee dis-
	   ables this red zone.

       --mmccmmooddeell==ssmmaallll
	   Generate code for the small code model: the program and its symbols
	   must be linked in the lower 2 GB of the address space.  Pointers
	   are 64 bits.	 Programs can be statically or dynamically linked.
	   This is the default code model.

       --mmccmmooddeell==kkeerrnneell
	   Generate code for the kernel code model.  The kernel runs in the
	   negative 2 GB of the address space.	This model has to be used for
	   Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
	   Generate code for the medium model: The program is linked in the
	   lower 2 GB of the address space but symbols can be located anywhere
	   in the address space.  Programs can be statically or dynamically
	   linked, but building of shared libraries are not supported with the
	   medium model.

       --mmccmmooddeell==llaarrggee
	   Generate code for the large model: This model makes no assumptions
	   about addresses and sizes of sections.  Currently GCC does not
	   implement this model.

       OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss

       These machine-independent options control the interface conventions
       used in code generation.

       Most of them have both positive and negative forms; the negative form
       of --ffffoooo would be --ffnnoo--ffoooo.  In the table below, only one of the forms
       is listed---the one which is not the default.  You can figure out the
       other form by either removing nnoo-- or adding it.

       --ffbboouunnddss--cchheecckk
	   For front-ends that support it, generate additional code to check
	   that indices used to access arrays are within the declared range.
	   This is currently only supported by the Java and Fortran 77
	   front-ends, where this option defaults to true and false respec-
	   tively.

       --ffttrraappvv
	   This option generates traps for signed overflow on addition, sub-
	   traction, multiplication operations.

       --ffeexxcceeppttiioonnss
	   Enable exception handling.  Generates extra code needed to propa-
	   gate exceptions.  For some targets, this implies GCC will generate
	   frame unwind information for all functions, which can produce sig-
	   nificant data size overhead, although it does not affect execution.
	   If you do not specify this option, GCC will enable it by default
	   for languages like C++ which normally require exception handling,
	   and disable it for languages like C that do not normally require
	   it.	However, you may need to enable this option when compiling C
	   code that needs to interoperate properly with exception handlers
	   written in C++.  You may also wish to disable this option if you
	   are compiling older C++ programs that don't use exception handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
	   Generate code that allows trapping instructions to throw excep-
	   tions.  Note that this requires platform-specific runtime support
	   that does not exist everywhere.  Moreover, it only allows _t_r_a_p_p_i_n_g
	   instructions to throw exceptions, i.e. memory references or float-
	   ing point instructions.  It does not allow exceptions to be thrown
	   from arbitrary signal handlers such as "SIGALRM".

       --ffuunnwwiinndd--ttaabblleess
	   Similar to --ffeexxcceeppttiioonnss, except that it will just generate any
	   needed static data, but will not affect the generated code in any
	   other way.  You will normally not enable this option; instead, a
	   language processor that needs this handling would enable it on your
	   behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
	   Generate unwind table in dwarf2 format, if supported by target
	   machine.  The table is exact at each instruction boundary, so it
	   can be used for stack unwinding from asynchronous events (such as
	   debugger or garbage collector).

       --ffppcccc--ssttrruucctt--rreettuurrnn
	   Return ``short'' "struct" and "union" values in memory like longer
	   ones, rather than in registers.  This convention is less efficient,
	   but it has the advantage of allowing intercallability between GCC-
	   compiled files and files compiled with other compilers, particu-
	   larly the Portable C Compiler (pcc).

	   The precise convention for returning structures in memory depends
	   on the target configuration macros.

	   Short structures and unions are those whose size and alignment
	   match that of some integer type.

	   WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn switch is not
	   binary compatible with code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
	   switch.  Use it to conform to a non-default application binary
	   interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
	   Return "struct" and "union" values in registers when possible.
	   This is more efficient for small structures than
	   --ffppcccc--ssttrruucctt--rreettuurrnn.

	   If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor --ffrreegg--ssttrruucctt--rreettuurrnn,
	   GCC defaults to whichever convention is standard for the target.
	   If there is no standard convention, GCC defaults to
	   --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is the principal
	   compiler.  In those cases, we can choose the standard, and we chose
	   the more efficient register return alternative.

	   WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn switch is not
	   binary compatible with code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
	   switch.  Use it to conform to a non-default application binary
	   interface.

       --ffsshhoorrtt--eennuummss
	   Allocate to an "enum" type only as many bytes as it needs for the
	   declared range of possible values.  Specifically, the "enum" type
	   will be equivalent to the smallest integer type which has enough
	   room.

	   WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--ddoouubbllee
	   Use the same size for "double" as for "float".

	   WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
	   Override the underlying type for wwcchhaarr__tt to be sshhoorrtt uunnssiiggnneedd iinntt
	   instead of the default for the target.  This option is useful for
	   building programs to run under WINE.

	   WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhaarreedd--ddaattaa
	   Requests that the data and non-"const" variables of this compila-
	   tion be shared data rather than private data.  The distinction
	   makes sense only on certain operating systems, where shared data is
	   shared between processes running the same program, while private
	   data exists in one copy per process.

       --ffnnoo--ccoommmmoonn
	   In C, allocate even uninitialized global variables in the data sec-
	   tion of the object file, rather than generating them as common
	   blocks.  This has the effect that if the same variable is declared
	   (without "extern") in two different compilations, you will get an
	   error when you link them.  The only reason this might be useful is
	   if you wish to verify that the program will work on other systems
	   which always work this way.

       --ffnnoo--iiddeenntt
	   Ignore the ##iiddeenntt directive.

       --ffnnoo--ggnnuu--lliinnkkeerr
	   Do not output global initializations (such as C++ constructors and
	   destructors) in the form used by the GNU linker (on systems where
	   the GNU linker is the standard method of handling them).  Use this
	   option when you want to use a non-GNU linker, which also requires
	   using the ccoolllleecctt22 program to make sure the system linker includes
	   constructors and destructors.  (ccoolllleecctt22 is included in the GCC
	   distribution.)  For systems which _m_u_s_t use ccoolllleecctt22, the compiler
	   driver ggcccc is configured to do this automatically.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
	   Don't output a ".size" assembler directive, or anything else that
	   would cause trouble if the function is split in the middle, and the
	   two halves are placed at locations far apart in memory.  This
	   option is used when compiling _c_r_t_s_t_u_f_f_._c; you should not need to
	   use it for anything else.

       --ffvveerrbboossee--aassmm
	   Put extra commentary information in the generated assembly code to
	   make it more readable.  This option is generally only of use to
	   those who actually need to read the generated assembly code (per-
	   haps while debugging the compiler itself).

	   --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra information to be
	   omitted and is useful when comparing two assembler files.

       --ffvvoollaattiillee
	   Consider all memory references through pointers to be volatile.

       --ffvvoollaattiillee--gglloobbaall
	   Consider all memory references to extern and global data items to
	   be volatile.	 GCC does not consider static data items to be
	   volatile because of this switch.

       --ffvvoollaattiillee--ssttaattiicc
	   Consider all memory references to static data to be volatile.

       --ffppiicc
	   Generate position-independent code (PIC) suitable for use in a
	   shared library, if supported for the target machine.	 Such code
	   accesses all constant addresses through a global offset table
	   (GOT).  The dynamic loader resolves the GOT entries when the pro-
	   gram starts (the dynamic loader is not part of GCC; it is part of
	   the operating system).  If the GOT size for the linked executable
	   exceeds a machine-specific maximum size, you get an error message
	   from the linker indicating that --ffppiicc does not work; in that case,
	   recompile with --ffPPIICC instead.  (These maximums are 16k on the m88k,
	   8k on the SPARC, and 32k on the m68k and RS/6000.  The 386 has no
	   such limit.)

	   Position-independent code requires special support, and therefore
	   works only on certain machines.  For the 386, GCC supports PIC for
	   System V but not for the Sun 386i.  Code generated for the IBM
	   RS/6000 is always position-independent.

	   --ffppiicc is not supported on Mac OS X.

       --ffPPIICC
	   If supported for the target machine, emit position-independent
	   code, suitable for dynamic linking and avoiding any limit on the
	   size of the global offset table.  This option makes a difference on
	   the m68k, m88k, and the SPARC.

	   Position-independent code requires special support, and therefore
	   works only on certain machines.

	   --ffPPIICC is the default on Darwin and Mac OS X.

       --ffffiixxeedd--_r_e_g
	   Treat the register named _r_e_g as a fixed register; generated code
	   should never refer to it (except perhaps as a stack pointer, frame
	   pointer or in some other fixed role).

	   _r_e_g must be the name of a register.	The register names accepted
	   are machine-specific and are defined in the "REGISTER_NAMES" macro
	   in the machine description macro file.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffccaallll--uusseedd--_r_e_g
	   Treat the register named _r_e_g as an allocable register that is clob-
	   bered by function calls.  It may be allocated for temporaries or
	   variables that do not live across a call.  Functions compiled this
	   way will not save and restore the register _r_e_g.

	   It is an error to used this flag with the frame pointer or stack
	   pointer.  Use of this flag for other registers that have fixed per-
	   vasive roles in the machine's execution model will produce disas-
	   trous results.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
	   Treat the register named _r_e_g as an allocable register saved by
	   functions.  It may be allocated even for temporaries or variables
	   that live across a call.  Functions compiled this way will save and
	   restore the register _r_e_g if they use it.

	   It is an error to used this flag with the frame pointer or stack
	   pointer.  Use of this flag for other registers that have fixed per-
	   vasive roles in the machine's execution model will produce disas-
	   trous results.

	   A different sort of disaster will result from the use of this flag
	   for a register in which function values may be returned.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffppaacckk--ssttrruucctt
	   Pack all structure members together without holes.

	   WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Additionally, it makes the code suboptimal.	Use it to conform to a
	   non-default application binary interface.

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
	   Generate instrumentation calls for entry and exit to functions.
	   Just after function entry and just before function exit, the fol-
	   lowing profiling functions will be called with the address of the
	   current function and its call site.	(On some platforms,
	   "__builtin_return_address" does not work beyond the current func-
	   tion, so the call site information may not be available to the pro-
	   filing functions otherwise.)

		   void __cyg_profile_func_enter (void *this_fn,
						  void *call_site);
		   void __cyg_profile_func_exit	 (void *this_fn,
						  void *call_site);

	   The first argument is the address of the start of the current func-
	   tion, which may be looked up exactly in the symbol table.

	   This instrumentation is also done for functions expanded inline in
	   other functions.  The profiling calls will indicate where, concep-
	   tually, the inline function is entered and exited.  This means that
	   addressable versions of such functions must be available.  If all
	   your uses of a function are expanded inline, this may mean an addi-
	   tional expansion of code size.  If you use eexxtteerrnn iinnlliinnee in your C
	   code, an addressable version of such functions must be provided.
	   (This is normally the case anyways, but if you get lucky and the
	   optimizer always expands the functions inline, you might have got-
	   ten away without providing static copies.)

	   A function may be given the attribute "no_instrument_function", in
	   which case this instrumentation will not be done.  This can be
	   used, for example, for the profiling functions listed above, high-
	   priority interrupt routines, and any functions from which the pro-
	   filing functions cannot safely be called (perhaps signal handlers,
	   if the profiling routines generate output or allocate memory).

       --ffssttaacckk--cchheecckk
	   Generate code to verify that you do not go beyond the boundary of
	   the stack.  You should specify this flag if you are running in an
	   environment with multiple threads, but only rarely need to specify
	   it in a single-threaded environment since stack overflow is auto-
	   matically detected on nearly all systems if there is only one
	   stack.

	   Note that this switch does not actually cause checking to be done;
	   the operating system must do that.  The switch causes generation of
	   code to ensure that the operating system sees the stack being
	   extended.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
	   Generate code to ensure that the stack does not grow beyond a cer-
	   tain value, either the value of a register or the address of a sym-
	   bol.	 If the stack would grow beyond the value, a signal is raised.
	   For most targets, the signal is raised before the stack overruns
	   the boundary, so it is possible to catch the signal without taking
	   special precautions.

	   For instance, if the stack starts at absolute address 00xx8800000000000000
	   and grows downwards, you can use the flags --ffssttaacckk--lliimmiitt--ssyymm--
	   bbooll==____ssttaacckk__lliimmiitt and --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to
	   enforce a stack limit of 128KB.  Note that this may only work with
	   the GNU linker.

       --ffaarrgguummeenntt--aalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
	   Specify the possible relationships among parameters and between
	   parameters and global data.

	   --ffaarrgguummeenntt--aalliiaass specifies that arguments (parameters) may alias
	   each other and may alias global storage.--ffaarrgguummeenntt--nnooaalliiaass speci-
	   fies that arguments do not alias each other, but may alias global
	   storage.--ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall specifies that arguments do not
	   alias each other and do not alias global storage.

	   Each language will automatically use whatever option is required by
	   the language standard.  You should not need to use these options
	   yourself.

       --fflleeaaddiinngg--uunnddeerrssccoorree
	   This option and its counterpart, --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly
	   change the way C symbols are represented in the object file.	 One
	   use is to help link with legacy assembly code.

	   WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to generate
	   code that is not binary compatible with code generated without that
	   switch.  Use it to conform to a non-default application binary
	   interface.  Not all targets provide complete support for this
	   switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
	   Alter the thread-local storage model to be used.  The _m_o_d_e_l argu-
	   ment should be one of "global-dynamic", "local-dynamic", "ini-
	   tial-exec" or "local-exec".

	   The default without --ffppiicc is "initial-exec"; with --ffppiicc the default
	   is "global-dynamic".

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that affect how
       GCC operates.  Some of them work by specifying directories or prefixes
       to use when searching for various kinds of files.  Some are used to
       specify other aspects of the compilation environment.

       Note that you can also specify places to search using options such as
       --BB, --II and --LL.  These take precedence over places specified using envi-
       ronment variables, which in turn take precedence over those specified
       by the configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
	   These environment variables control the way that GCC uses localiza-
	   tion information that allow GCC to work with different national
	   conventions.	 GCC inspects the locale categories LLCC__CCTTYYPPEE and
	   LLCC__MMEESSSSAAGGEESS if it has been configured to do so.  These locale cate-
	   gories can be set to any value supported by your installation.  A
	   typical value is eenn__UUKK for English in the United Kingdom.

	   The LLCC__CCTTYYPPEE environment variable specifies character classifica-
	   tion.  GCC uses it to determine the character boundaries in a
	   string; this is needed for some multibyte encodings that contain
	   quote and escape characters that would otherwise be interpreted as
	   a string end or escape.

	   The LLCC__MMEESSSSAAGGEESS environment variable specifies the language to use
	   in diagnostic messages.

	   If the LLCC__AALLLL environment variable is set, it overrides the value
	   of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS; otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS
	   default to the value of the LLAANNGG environment variable.  If none of
	   these variables are set, GCC defaults to traditional C English
	   behavior.

       TTMMPPDDIIRR
	   If TTMMPPDDIIRR is set, it specifies the directory to use for temporary
	   files.  GCC uses temporary files to hold the output of one stage of
	   compilation which is to be used as input to the next stage: for
	   example, the output of the preprocessor, which is the input to the
	   compiler proper.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
	   If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to use in the
	   names of the subprograms executed by the compiler.  No slash is
	   added when this prefix is combined with the name of a subprogram,
	   but you can specify a prefix that ends with a slash if you wish.

	   If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to figure out an
	   appropriate prefix to use based on the pathname it was invoked
	   with.

	   If GCC cannot find the subprogram using the specified prefix, it
	   tries looking in the usual places for the subprogram.

	   The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is _p_r_e_f_i_x_/_l_i_b_/_g_c_c_-_l_i_b_/ where
	   _p_r_e_f_i_x is the value of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

	   Other prefixes specified with --BB take precedence over this prefix.

	   This prefix is also used for finding files such as _c_r_t_0_._o that are
	   used for linking.

	   In addition, the prefix is used in an unusual way in finding the
	   directories to search for header files.  For each of the standard
	   directories whose name normally begins with //uussrr//llooccaall//lliibb//ggcccc--lliibb
	   (more precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC tries
	   replacing that beginning with the specified prefix to produce an
	   alternate directory name.  Thus, with --BBffoooo//, GCC will search
	   _f_o_o_/_b_a_r where it would normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These
	   alternate directories are searched first; the standard directories
	   come next.

       CCOOMMPPIILLEERR__PPAATTHH
	   The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list of directo-
	   ries, much like PPAATTHH.  GCC tries the directories thus specified
	   when searching for subprograms, if it can't find the subprograms
	   using GGCCCC__EEXXEECC__PPRREEFFIIXX.

       LLIIBBRRAARRYY__PPAATTHH
	   The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of directories,
	   much like PPAATTHH.  When configured as a native compiler, GCC tries
	   the directories thus specified when searching for special linker
	   files, if it can't find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.	Linking using
	   GCC also uses these directories when searching for ordinary
	   libraries for the --ll option (but directories specified with --LL come
	   first).

       LLAANNGG
	   This variable is used to pass locale information to the compiler.
	   One way in which this information is used is to determine the char-
	   acter set to be used when character literals, string literals and
	   comments are parsed in C and C++.  When the compiler is configured
	   to allow multibyte characters, the following values for LLAANNGG are
	   recognized:

	   CC--JJIISS
	       Recognize JIS characters.

	   CC--SSJJIISS
	       Recognize SJIS characters.

	   CC--EEUUCCJJPP
	       Recognize EUCJP characters.

	   If LLAANNGG is not defined, or if it has some other value, then the
	   compiler will use mblen and mbtowc as defined by the default locale
	   to recognize and translate multibyte characters.

       Some additional environments variables affect the behavior of the pre-
       processor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
	   Each variable's value is a list of directories separated by a spe-
	   cial character, much like PPAATTHH, in which to look for header files.
	   The special character, "PATH_SEPARATOR", is target-dependent and
	   determined at GCC build time.  For Windows-based targets it is a
	   semicolon, and for almost all other targets it is a colon.

	   CCPPAATTHH specifies a list of directories to be searched as if speci-
	   fied with --II, but after any paths given with --II options on the com-
	   mand line.  This environment variable is used regardless of which
	   language is being preprocessed.

	   The remaining environment variables apply only when preprocessing
	   the particular language indicated.  Each specifies a list of direc-
	   tories to be searched as if specified with --iissyysstteemm, but after any
	   paths given with --iissyysstteemm options on the command line.

	   In all these variables, an empty element instructs the compiler to
	   search its current working directory.  Empty elements can appear at
	   the beginning or end of a path.  For instance, if the value of
	   CCPPAATTHH is ":/special/include", that has the same effect as
	   --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
	   If this variable is set, its value specifies how to output depen-
	   dencies for Make based on the non-system header files processed by
	   the compiler.  System header files are ignored in the dependency
	   output.

	   The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
	   case the Make rules are written to that file, guessing the target
	   name from the source file name.  Or the value can have the form
	   _f_i_l_e _t_a_r_g_e_t, in which case the rules are written to file _f_i_l_e using
	   _t_a_r_g_e_t as the target name.

	   In other words, this environment variable is equivalent to combin-
	   ing the options --MMMM and --MMFF, with an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
	   This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above),
	   except that system header files are not ignored, so it implies --MM
	   rather than --MMMM.  However, the dependence on the main input file is
	   omitted.

BBUUGGSS
       To report bugs to Apple, see <hhttttpp::////ddeevveellooppeerr..aappppllee..ccoomm//bbuuggrreeppoorrtteerr>.

FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build supplementary stub code
	   for constructors to work.  On multi-libbed systems, ggcccc --sshhaarreedd
	   must select the correct support libraries to link against.  Failing
	   to supply the correct flags may lead to subtle defects.  Supplying
	   them in cases where they are not necessary is innocuous.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _g_7_7(1), _a_s(1), _l_d(1),
       _g_d_b(1), _a_d_b(1), _d_b_x(1), _s_d_b(1), _g_c_c___s_e_l_e_c_t(1) and the Info entries for
       _g_c_c, _c_p_p, _g_7_7, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.

AAUUTTHHOORR
       See the Info entry for ggcccc, or <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonn--
       ttrriibbuuttoorrss..hhttmmll>, for contributors to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
       1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2 or
       any later version published by the Free Software Foundation; with the
       Invariant Sections being ``GNU General Public License'' and ``Funding
       Free Software'', the Front-Cover texts being (a) (see below), and with
       the Back-Cover Texts being (b) (see below).  A copy of the license is
       included in the _g_f_d_l(7) man page.

       (a) The FSF's Front-Cover Text is:

	    A GNU Manual

       (b) The FSF's Back-Cover Text is:

	    You have freedom to copy and modify this GNU Manual, like GNU
	    software.  Copies published by the Free Software Foundation raise
	    funds for GNU development.



gcc-3.3				  2004-03-29				GCC(1)
GCC(1)				      GNU				GCC(1)



NNAAMMEE
       gcc - GNU project C and C++ compiler

SSYYNNOOPPSSIISS
       gcc [--cc|--SS|--EE] [--ssttdd==_s_t_a_n_d_a_r_d]
	   [--gg] [--ppgg] [--OO_l_e_v_e_l]
	   [--WW_w_a_r_n...] [--ppeeddaannttiicc]
	   [--II_d_i_r...] [--LL_d_i_r...]
	   [--DD_m_a_c_r_o[=_d_e_f_n]...] [--UU_m_a_c_r_o]
	   [--ff_o_p_t_i_o_n...] [--mm_m_a_c_h_i_n_e_-_o_p_t_i_o_n...]
	   [--oo _o_u_t_f_i_l_e] _i_n_f_i_l_e...

       Only the most useful options are listed here; see below for the remain-
       der.  gg++++ accepts mostly the same options as ggcccc.

       Note: In Apple's version of GCC, both cccc and ggcccc are actually symbolic
       links to ggcccc--33..33, while cc++++ and gg++++ are links to gg++++--33..33, unless the
       _gg_cc_cc____ss_ee_ll_ee_cc_tt((11)) command has been used to point them at another compiler
       version.

       Note that Apple's GCC includes a number of extensions to standard GCC
       (flagged below with ``APPLE ONLY''), and that not all generic GCC
       options are available or supported on Darwin / Mac OS X.	 In particu-
       lar, Apple does not currently support the compilation of Fortran, Ada,
       or Java, although there are third parties who have made these work.

DDEESSCCRRIIPPTTIIOONN
       When you invoke GCC, it normally does preprocessing, compilation,
       assembly and linking.  The ``overall options'' allow you to stop this
       process at an intermediate stage.  For example, the --cc option says not
       to run the linker.  Then the output consists of object files output by
       the assembler.

       Other options are passed on to one stage of processing.	Some options
       control the preprocessor and others the compiler itself.	 Yet other
       options control the assembler and linker; most of these are not docu-
       mented here, since you rarely need to use any of them.

       Most of the command line options that you can use with GCC are useful
       for C programs; when an option is only useful with another language
       (usually C++), the explanation says so explicitly.  If the description
       for a particular option does not mention a source language, you can use
       that option with all supported languages.

       The ggcccc program accepts options and file names as operands.  Many
       options have multi-letter names; therefore multiple single-letter
       options may _n_o_t be grouped: --ddrr is very different from --dd --rr.

       You can mix options and other arguments.	 For the most part, the order
       you use doesn't matter.	Order does matter when you use several options
       of the same kind; for example, if you specify --LL more than once, the
       directories are searched in the order specified.

       Many options have long names starting with --ff or with --WW---for example,
       --ffffoorrccee--mmeemm, --ffssttrreennggtthh--rreedduuccee, --WWffoorrmmaatt and so on.  Most of these have
       both positive and negative forms; the negative form of --ffffoooo would be
       --ffnnoo--ffoooo.  This manual documents only one of these two forms, whichever
       one is not the default.

OOPPTTIIOONNSS
       OOppttiioonn SSuummmmaarryy

       Here is a summary of all the options, grouped by type.  Explanations
       are in the following sections.

       _O_v_e_r_a_l_l _O_p_t_i_o_n_s
	   --cc  --SS  --EE  --oo _f_i_l_e	--ppiippee  --ppaassss--eexxiitt--ccooddeess	 --xx _l_a_n_g_u_a_g_e --OObbjjCC
	   ((AAPPPPLLEE OONNLLYY)) --OObbjjCC++++ ((AAPPPPLLEE OONNLLYY)) --aarrcchh _a_r_c_h ((AAPPPPLLEE OONNLLYY)) --vv	 --######
	   ----hheellpp  ----ttaarrggeett--hheellpp  ----vveerrssiioonn

       _C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --aannssii  --ssttdd==_s_t_a_n_d_a_r_d	 --aauuxx--iinnffoo _f_i_l_e_n_a_m_e --ffaallttiivveecc ((AAPPPPLLEE OONNLLYY))
	   --ffaassmm--bblloocckkss ((AAPPPPLLEE OONNLLYY)) --ffnnoo--aassmm --ffnnoo--bbuuiillttiinn --ffnnoo--bbuuiillttiinn--_f_u_n_c_-
	   _t_i_o_n --ffhhoosstteedd  --ffffrreeeessttaannddiinngg  --ffmmss--eexxtteennssiioonnss --ttrriiggrraapphhss
	   --nnoo--iinntteeggrraatteedd--ccpppp  --ttrraaddiittiioonnaall  --ttrraaddiittiioonnaall--ccpppp --ffaallllooww--ssiinn--
	   ggllee--pprreecciissiioonn  --ffccoonndd--mmiissmmaattcchh --ffccoonnssttaanntt--ccffssttrriinnggss ((AAPPPPLLEE OONNLLYY))
	   --ffppcchh--pprreepprroocceessss ((AAPPPPLLEE OONNLLYY)) --ffssiiggnneedd--bbiittffiieellddss  --ffssiiggnneedd--cchhaarr
	   --ffuunnssiiggnneedd--bbiittffiieellddss	 --ffuunnssiiggnneedd--cchhaarr --ffppaassccaall--ssttrriinnggss ((AAPPPPLLEE OONNLLYY))
	   --ffccooaalleessccee ((AAPPPPLLEE OONNLLYY)) --ffwweeaakk--ccooaalleesscceedd ((AAPPPPLLEE OONNLLYY)) --WWnnoo--##wwaarrnn--
	   iinnggss ((AAPPPPLLEE OONNLLYY)) --WWeexxttrraa--ttookkeennss ((AAPPPPLLEE OONNLLYY)) --WWpprraaggmmaa--oonnccee ((AAPPPPLLEE
	   OONNLLYY)) --WWnneewwlliinnee--eeooff ((AAPPPPLLEE OONNLLYY)) --WWnnoo--aallttiivveecc--lloonngg--ddeepprreeccaatteedd
	   ((AAPPPPLLEE OONNLLYY)) --ffwwrriittaabbllee--ssttrriinnggss

       _C_+_+ _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --ffaabbii--vveerrssiioonn==_n --ffnnoo--aacccceessss--ccoonnttrrooll	--ffcchheecckk--nneeww --ffccoonnsseerrvvee--ssppaaccee
	   --ffnnoo--ccoonnsstt--ssttrriinnggss  --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss --ffnnoo--eelliiddee--ccoonnssttrruucc--
	   ttoorrss --ffnnoo--eennffoorrccee--eehh--ssppeeccss  --ffeexxtteerrnnaall--tteemmppllaatteess --ffaalltt--eexxtteerr--
	   nnaall--tteemmppllaatteess --ffffoorr--ssccooppee  --ffnnoo--ffoorr--ssccooppee  --ffnnoo--ggnnuu--kkeeyywwoorrddss
	   --ffnnoo--iimmpplliicciitt--tteemmppllaatteess --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess --ffnnoo--iimmppllee--
	   mmeenntt--iinnlliinneess --ffiinnddiirreecctt--vviirrttuuaall--ccaallllss ((AAPPPPLLEE OONNLLYY)) --ffaappppllee--kkeexxtt
	   ((AAPPPPLLEE OONNLLYY)) --ffccooaalleessccee--tteemmppllaatteess ((AAPPPPLLEE OONNLLYY)) --ffmmss--eexxtteennssiioonnss
	   --ffnnoo--nnoonnaannssii--bbuuiillttiinnss  --ffnnoo--ooppeerraattoorr--nnaammeess --ffnnoo--ooppttiioonnaall--ddiiaaggss
	   --ffppeerrmmiissssiivvee --ffrreeppoo	--ffnnoo--rrttttii  --ffssttaattss  --fftteemmppllaattee--ddeepptthh--_n
	   --ffuussee--ccxxaa--aatteexxiitt  --ffvvttaabbllee--ggcc  --ffnnoo--wweeaakk  --nnoossttddiinncc++++
	   --ffnnoo--ddeeffaauulltt--iinnlliinnee --WWaabbii --WWccttoorr--ddttoorr--pprriivvaaccyy --WWnnoonn--vviirrttuuaall--ddttoorr
	   --WWrreeoorrddeerr --WWeeffffcc++++  --WWnnoo--ddeepprreeccaatteedd --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd
	   --WWoolldd--ssttyyllee--ccaasstt --WWoovveerrllooaaddeedd--vviirrttuuaall  --WWnnoo--ppmmff--ccoonnvveerrssiioonnss
	   --WWssiiggnn--pprroommoo	 --WWssyynntthh

       _O_b_j_e_c_t_i_v_e_-_C _L_a_n_g_u_a_g_e _O_p_t_i_o_n_s
	   --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e --ffggnnuu--rruunnttiimmee  --ffnneexxtt--rruunnttiimmee
	   --ffnnoo--nniill--rreecceeiivveerrss ((AAPPPPLLEE OONNLLYY)) --ffoobbjjcc--eexxcceeppttiioonnss ((AAPPPPLLEE OONNLLYY))
	   --ffrreeppllaaccee--oobbjjcc--ccllaasssseess ((AAPPPPLLEE OONNLLYY)) --ffzzeerroo--lliinnkk ((AAPPPPLLEE OONNLLYY))
	   --ggeenn--ddeeccllss --WWnnoo--pprroottooccooll  --WWsseelleeccttoorr --WWuunnddeeccllaarreedd--sseelleeccttoorr

       _L_a_n_g_u_a_g_e _I_n_d_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
	   --ffmmeessssaaggee--lleennggtthh==_n --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==[oonnccee|eevveerryy--lliinnee]

       _W_a_r_n_i_n_g _O_p_t_i_o_n_s
	   --ffssyynnttaaxx--oonnllyy  --ppeeddaannttiicc  --ppeeddaannttiicc--eerrrroorrss --ww  --WW  --WWaallll --WWaaggggrree--
	   ggaattee--rreettuurrnn --WWccaasstt--aalliiggnn  --WWccaasstt--qquuaall  --WWcchhaarr--ssuubbssccrriippttss  --WWccoommmmeenntt
	   --WWccoonnvveerrssiioonn	 --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
	   --WWnnoo--ddiivv--bbyy--zzeerroo  --WWeerrrroorr --WWffllooaatt--eeqquuaall  --WWffoorrmmaatt  --WWffoorrmmaatt==22
	   --WWffoorrmmaatt--nnoonnlliitteerraall	--WWffoorrmmaatt--sseeccuurriittyy --WWiimmpplliicciitt  --WWiimmpplliicciitt--iinntt
	   --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn --WWeerrrroorr--iimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraa--
	   ttiioonn --WWiimmppoorrtt  --WWiinnlliinnee  --WWiinnvvaalliidd--ppcchh  --WWnnoo--eennddiiff--llaabbeellss
	   --WWnnoo--iinnvvaalliidd--ooffffsseettooff ((AAPPPPLLEE OONNLLYY)) --WWllaarrggeerr--tthhaann--_l_e_n	 --WWlloonngg--lloonngg
	   --WWnnoo--lloonngg--ddoouubbllee ((AAPPPPLLEE OONNLLYY)) --WWmmaaiinn	 --WWmmiissssiinngg--bbrraacceess --WWmmiissss--
	   iinngg--ffoorrmmaatt--aattttrriibbuuttee	 --WWmmiissssiinngg--nnoorreettuurrnn --WWmmoosstt ((AAPPPPLLEE OONNLLYY))
	   --WWnnoo--mmuullttiicchhaarr  --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss  --WWnnoo--ffoorrmmaatt--yy22kk --WWnnoo--iimmppoorrtt
	   --WWnnoonnnnuullll  --WWppaacckkeedd	--WWppaaddddeedd --WWppaarreenntthheesseess	--WWppooiinntteerr--aarriitthh	 --WWrree--
	   dduunnddaanntt--ddeeccllss --WWrreettuurrnn--ttyyppee	--WWsseeqquueennccee--ppooiinntt  --WWsshhaaddooww --WWssiiggnn--ccoomm--
	   ppaarree	 --WWssttrriicctt--aalliiaassiinngg --WWsswwiittcchh  --WWsswwiittcchh--ddeeffaauulltt --WWsswwiittcchh--eennuumm
	   --WWssyysstteemm--hheeaaddeerrss --WWttrriiggrraapphhss	 --WWuunnddeeff  --WWuunniinniittiiaalliizzeedd --WWuunn--
	   kknnoowwnn--pprraaggmmaass  --WWuunnrreeaacchhaabbllee--ccooddee --WWuunnuusseedd  --WWuunnuusseedd--ffuunnccttiioonn
	   --WWuunnuusseedd--llaabbeell  --WWuunnuusseedd--ppaarraammeetteerr --WWuunnuusseedd--vvaalluuee  --WWuunnuusseedd--vvaarrii--
	   aabbllee	 --WWwwrriittee--ssttrriinnggss

       _C_-_o_n_l_y _W_a_r_n_i_n_g _O_p_t_i_o_n_s
	   --WWbbaadd--ffuunnccttiioonn--ccaasstt	--WWmmiissssiinngg--ddeeccllaarraattiioonnss --WWmmiissssiinngg--pprroottoottyyppeess
	   --WWnneesstteedd--eexxtteerrnnss --WWssttrriicctt--pprroottoottyyppeess	 --WWttrraaddiittiioonnaall

       _D_e_b_u_g_g_i_n_g _O_p_t_i_o_n_s
	   --dd_l_e_t_t_e_r_s  --dduummppssppeeccss  --dduummppmmaacchhiinnee	--dduummppvveerrssiioonn --ffdduummpp--uunnnnuummbbeerreedd
	   --ffdduummpp--ttrraannssllaattiioonn--uunniitt[--_n] --ffdduummpp--ccllaassss--hhiieerraarrcchhyy[--_n]
	   --ffdduummpp--ttrreeee--oorriiggiinnaall[--_n] --ffdduummpp--ttrreeee--ooppttiimmiizzeedd[--_n]
	   --ffdduummpp--ttrreeee--iinnlliinneedd[--_n] --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss  --ffmmeemm--rreeppoorrtt
	   --ffpprrooffiillee--aarrccss  --ffsscchheedd--vveerrbboossee==_n --fftteesstt--ccoovveerraaggee  --ffttiimmee--rreeppoorrtt --gg
	   --gg_l_e_v_e_l  --ggccooffff  --ggddwwaarrff  --ggddwwaarrff--11	--ggddwwaarrff--11++  --ggddwwaarrff--22 --ggggddbb
	   --ggssttaabbss  --ggssttaabbss++  --ggvvmmss  --ggxxccooffff  --ggxxccooffff++ --pp  --ppgg
	   --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y  --pprriinntt--lliibbggcccc--ffiillee--nnaammee
	   --pprriinntt--mmuullttii--ddiirreeccttoorryy  --pprriinntt--mmuullttii--lliibb --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
	   --pprriinntt--sseeaarrcchh--ddiirrss  --QQ --ssaavvee--tteemmppss  --ttiimmee --ffssaavvee--rreeppoossiittoorryy==_l_o_c_a_-
	   _t_i_o_n --ggrreeppoossiittoorryy

       _O_p_t_i_m_i_z_a_t_i_o_n _O_p_t_i_o_n_s
	   --ffaalliiggnn--ffuunnccttiioonnss==_n	--ffaalliiggnn--jjuummppss==_n --ffaalliiggnn--llaabbeellss==_n
	   --ffaalliiggnn--llooooppss==_n --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==_n --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==_n
	   --ffbbrraanncchh--pprroobbaabbiilliittiieess  --ffccaalllleerr--ssaavveess --ffccpprroopp--rreeggiisstteerrss --ffccssee--ffooll--
	   llooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss	 --ffddaattaa--sseeccttiioonnss --ffddeellaayyeedd--bbrraanncchh
	   --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss  --ffffaasstt--mmaatthh
	   --ffffllooaatt--ssttoorree --ffffoorrccee--aaddddrr  --ffffoorrccee--mmeemm  --ffffuunnccttiioonn--sseeccttiioonnss --ffggccssee
	   --ffggccssee--llmm  --ffggccssee--ssmm --fflloooopp--ooppttiimmiizzee --ffccrroossssjjuummppiinngg --ffiiff--ccoonnvveerrssiioonn
	   --ffiiff--ccoonnvveerrssiioonn22 --ffiinnlliinnee--ffuunnccttiioonnss	--ffiinnlliinnee--lliimmiitt==_n
	   --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss --ffkkeeeepp--ssttaattiicc--ccoonnssttss	 --ffmmeerrggee--ccoonnssttaannttss
	   --ffmmeerrggee--aallll--ccoonnssttaannttss --ffmmoovvee--aallll--mmoovvaabblleess  --ffnneeww--rraa
	   --ffnnoo--bbrraanncchh--ccoouunntt--rreegg --ffnnoo--ddeeffaauulltt--iinnlliinnee  --ffnnoo--ddeeffeerr--ppoopp
	   --ffnnoo--ffuunnccttiioonn--ccssee  --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy --ffnnoo--iinnlliinnee
	   --ffnnoo--mmaatthh--eerrrrnnoo  --ffnnoo--ppeeeepphhoollee  --ffnnoo--ppeeeepphhoollee22 --ffuunnssaaffee--mmaatthh--ooppttii--
	   mmiizzaattiioonnss --ffffiinniittee--mmaatthh--oonnllyy --ffnnoo--ttrraappppiinngg--mmaatthh --ffnnoo--zzeerroo--iinniittiiaall--
	   iizzeedd--iinn--bbssss --ffoommiitt--ffrraammee--ppooiinntteerr  --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee --ffooppttii--
	   mmiizzee--ssiibblliinngg--ccaallllss  --ffpprreeffeettcchh--lloooopp--aarrrraayyss --ffrreedduuccee--aallll--ggiivvss --ffrreegg--
	   mmoovvee	 --ffrreennaammee--rreeggiisstteerrss --ffrreeoorrddeerr--bblloocckkss --ffrreeoorrddeerr--ffuunnccttiioonnss --ffrree--
	   rruunn--ccssee--aafftteerr--lloooopp  --ffrreerruunn--lloooopp--oopptt --ffsscchheedduullee--iinnssnnss  --ffsscchheedd--
	   uullee--iinnssnnss22 --ffnnoo--sscchheedd--iinntteerrbblloocckk  --ffnnoo--sscchheedd--ssppeecc
	   --ffsscchheedd--ssppeecc--llooaadd --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss  --ffssiiggnnaalliinngg--nnaannss
	   --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt	--ffssssaa --ffssssaa--ccccpp --ffssssaa--ddccee
	   --ffssttrreennggtthh--rreedduuccee  --ffssttrriicctt--aalliiaassiinngg	 --ffttrraacceerr --fftthhrreeaadd--jjuummppss --ffuunn--
	   rroollll--aallll--llooooppss  --ffuunnrroollll--llooooppss ----ppaarraamm _n_a_m_e==_v_a_l_u_e --OO	 --OO00  --OO11  --OO22
	   --OO33	--OOss --ffaasstt ((AAPPPPLLEE OONNLLYY))

       _P_r_e_p_r_o_c_e_s_s_o_r _O_p_t_i_o_n_s
	   --$$  --AA_q_u_e_s_t_i_o_n==_a_n_s_w_e_r  --AA--_q_u_e_s_t_i_o_n[==_a_n_s_w_e_r] --CC  --ddDD	--ddII  --ddMM  --ddNN
	   --DD_m_a_c_r_o[==_d_e_f_n]  --EE  --HH --iiddiirraafftteerr _d_i_r --iinncclluuddee _f_i_l_e	--iimmaaccrrooss _f_i_l_e
	   --iipprreeffiixx _f_i_l_e  --iiwwiitthhpprreeffiixx _d_i_r --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r  --iissyysstteemm
	   _d_i_r --MM  --MMMM	--MMFF  --MMGG  --MMPP  --MMQQ  --MMTT	 --nnoossttddiinncc  --PP	--rreemmaapp --ddeeppeenn--
	   ddeennccyy--ffiillee ((AAPPPPLLEE OONNLLYY)) --ttrriiggrraapphhss  --uunnddeeff  --UU_m_a_c_r_o	--WWpp,,_o_p_t_i_o_n

       _A_s_s_e_m_b_l_e_r _O_p_t_i_o_n
	   --WWaa,,_o_p_t_i_o_n

       _L_i_n_k_e_r _O_p_t_i_o_n_s
	    _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e  --ll_l_i_b_r_a_r_y --nnoossttaarrttffiilleess  --nnooddeeffaauullttlliibbss  --nnoosstt--
	   ddlliibb	 --nnoo--cc++++ffiilltt ((AAPPPPLLEE OONNLLYY)) --ss  --ssttaattiicc  --ssttaattiicc--lliibbggcccc  --sshhaarreedd
	   --sshhaarreedd--lliibbggcccc  --ssyymmbboolliicc --WWll,,_o_p_t_i_o_n	 --XXlliinnkkeerr _o_p_t_i_o_n --uu _s_y_m_b_o_l

       _D_i_r_e_c_t_o_r_y _O_p_t_i_o_n_s
	   --BB_p_r_e_f_i_x  --II_d_i_r  --II-- --FF_d_i_r ((AAPPPPLLEE OONNLLYY)) --LL_d_i_r  --ssppeeccss==_f_i_l_e

       _T_a_r_g_e_t _O_p_t_i_o_n_s
	   --VV _v_e_r_s_i_o_n --bb _m_a_c_h_i_n_e

       _M_a_c_h_i_n_e _D_e_p_e_n_d_e_n_t _O_p_t_i_o_n_s
	   _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

	   --mmccppuu==_c_p_u_-_t_y_p_e --mmttuunnee==_c_p_u_-_t_y_p_e --mmppoowweerr  --mmnnoo--ppoowweerr  --mmppoowweerr22
	   --mmnnoo--ppoowweerr22 --mmppoowweerrppcc  --mmppoowweerrppcc6644  --mmnnoo--ppoowweerrppcc --mmaallttiivveecc
	   --mmnnoo--aallttiivveecc --mmppoowweerrppcc--ggppoopptt	 --mmnnoo--ppoowweerrppcc--ggppoopptt --mmppoowweerrppcc--ggffxxoopptt
	   --mmnnoo--ppoowweerrppcc--ggffxxoopptt --mmnneeww--mmnneemmoonniiccss	--mmoolldd--mmnneemmoonniiccss --mmffuullll--ttoocc
	   --mmmmiinniimmaall--ttoocc  --mmnnoo--ffpp--iinn--ttoocc  --mmnnoo--ssuumm--iinn--ttoocc --mm6644	--mm3322
	   --mmxxll--ccaallll  --mmnnoo--xxll--ccaallll  --mmppee --mmaalliiggnn--mmaacc6688kk ((AAPPPPLLEE OONNLLYY))
	   --mmaalliiggnn--ppoowweerr ((AAPPPPLLEE OONNLLYY)) --mmaalliiggnn--nnaattuurraall ((AAPPPPLLEE OONNLLYY))
	   --mmssoofftt--ffllooaatt	 --mmhhaarrdd--ffllooaatt  --mmmmuullttiippllee  --mmnnoo--mmuullttiippllee --mmssttrriinngg
	   --mmnnoo--ssttrriinngg	--mmuuppddaattee  --mmnnoo--uuppddaattee --mmffuusseedd--mmaadddd  --mmnnoo--ffuusseedd--mmaadddd
	   --mmbbiitt--aalliiggnn	--mmnnoo--bbiitt--aalliiggnn --mmssttrriicctt--aalliiggnn  --mmnnoo--ssttrriicctt--aalliiggnn
	   --mmrreellooccaattaabbllee --mmnnoo--rreellooccaattaabbllee  --mmrreellooccaattaabbllee--lliibb  --mmnnoo--rreellooccaatt--
	   aabbllee--lliibb --mmttoocc  --mmnnoo--ttoocc --mmlliittttllee  --mmlliittttllee--eennddiiaann  --mmbbiigg
	   --mmbbiigg--eennddiiaann --mmddyynnaammiicc--nnoo--ppiicc ((AAPPPPLLEE OONNLLYY)) --mmlloonngg--bbrraanncchh ((AAPPPPLLEE
	   OONNLLYY)) --mmccaallll--aaiixx --mmccaallll--ssyyssvv --mmccaallll--nneettbbssdd --mmaaiixx--ssttrruucctt--rreettuurrnn
	   --mmssvvrr44--ssttrruucctt--rreettuurrnn --mmaabbii==aallttiivveecc --mmaabbii==nnoo--aallttiivveecc --mmaabbii==ssppee
	   --mmaabbii==nnoo--ssppee --mmiisseell==yyeess --mmiisseell==nnoo --mmpprroottoottyyppee  --mmnnoo--pprroottoottyyppee --mmssiimm
	   --mmmmvvmmee  --mmaaddss  --mmyyeelllloowwkknniiffee	 --mmeemmbb --mmssddaattaa --mmssddaattaa==_o_p_t  --mmvvxxwwoorrkkss
	   --mmwwiinnddiissss --GG _n_u_m --pptthhrreeaadd

	   _D_a_r_w_i_n _O_p_t_i_o_n_s

	   --aallll__llooaadd --aalllloowwaabbllee__cclliieenntt --aarrcchh --aarrcchh__eerrrroorrss__ffaattaall --aarrcchh__oonnllyy
	   --bbiinndd__aatt__llooaadd --bbuunnddllee --bbuunnddllee__llooaaddeerr --cclliieenntt__nnaammee --ccoommppaattiibbiill--
	   iittyy__vveerrssiioonn --ccuurrrreenntt__vveerrssiioonn --ddeeppeennddeennccyy--ffiillee --ddyylliibb__ffiillee
	   --ddyylliinnkkeerr__iinnssttaallll__nnaammee --ddyynnaammiicc --ddyynnaammiicclliibb --eexxppoorrtteedd__ssyymmbboollss__lliisstt
	   --ffiilleelliisstt --ffllaatt__nnaammeessppaaccee --ffoorrccee__ccppuussuubbttyyppee__AALLLL --ffoorrccee__ffllaatt__nnaammeess--
	   ppaaccee --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess --iimmaaggee__bbaassee --iinniitt --iinnssttaallll__nnaammee
	   --kkeeeepp__pprriivvaattee__eexxtteerrnnss --mmuullttii__mmoodduullee --mmuullttiippllyy__ddeeffiinneedd --mmuullttii--
	   ppllyy__ddeeffiinneedd__uunnuusseedd --nnooaallll__llooaadd --nnoommuullttiiddeeffss --nnoopprreebbiinndd
	   --nnoosseegglliinnkkeeddiitt --ppaaggeezzeerroo__ssiizzee --pprreebbiinndd --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodd--
	   uulleess --pprriivvaattee__bbuunnddllee --rreeaadd__oonnllyy__rreellooccss --sseeccttaalliiggnn --sseeccttoobbjjeeccttssyymm--
	   bboollss --wwhhyyllooaadd --sseegg11aaddddrr --sseeccttccrreeaattee --sseeccttoobbjjeeccttssyymmbboollss --sseeccttoorrddeerr
	   --sseegg__aaddddrr__ttaabbllee --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee --sseegglliinnkkeeddiitt --sseeggpprroott
	   --sseeggss__rreeaadd__oonnllyy__aaddddrr --sseeggss__rreeaadd__wwrriittee__aaddddrr --ssiinnggllee__mmoodduullee --ssttaattiicc
	   --ssuubb__lliibbrraarryy --ssuubb__uummbbrreellllaa --ttwwoolleevveell__nnaammeessppaaccee --uummbbrreellllaa --uunnddeeffiinneedd
	   --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess --wwhhaattssllooaaddeedd

	   _i_3_8_6 _a_n_d _x_8_6_-_6_4 _O_p_t_i_o_n_s

	   --mmccppuu==_c_p_u_-_t_y_p_e  --mmaarrcchh==_c_p_u_-_t_y_p_e --mmffppmmaatthh==_u_n_i_t --mmaassmm==_d_i_a_l_e_c_t
	   --mmnnoo--ffaannccyy--mmaatthh--338877 --mmnnoo--ffpp--rreett--iinn--338877  --mmssoofftt--ffllooaatt	 --mmssvvrr33--sshhlliibb
	   --mmnnoo--wwiiddee--mmuullttiippllyy  --mmrrttdd  --mmaalliiggnn--ddoouubbllee --mmpprreeffeerrrreedd--ssttaacckk--bboouunndd--
	   aarryy==_n_u_m --mmmmmmxx  --mmssssee --mmssssee22 --mm33ddnnooww --mmtthhrreeaaddss  --mmnnoo--aalliiggnn--ssttrriinnggooppss
	   --mmiinnlliinnee--aallll--ssttrriinnggooppss --mmppuusshh--aarrggss  --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
	   --mm112288bbiitt--lloonngg--ddoouubbllee --mm9966bbiitt--lloonngg--ddoouubbllee  --mmrreeggppaarrmm==_n_u_m
	   --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr --mmnnoo--rreedd--zzoonnee --mmccmmooddeell==_c_o_d_e_-_m_o_d_e_l --mm3322
	   --mm6644

       _C_o_d_e _G_e_n_e_r_a_t_i_o_n _O_p_t_i_o_n_s
	   --ffccaallll--ssaavveedd--_r_e_g  --ffccaallll--uusseedd--_r_e_g --ffffiixxeedd--_r_e_g --ffeexxcceeppttiioonnss
	   --ffnnoonn--ccaallll--eexxcceeppttiioonnss  --ffuunnwwiinndd--ttaabblleess --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
	   --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee  --ffiinnssttrruummeenntt--ffuunnccttiioonnss --ffnnoo--ccoommmmoonn
	   --ffnnoo--iiddeenntt  --ffnnoo--ggnnuu--lliinnkkeerr --ffppcccc--ssttrruucctt--rreettuurrnn  --ffppiicc  --ffPPIICC
	   --ffrreegg--ssttrruucctt--rreettuurrnn	--ffsshhaarreedd--ddaattaa  --ffsshhoorrtt--eennuummss --ffsshhoorrtt--ddoouubbllee
	   --ffsshhoorrtt--wwcchhaarr --ffvvoollaattiillee --ffvvoollaattiillee--gglloobbaall  --ffvvoollaattiillee--ssttaattiicc
	   --ffvveerrbboossee--aassmm  --ffppaacckk--ssttrruucctt	 --ffssttaacckk--cchheecckk --ffssttaacckk--lliimmiitt--rreeggiiss--
	   tteerr==_r_e_g  --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m --ffaarrgguummeenntt--aalliiaass  --ffaarrgguu--
	   mmeenntt--nnooaalliiaass --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall  --fflleeaaddiinngg--uunnddeerrssccoorree
	   --ffttllss--mmooddeell==_m_o_d_e_l --ffttrraappvv --ffbboouunnddss--cchheecckk

       OOppttiioonnss CCoonnttrroolllliinngg tthhee KKiinndd ooff OOuuttppuutt

       Compilation can involve up to four stages: preprocessing, compilation
       proper, assembly and linking, always in that order.  The first three
       stages apply to an individual source file, and end by producing an
       object file; linking combines all the object files (those newly com-
       piled, and those specified as input) into an executable file.

       For any given input file, the file name suffix determines what kind of
       compilation is done:

       _f_i_l_e..cc
	   C source code which must be preprocessed.

       _f_i_l_e..ii
	   C source code which should not be preprocessed.

       _f_i_l_e..iiii
	   C++ source code which should not be preprocessed.

       _f_i_l_e..mm
	   Objective-C source code.  Note that you must link with the library
	   _l_i_b_o_b_j_c_._a to make an Objective-C program work.

       _f_i_l_e..mmii
	   Objective-C source code which should not be preprocessed.

       _f_i_l_e..hh
	   C or C++ header file to be turned into a precompiled header.

       _f_i_l_e..cccc
       _f_i_l_e..ccpp
       _f_i_l_e..ccxxxx
       _f_i_l_e..ccpppp
       _f_i_l_e..cc++++
       _f_i_l_e..CC
	   C++ source code which must be preprocessed.	Note that in ..ccxxxx, the
	   last two letters must both be literally xx.  Likewise, ..CC refers to
	   a literal capital C.

       _f_i_l_e..mmmm
       _f_i_l_e..MM
	   Objective-C++ source code which must be preprocessed.  (APPLE ONLY)

       _f_i_l_e..mmiiii
	   Objective-C++ source code which should not be preprocessed.	(APPLE
	   ONLY)

       _f_i_l_e..hhhh
       _f_i_l_e..HH
	   C++ header file to be turned into a precompiled header.

       _f_i_l_e..ff
       _f_i_l_e..ffoorr
       _f_i_l_e..FFOORR
	   Fortran source code which should not be preprocessed.

       _f_i_l_e..FF
       _f_i_l_e..ffpppp
       _f_i_l_e..FFPPPP
	   Fortran source code which must be preprocessed (with the tradi-
	   tional preprocessor).

       _f_i_l_e..rr
	   Fortran source code which must be preprocessed with a RATFOR pre-
	   processor (not included with GCC).

       _f_i_l_e..aaddss
	   Ada source code file which contains a library unit declaration (a
	   declaration of a package, subprogram, or generic, or a generic
	   instantiation), or a library unit renaming declaration (a package,
	   generic, or subprogram renaming declaration).  Such files are also
	   called _s_p_e_c_s.

       _f_i_l_e..aaddbb
	   Ada source code file containing a library unit body (a subprogram
	   or package body).  Such files are also called _b_o_d_i_e_s.

       _f_i_l_e..ss
	   Assembler code.  Apple's version of GCC runs the preprocessor on
	   these files as well as those ending in ..SS.

       _f_i_l_e..SS
	   Assembler code which must be preprocessed.

       _o_t_h_e_r
	   An object file to be fed straight into linking.  Any file name with
	   no recognized suffix is treated this way.

       You can specify the input language explicitly with the --xx option:

       --xx _l_a_n_g_u_a_g_e
	   Specify explicitly the _l_a_n_g_u_a_g_e for the following input files
	   (rather than letting the compiler choose a default based on the
	   file name suffix).  This option applies to all following input
	   files until the next --xx option.  Possible values for _l_a_n_g_u_a_g_e are:

		   c  c-header	cpp-output
		   c++	c++-header  c++-cpp-output
		   objective-c	objective-c-header  objc-cpp-output
		   objective-c++ (APPLE ONLY) objective-c++-header (APPLE ONLY)
		   assembler  assembler-with-cpp
		   ada
		   f77	f77-cpp-input  ratfor
		   java
		   treelang

       --xx nnoonnee
	   Turn off any specification of a language, so that subsequent files
	   are handled according to their file name suffixes (as they are if
	   --xx has not been used at all).

       --OObbjjCC
       --OObbjjCC++++
	   These are similar in effect to --xx oobbjjeeccttiivvee--cc and --xx oobbjjeeccttiivvee--cc++++,
	   but also cause the --OObbjjCC flag to be passed to _ll_dd((11)), causing static
	   archive libraries that define an Objective-C class or category to
	   be linked in in their entirety. (APPLE ONLY)

       --aarrcchh _a_r_c_h
	   Compile for the specified target architecture _a_r_c_h.	The allowable
	   values are ii338866 and ppppcc.  Multiple options work, and direct the
	   compiler to produce ``fat'' binaries including object code for each
	   architecture specified with --aarrcchh.  This option only works if
	   assembler and libraries are available for each architecture speci-
	   fied. (APPLE ONLY)

       --ppaassss--eexxiitt--ccooddeess
	   Normally the ggcccc program will exit with the code of 1 if any phase
	   of the compiler returns a non-success return code.  If you specify
	   --ppaassss--eexxiitt--ccooddeess, the ggcccc program will instead return with numeri-
	   cally highest error produced by any phase that returned an error
	   indication.

       If you only want some of the stages of compilation, you can use --xx (or
       filename suffixes) to tell ggcccc where to start, and one of the options
       --cc, --SS, or --EE to say where ggcccc is to stop.  Note that some combinations
       (for example, --xx ccpppp--oouuttppuutt --EE) instruct ggcccc to do nothing at all.

       --cc  Compile or assemble the source files, but do not link.  The linking
	   stage simply is not done.  The ultimate output is in the form of an
	   object file for each source file.

	   By default, the object file name for a source file is made by
	   replacing the suffix ..cc, ..ii, ..ss, etc., with ..oo.

	   Unrecognized input files, not requiring compilation or assembly,
	   are ignored.

       --SS  Stop after the stage of compilation proper; do not assemble.	 The
	   output is in the form of an assembler code file for each non-assem-
	   bler input file specified.

	   By default, the assembler file name for a source file is made by
	   replacing the suffix ..cc, ..ii, etc., with ..ss.

	   Input files that don't require compilation are ignored.

       --EE  Stop after the preprocessing stage; do not run the compiler proper.
	   The output is in the form of preprocessed source code, which is
	   sent to the standard output.

	   Input files which don't require preprocessing are ignored.

       --oo _f_i_l_e
	   Place output in file _f_i_l_e.  This applies regardless to whatever
	   sort of output is being produced, whether it be an executable file,
	   an object file, an assembler file or preprocessed C code.

	   Since only one output file can be specified, it does not make sense
	   to use --oo when compiling more than one input file, unless you are
	   producing an executable file as output.

	   If --oo is not specified, the default is to put an executable file in
	   _a_._o_u_t, the object file for _s_o_u_r_c_e_._s_u_f_f_i_x in _s_o_u_r_c_e_._o, its assembler
	   file in _s_o_u_r_c_e_._s, and all preprocessed C source on standard output.

       --vv  Print (on standard error output) the commands executed to run the
	   stages of compilation.  Also print the version number of the com-
	   piler driver program and of the preprocessor and the compiler
	   proper.

       --######
	   Like --vv except the commands are not executed and all command argu-
	   ments are quoted.  This is useful for shell scripts to capture the
	   driver-generated command lines.

       --ppiippee
	   Use pipes rather than temporary files for communication between the
	   various stages of compilation.  This fails to work on some systems
	   where the assembler is unable to read from a pipe; but the GNU
	   assembler has no trouble.

       ----hheellpp
	   Print (on the standard output) a description of the command line
	   options understood by ggcccc.  If the --vv option is also specified then
	   ----hheellpp will also be passed on to the various processes invoked by
	   ggcccc, so that they can display the command line options they accept.
	   If the --WW option is also specified then command line options which
	   have no documentation associated with them will also be displayed.

       ----ttaarrggeett--hheellpp
	   Print (on the standard output) a description of target specific
	   command line options for each tool.

       ----vveerrssiioonn
	   Display the version number and copyrights of the invoked GCC.

       CCoommppiilliinngg CC++++ PPrrooggrraammss

       C++ source files conventionally use one of the suffixes ..CC, ..cccc, ..ccpppp,
       ..CCPPPP, ..cc++++, ..ccpp, or ..ccxxxx; C++ header files often use ..hhhh or ..HH; prepro-
       cessed C++ files use the suffix ..iiii.  GCC recognizes files with these
       names and compiles them as C++ programs even if you call the compiler
       the same way as for compiling C programs (usually with the name ggcccc).

       However, C++ programs often require class libraries as well as a com-
       piler that understands the C++ language---and under some circumstances,
       you might want to compile programs or header files from standard input,
       or otherwise without a suffix that flags them as C++ programs.  You
       might also like to precompile a C header file with a ..hh extension to be
       used in C++ compilations.  gg++++ is a program that calls GCC with the
       default language set to C++, and automatically specifies linking
       against the C++ library.	 On many systems, gg++++ is also installed with
       the name cc++++.

       When you compile C++ programs, you may specify many of the same com-
       mand-line options that you use for compiling programs in any language;
       or command-line options meaningful for C and related languages; or
       options that are meaningful only for C++ programs.

       OOppttiioonnss CCoonnttrroolllliinngg CC DDiiaalleecctt

       The following options control the dialect of C (or languages derived
       from C, such as C++ and Objective-C) that the compiler accepts:

       --aannssii
	   In C mode, support all ISO C90 programs.  In C++ mode, remove GNU
	   extensions that conflict with ISO C++.

	   This turns off certain features of GCC that are incompatible with
	   ISO C90 (when compiling C code), or of standard C++ (when compiling
	   C++ code), such as the "asm" and "typeof" keywords, and predefined
	   macros such as "unix" and "vax" that identify the type of system
	   you are using.  It also enables the undesirable and rarely used ISO
	   trigraph feature.  For the C compiler, it disables recognition of
	   C++ style //// comments as well as the "inline" keyword.

	   The alternate keywords "__asm__", "__extension__", "__inline__" and
	   "__typeof__" continue to work despite --aannssii.	 You would not want to
	   use them in an ISO C program, of course, but it is useful to put
	   them in header files that might be included in compilations done
	   with --aannssii.	Alternate predefined macros such as "__unix__" and
	   "__vax__" are also available, with or without --aannssii.

	   The --aannssii option does not cause non-ISO programs to be rejected
	   gratuitously.  For that, --ppeeddaannttiicc is required in addition to
	   --aannssii.

	   The macro "__STRICT_ANSI__" is predefined when the --aannssii option is
	   used.  Some header files may notice this macro and refrain from
	   declaring certain functions or defining certain macros that the ISO
	   standard doesn't call for; this is to avoid interfering with any
	   programs that might use these names for other things.

	   Functions which would normally be built in but do not have seman-
	   tics defined by ISO C (such as "alloca" and "ffs") are not built-in
	   functions with --aannssii is used.

       --ssttdd==
	   Determine the language standard.  This option is currently only
	   supported when compiling C or C++.  A value for this option must be
	   provided; possible values are

	   cc8899
	   iissoo99889999::11999900
	       ISO C90 (same as --aannssii).

	   iissoo99889999::119999440099
	       ISO C90 as modified in amendment 1.

	   cc9999
	   cc99xx
	   iissoo99889999::11999999
	   iissoo99889999::119999xx
	       ISO C99.	 Note that this standard is not yet fully supported;
	       see <hhttttpp::////ggcccc..ggnnuu..oorrgg//ggcccc--33..33//cc9999ssttaattuuss..hhttmmll> for more infor-
	       mation.	The names cc99xx and iissoo99889999::119999xx are deprecated.

	   ggnnuu8899
	       Default, ISO C90 plus GNU extensions (including some C99 fea-
	       tures).

	   ggnnuu9999
	   ggnnuu99xx
	       ISO C99 plus GNU extensions.  When ISO C99 is fully implemented
	       in GCC, this will become the default.  The name ggnnuu99xx is depre-
	       cated.

	   cc++++9988
	       The 1998 ISO C++ standard plus amendments.

	   ggnnuu++++9988
	       The same as --ssttdd==cc++++9988 plus GNU extensions.  This is the
	       default for C++ code.

	   Even when this option is not specified, you can still use some of
	   the features of newer standards in so far as they do not conflict
	   with previous C standards.  For example, you may use "__restrict__"
	   even when --ssttdd==cc9999 is not specified.

	   The --ssttdd options specifying some version of ISO C have the same
	   effects as --aannssii, except that features that were not in ISO C90 but
	   are in the specified version (for example, //// comments and the
	   "inline" keyword in ISO C99) are not disabled.

       --aauuxx--iinnffoo _f_i_l_e_n_a_m_e
	   Output to the given filename prototyped declarations for all func-
	   tions declared and/or defined in a translation unit, including
	   those in header files.  This option is silently ignored in any lan-
	   guage other than C.

	   Besides declarations, the file indicates, in comments, the origin
	   of each declaration (source file and line), whether the declaration
	   was implicit, prototyped or unprototyped (II, NN for new or OO for
	   old, respectively, in the first character after the line number and
	   the colon), and whether it came from a declaration or a definition
	   (CC or FF, respectively, in the following character).	In the case of
	   function definitions, a K&R-style list of arguments followed by
	   their declarations is also provided, inside comments, after the
	   declaration.

       --ffaallttiivveecc
	   Enable the AltiVec language extensions, as defined in Motorola's
	   AltiVec PIM.	 This includes the recognition of "vector" and "pixel"
	   as (context-dependent) keywords, the definition of built-in func-
	   tions such as "vec_add", and other extensions.  Note that unlike
	   the option --mmaallttiivveecc, the extensions do not require the inclusion
	   of any special header files. (APPLE ONLY)

       --ffaassmm--bblloocckkss
	   Enable the use of blocks and entire functions of assembly code
	   within a C or C++ file.  The syntax follows that used in CodeWar-
	   rior. (APPLE ONLY)

       --ffnnoo--aassmm
	   Do not recognize "asm", "inline" or "typeof" as a keyword, so that
	   code can use these words as identifiers.  You can use the keywords
	   "__asm__", "__inline__" and "__typeof__" instead.  --aannssii implies
	   --ffnnoo--aassmm.

	   In C++, this switch only affects the "typeof" keyword, since "asm"
	   and "inline" are standard keywords.	You may want to use the
	   --ffnnoo--ggnnuu--kkeeyywwoorrddss flag instead, which has the same effect.  In C99
	   mode (--ssttdd==cc9999 or --ssttdd==ggnnuu9999), this switch only affects the "asm"
	   and "typeof" keywords, since "inline" is a standard keyword in ISO
	   C99.

       --ffnnoo--bbuuiillttiinn
       --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n
	   Don't recognize built-in functions that do not begin with
	   ____bbuuiillttiinn__ as prefix.

	   GCC normally generates special code to handle certain built-in
	   functions more efficiently; for instance, calls to "alloca" may
	   become single instructions that adjust the stack directly, and
	   calls to "memcpy" may become inline copy loops.  The resulting code
	   is often both smaller and faster, but since the function calls no
	   longer appear as such, you cannot set a breakpoint on those calls,
	   nor can you change the behavior of the functions by linking with a
	   different library.

	   With the --ffnnoo--bbuuiillttiinn--_f_u_n_c_t_i_o_n option only the built-in function
	   _f_u_n_c_t_i_o_n is disabled.  _f_u_n_c_t_i_o_n must not begin with ____bbuuiillttiinn__.  If
	   a function is named this is not built-in in this version of GCC,
	   this option is ignored.  There is no corresponding --ffbbuuiillttiinn--_f_u_n_c_-
	   _t_i_o_n option; if you wish to enable built-in functions selectively
	   when using --ffnnoo--bbuuiillttiinn or --ffffrreeeessttaannddiinngg, you may define macros
	   such as:

		   #define abs(n)	   __builtin_abs ((n))
		   #define strcpy(d, s)	   __builtin_strcpy ((d), (s))

       --ffhhoosstteedd
	   Assert that compilation takes place in a hosted environment.	 This
	   implies --ffbbuuiillttiinn.  A hosted environment is one in which the entire
	   standard library is available, and in which "main" has a return
	   type of "int".  Examples are nearly everything except a kernel.
	   This is equivalent to --ffnnoo--ffrreeeessttaannddiinngg.

       --ffffrreeeessttaannddiinngg
	   Assert that compilation takes place in a freestanding environment.
	   This implies --ffnnoo--bbuuiillttiinn.  A freestanding environment is one in
	   which the standard library may not exist, and program startup may
	   not necessarily be at "main".  The most obvious example is an OS
	   kernel.  This is equivalent to --ffnnoo--hhoosstteedd.

       --ffmmss--eexxtteennssiioonnss
	   Accept some non-standard constructs used in Microsoft header files.

       --ttrriiggrraapphhss
	   Support ISO C trigraphs.  The --aannssii option (and --ssttdd options for
	   strict ISO C conformance) implies --ttrriiggrraapphhss.

       --nnoo--iinntteeggrraatteedd--ccpppp
	   Performs a compilation in two passes: preprocessing and compiling.
	   This option allows a user supplied "cc1", "cc1plus", or "cc1obj"
	   via the --BB option. The user supplied compilation step can then add
	   in an additional preprocessing step after normal preprocessing but
	   before compiling. The default is to use the integrated cpp (inter-
	   nal cpp)

	   The semantics of this option will change if "cc1", "cc1plus", and
	   "cc1obj" are merged.

       --ttrraaddiittiioonnaall
       --ttrraaddiittiioonnaall--ccpppp
	   Formerly, these options caused GCC to attempt to emulate a pre-
	   standard C compiler.	 They are now only supported with the --EE
	   switch.  The preprocessor continues to support a pre-standard mode.
	   See the GNU CPP manual for details.

       --ffccoonndd--mmiissmmaattcchh
	   Allow conditional expressions with mismatched types in the second
	   and third arguments.	 The value of such an expression is void.
	   This option is not supported for C++.

       --ffppcchh--pprreepprroocceessss
	   Enable PCH processing even when --EE or --ssaavvee--tteemmppss is used.

       --ffuunnssiiggnneedd--cchhaarr
	   Let the type "char" be unsigned, like "unsigned char".

	   Each kind of machine has a default for what "char" should be.  It
	   is either like "unsigned char" by default or like "signed char" by
	   default.

	   Ideally, a portable program should always use "signed char" or
	   "unsigned char" when it depends on the signedness of an object.
	   But many programs have been written to use plain "char" and expect
	   it to be signed, or expect it to be unsigned, depending on the
	   machines they were written for.  This option, and its inverse, let
	   you make such a program work with the opposite default.

	   The type "char" is always a distinct type from each of "signed
	   char" or "unsigned char", even though its behavior is always just
	   like one of those two.

       --ffssiiggnneedd--cchhaarr
	   Let the type "char" be signed, like "signed char".

	   Note that this is equivalent to --ffnnoo--uunnssiiggnneedd--cchhaarr, which is the
	   negative form of --ffuunnssiiggnneedd--cchhaarr.  Likewise, the option
	   --ffnnoo--ssiiggnneedd--cchhaarr is equivalent to --ffuunnssiiggnneedd--cchhaarr.

       --ffssiiggnneedd--bbiittffiieellddss
       --ffuunnssiiggnneedd--bbiittffiieellddss
       --ffnnoo--ssiiggnneedd--bbiittffiieellddss
       --ffnnoo--uunnssiiggnneedd--bbiittffiieellddss
	   These options control whether a bit-field is signed or unsigned,
	   when the declaration does not use either "signed" or "unsigned".
	   By default, such a bit-field is signed, because this is consistent:
	   the basic integer types such as "int" are signed types.

       --ffwwrriittaabbllee--ssttrriinnggss
	   Store string constants in the writable data segment and don't
	   uniquize them.  This is for compatibility with old programs which
	   assume they can write into string constants.

	   Writing into string constants is a very bad idea; ``constants''
	   should be constant.

       --ffccoonnssttaanntt--ccffssttrriinnggss
	   Enable the automatic creation of a CoreFoundation-type constant
	   string whenever a special builtin "__builtin__CFStringMakeCon-
	   stantString" is called on a literal string, and for "@"..."" liter-
	   als in Objective-C (thus overriding the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss
	   setting).  This option will also be enabled if the environment
	   variable "MACOSX_DEPLOYMENT_TARGET" exists and is set to "10.2" or
	   greater.  (APPLE ONLY)

       --ffppaassccaall--ssttrriinnggss
	   Allow Pascal-style string literals to be constructed.  (APPLE ONLY)

       --ffccooaalleessccee
	   Coalesce duplicated functions and data. The linker will discard all
	   but one, saving space.  Enabled by default. (APPLE ONLY)

       --ffwweeaakk--ccooaalleesscceedd
	   Use the new OS X "weak_definitions" section attribute for coalesced
	   items.  A single "normal" definition will be chosen by the linker
	   over any number of weakly-coalesced ones.  (APPLE ONLY)

       OOppttiioonnss CCoonnttrroolllliinngg CC++++ DDiiaalleecctt

       This section describes the command-line options that are only meaning-
       ful for C++ programs; but you can also use most of the GNU compiler
       options regardless of what language your program is in.	For example,
       you might compile a file "firstClass.C" like this:

	       g++ -g -frepo -O -c firstClass.C

       In this example, only --ffrreeppoo is an option meant only for C++ programs;
       you can use the other options with any language supported by GCC.

       Here is a list of options that are _o_n_l_y for compiling C++ programs:

       --ffaabbii--vveerrssiioonn==_n
	   Use version _n of the C++ ABI.  Version 1 is the version of the C++
	   ABI that first appeared in G++ 3.2.	Version 0 will always be the
	   version that conforms most closely to the C++ ABI specification.
	   Therefore, the ABI obtained using version 0 will change as ABI bugs
	   are fixed.

	   The default is version 1.

       --ffnnoo--aacccceessss--ccoonnttrrooll
	   Turn off all access checking.  This switch is mainly useful for
	   working around bugs in the access control code.

       --ffcchheecckk--nneeww
	   Check that the pointer returned by "operator new" is non-null
	   before attempting to modify the storage allocated.  The current
	   Working Paper requires that "operator new" never return a null
	   pointer, so this check is normally unnecessary.

	   An alternative to using this option is to specify that your "opera-
	   tor new" does not throw any exceptions; if you declare it _tt_hh_rr_oo_ww_((_)),
	   G++ will check the return value.  See also nneeww ((nnootthhrrooww)).

       --ffccoonnsseerrvvee--ssppaaccee
	   Put uninitialized or runtime-initialized global variables into the
	   common segment, as C does.  This saves space in the executable at
	   the cost of not diagnosing duplicate definitions.  If you compile
	   with this flag and your program mysteriously crashes after "main()"
	   has completed, you may have an object that is being destroyed twice
	   because two definitions were merged.

	   This option is no longer useful on most targets, now that support
	   has been added for putting variables into BSS without making them
	   common.

       --ffnnoo--ccoonnsstt--ssttrriinnggss
	   Give string constants type "char *" instead of type "const char *".
	   By default, G++ uses type "const char *" as required by the stan-
	   dard.  Even if you use --ffnnoo--ccoonnsstt--ssttrriinnggss, you cannot actually mod-
	   ify the value of a string constant, unless you also use
	   --ffwwrriittaabbllee--ssttrriinnggss.

	   This option might be removed in a future release of G++.  For maxi-
	   mum portability, you should structure your code so that it works
	   with string constants that have type "const char *".

       --ffddoollllaarrss--iinn--iiddeennttiiffiieerrss
	   Accept $$ in identifiers.  You can also explicitly prohibit use of $$
	   with the option --ffnnoo--ddoollllaarrss--iinn--iiddeennttiiffiieerrss.	 (GNU C allows $$ by
	   default on most target systems, but there are a few exceptions.)
	   Traditional C allowed the character $$ to form part of identifiers.
	   However, ISO C and C++ forbid $$ in identifiers.

       --ffnnoo--eelliiddee--ccoonnssttrruuccttoorrss
	   The C++ standard allows an implementation to omit creating a tempo-
	   rary which is only used to initialize another object of the same
	   type.  Specifying this option disables that optimization, and
	   forces G++ to call the copy constructor in all cases.

       --ffnnoo--eennffoorrccee--eehh--ssppeeccss
	   Don't check for violation of exception specifications at runtime.
	   This option violates the C++ standard, but may be useful for reduc-
	   ing code size in production builds, much like defining NNDDEEBBUUGG.  The
	   compiler will still optimize based on the exception specifications.

       --ffeexxtteerrnnaall--tteemmppllaatteess
	   Cause ##pprraaggmmaa iinntteerrffaaccee and iimmpplleemmeennttaattiioonn to apply to template
	   instantiation; template instances are emitted or not according to
	   the location of the template definition.

	   This option is deprecated.

       --ffaalltt--eexxtteerrnnaall--tteemmppllaatteess
	   Similar to --ffeexxtteerrnnaall--tteemmppllaatteess, but template instances are emitted
	   or not according to the place where they are first instantiated.

	   This option is deprecated.

       --ffffoorr--ssccooppee
       --ffnnoo--ffoorr--ssccooppee
	   If --ffffoorr--ssccooppee is specified, the scope of variables declared in a
	   _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t is limited to the ffoorr loop itself, as specified
	   by the C++ standard.	 If --ffnnoo--ffoorr--ssccooppee is specified, the scope of
	   variables declared in a _f_o_r_-_i_n_i_t_-_s_t_a_t_e_m_e_n_t extends to the end of
	   the enclosing scope, as was the case in old versions of G++, and
	   other (traditional) implementations of C++.

	   The default if neither flag is given to follow the standard, but to
	   allow and give a warning for old-style code that would otherwise be
	   invalid, or have different behavior.

       --ffnnoo--ggnnuu--kkeeyywwoorrddss
	   Do not recognize "typeof" as a keyword, so that code can use this
	   word as an identifier.  You can use the keyword "__typeof__"
	   instead.  --aannssii implies --ffnnoo--ggnnuu--kkeeyywwoorrddss.

       --ffnnoo--iimmpplliicciitt--tteemmppllaatteess
	   Never emit code for non-inline templates which are instantiated
	   implicitly (i.e. by use); only emit code for explicit instantia-
	   tions.

       --ffnnoo--iimmpplliicciitt--iinnlliinnee--tteemmppllaatteess
	   Don't emit code for implicit instantiations of inline templates,
	   either.  The default is to handle inlines differently so that com-
	   piles with and without optimization will need the same set of
	   explicit instantiations.

       --ffnnoo--iimmpplleemmeenntt--iinnlliinneess
	   To save space, do not emit out-of-line copies of inline functions
	   controlled by ##pprraaggmmaa iimmpplleemmeennttaattiioonn.  This will cause linker
	   errors if these functions are not inlined everywhere they are
	   called.

       --ffiinnddiirreecctt--vviirrttuuaall--ccaallllss
	   Do not make direct calls to virtual functions; instead, always go
	   through the vtable. (APPLE ONLY)

       --ffaappppllee--kkeexxtt
	   Alter vtables, destructors, and other implementation details to
	   more closely resemble the GCC 2.95 ABI.  This is to make kernel
	   extensions loadable by Darwin kernels, and is required to build any
	   Darwin kernel extension.  --ffnnoo--eexxcceeppttiioonnss and --ssttaattiicc must also be
	   used with this flag.	 (APPLE ONLY)

       --ffccooaalleessccee--tteemmppllaatteess
	   Mark instantiated templates as "coalesced": the linker will discard
	   all but one, thus saving space. (APPLE ONLY)

       --ffmmss--eexxtteennssiioonnss
	   Disable pedantic warnings about constructs used in MFC, such as
	   implicit int and getting a pointer to member function via non-stan-
	   dard syntax.

       --ffnnoo--nnoonnaannssii--bbuuiillttiinnss
	   Disable built-in declarations of functions that are not mandated by
	   ANSI/ISO C.	These include "ffs", "alloca", "_exit", "index",
	   "bzero", "conjf", and other related functions.

       --ffnnoo--ooppeerraattoorr--nnaammeess
	   Do not treat the operator name keywords "and", "bitand", "bitor",
	   "compl", "not", "or" and "xor" as synonyms as keywords.

       --ffnnoo--ooppttiioonnaall--ddiiaaggss
	   Disable diagnostics that the standard says a compiler does not need
	   to issue.  Currently, the only such diagnostic issued by G++ is the
	   one for a name having multiple meanings within a class.

       --ffppeerrmmiissssiivvee
	   Downgrade messages about nonconformant code from errors to warn-
	   ings.  By default, G++ effectively sets --ppeeddaannttiicc--eerrrroorrss without
	   --ppeeddaannttiicc; this option reverses that.  This behavior and this
	   option are superseded by --ppeeddaannttiicc, which works as it does for GNU
	   C.

       --ffrreeppoo
	   Enable automatic template instantiation at link time.  This option
	   also implies --ffnnoo--iimmpplliicciitt--tteemmppllaatteess.

       --ffnnoo--rrttttii
	   Disable generation of information about every class with virtual
	   functions for use by the C++ runtime type identification features
	   (ddyynnaammiicc__ccaasstt and ttyyppeeiidd).  If you don't use those parts of the
	   language, you can save some space by using this flag.  Note that
	   exception handling uses the same information, but it will generate
	   it as needed.

       --ffssttaattss
	   Emit statistics about front-end processing at the end of the compi-
	   lation.  This information is generally only useful to the G++
	   development team.

       --fftteemmppllaattee--ddeepptthh--_n
	   Set the maximum instantiation depth for template classes to _n.  A
	   limit on the template instantiation depth is needed to detect end-
	   less recursions during template class instantiation.	 ANSI/ISO C++
	   conforming programs must not rely on a maximum depth greater than
	   17.

       --ffuussee--ccxxaa--aatteexxiitt
	   Register destructors for objects with static storage duration with
	   the "__cxa_atexit" function rather than the "atexit" function.
	   This option is required for fully standards-compliant handling of
	   static destructors, but will only work if your C library supports
	   "__cxa_atexit".  This option is not supported on Mac OS X.

       --ffvvttaabbllee--ggcc
	   Emit special relocations for vtables and virtual function refer-
	   ences so that the linker can identify unused virtual functions and
	   zero out vtable slots that refer to them.  This is most useful with
	   --ffffuunnccttiioonn--sseeccttiioonnss and --WWll,,----ggcc--sseeccttiioonnss, in order to also discard
	   the functions themselves.

	   This optimization requires GNU as and GNU ld.  Not all systems sup-
	   port this option.  --WWll,,----ggcc--sseeccttiioonnss is ignored without --ssttaattiicc.

       --ffnnoo--wweeaakk
	   Do not use weak symbol support, even if it is provided by the
	   linker.  By default, G++ will use weak symbols if they are avail-
	   able.  This option exists only for testing, and should not be used
	   by end-users; it will result in inferior code and has no benefits.
	   This option may be removed in a future release of G++.

       --nnoossttddiinncc++++
	   Do not search for header files in the standard directories specific
	   to C++, but do still search the other standard directories.	(This
	   option is used when building the C++ library.)

       In addition, these optimization, warning, and code generation options
       have meanings only for C++ programs:

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
	   Do not assume iinnlliinnee for functions defined inside a class scope.
	     Note that these functions will have linkage like inline func-
	   tions; they just won't be inlined by default.

       --WWaabbii (C++ only)
	   Warn when G++ generates code that is probably not compatible with
	   the vendor-neutral C++ ABI.	Although an effort has been made to
	   warn about all such cases, there are probably some cases that are
	   not warned about, even though G++ is generating incompatible code.
	   There may also be cases where warnings are emitted even though the
	   code that is generated will be compatible.

	   You should rewrite your code to avoid these warnings if you are
	   concerned about the fact that code generated by G++ may not be
	   binary compatible with code generated by other compilers.

	   The known incompatibilities at this point include:

	   *   Incorrect handling of tail-padding for bit-fields.  G++ may
	       attempt to pack data into the same byte as a base class.	 For
	       example:

		       struct A { virtual void f(); int f1 : 1; };
		       struct B : public A { int f2 : 1; };

	       In this case, G++ will place "B::f2" into the same byte
	       as"A::f1"; other compilers will not.  You can avoid this prob-
	       lem by explicitly padding "A" so that its size is a multiple of
	       the byte size on your platform; that will cause G++ and other
	       compilers to layout "B" identically.

	   *   Incorrect handling of tail-padding for virtual bases.  G++ does
	       not use tail padding when laying out virtual bases.  For exam-
	       ple:

		       struct A { virtual void f(); char c1; };
		       struct B { B(); char c2; };
		       struct C : public A, public virtual B {};

	       In this case, G++ will not place "B" into the tail-padding for
	       "A"; other compilers will.  You can avoid this problem by
	       explicitly padding "A" so that its size is a multiple of its
	       alignment (ignoring virtual base classes); that will cause G++
	       and other compilers to layout "C" identically.

	   *   Incorrect handling of bit-fields with declared widths greater
	       than that of their underlying types, when the bit-fields appear
	       in a union.  For example:

		       union U { int i : 4096; };

	       Assuming that an "int" does not have 4096 bits, G++ will make
	       the union too small by the number of bits in an "int".

	   *   Empty classes can be placed at incorrect offsets.  For example:

		       struct A {};

		       struct B {
			 A a;
			 virtual void f ();
		       };

		       struct C : public B, public A {};

	       G++ will place the "A" base class of "C" at a nonzero offset;
	       it should be placed at offset zero.  G++ mistakenly believes
	       that the "A" data member of "B" is already at offset zero.

	   *   Names of template functions whose types involve "typename" or
	       template template parameters can be mangled incorrectly.

		       template <typename Q>
		       void f(typename Q::X) {}

		       template <template <typename> class Q>
		       void f(typename Q<int>::X) {}

	       Instantiations of these templates may be mangled incorrectly.

       --WWccttoorr--ddttoorr--pprriivvaaccyy (C++ only)
	   Warn when a class seems unusable, because all the constructors or
	   destructors in a class are private and the class has no friends or
	   public static member functions.  This warning is enabled by
	   default.

       --WWnnoonn--vviirrttuuaall--ddttoorr (C++ only)
	   Warn when a class declares a non-virtual destructor that should
	   probably be virtual, because it looks like the class will be used
	   polymorphically.  This warning is enabled by --WWaallll.

       --WWrreeoorrddeerr (C++ only)
	   Warn when the order of member initializers given in the code does
	   not match the order in which they must be executed.	For instance:

		   struct A {
		     int i;
		     int j;
		     A(): j (0), i (1) { }
		   };

	   Here the compiler will warn that the member initializers for ii and
	   jj will be rearranged to match the declaration order of the members.
	   This warning is enabled by --WWaallll.

       The following --WW...... options are not affected by --WWaallll.

       --WWeeffffcc++++ (C++ only)
	   Warn about violations of the following style guidelines from Scott
	   Meyers' _E_f_f_e_c_t_i_v_e _C_+_+ book:

	   *   Item 11:	 Define a copy constructor and an assignment operator
	       for classes with dynamically allocated memory.

	   *   Item 12:	 Prefer initialization to assignment in constructors.

	   *   Item 14:	 Make destructors virtual in base classes.

	   *   Item 15:	 Have "operator=" return a reference to *this.

	   *   Item 23:	 Don't try to return a reference when you must return
	       an object.

	   and about violations of the following style guidelines from Scott
	   Meyers' _M_o_r_e _E_f_f_e_c_t_i_v_e _C_+_+ book:

	   *   Item 6:	Distinguish between prefix and postfix forms of incre-
	       ment and decrement operators.

	   *   Item 7:	Never overload "&&", "||", or ",".

	   If you use this option, you should be aware that the standard
	   library headers do not obey all of these guidelines; you can use
	   ggrreepp --vv to filter out those warnings.

       --WWnnoo--ddeepprreeccaatteedd (C++ only)
	   Do not warn about usage of deprecated features.

       --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd (C++ only)
	   Disable warnings when non-templatized friend functions are declared
	   within a template.  With the advent of explicit template specifica-
	   tion support in G++, if the name of the friend is an unqualified-id
	   (i.e., ffrriieenndd ffoooo((iinntt))), the C++ language specification demands
	   that the friend declare or define an ordinary, nontemplate func-
	   tion.  (Section 14.5.3).  Before G++ implemented explicit specifi-
	   cation, unqualified-ids could be interpreted as a particular spe-
	   cialization of a templatized function.  Because this non-conforming
	   behavior is no longer the default behavior for G++, --WWnnoonn--tteemm--
	   ppllaattee--ffrriieenndd allows the compiler to check existing code for poten-
	   tial trouble spots, and is on by default.  This new compiler behav-
	   ior can be turned off with --WWnnoo--nnoonn--tteemmppllaattee--ffrriieenndd which keeps the
	   conformant compiler code but disables the helpful warning.

       --WWoolldd--ssttyyllee--ccaasstt (C++ only)
	   Warn if an old-style (C-style) cast to a non-void type is used
	   within a C++ program.  The new-style casts (ssttaattiicc__ccaasstt, rreeiinntteerr--
	   pprreett__ccaasstt, and ccoonnsstt__ccaasstt) are less vulnerable to unintended
	   effects, and much easier to grep for.

       --WWoovveerrllooaaddeedd--vviirrttuuaall (C++ only)
	   Warn when a function declaration hides virtual functions from a
	   base class.	For example, in:

		   struct A {
		     virtual void f();
		   };

		   struct B: public A {
		     void f(int);
		   };

	   the "A" class version of "f" is hidden in "B", and code like this:

		   B* b;
		   b->f();

	   will fail to compile.

       --WWnnoo--ppmmff--ccoonnvveerrssiioonnss (C++ only)
	   Disable the diagnostic for converting a bound pointer to member
	   function to a plain pointer.

       --WWssiiggnn--pprroommoo (C++ only)
	   Warn when overload resolution chooses a promotion from unsigned or
	   enumeral type to a signed type over a conversion to an unsigned
	   type of the same size.  Previous versions of G++ would try to pre-
	   serve unsignedness, but the standard mandates the current behavior.

       --WWssyynntthh (C++ only)
	   Warn when G++'s synthesis behavior does not match that of cfront.
	   For instance:

		   struct A {
		     operator int ();
		     A& operator = (int);
		   };

		   main ()
		   {
		     A a,b;
		     a = b;
		   }

	   In this example, G++ will synthesize a default AA&& ooppeerraattoorr == ((ccoonnsstt
	   AA&&));;, while cfront will use the user-defined ooppeerraattoorr ==.

       OOppttiioonnss CCoonnttrroolllliinngg OObbjjeeccttiivvee--CC DDiiaalleecctt

       This section describes the command-line options that are only meaning-
       ful for Objective-C programs; but you can also use most of the GNU com-
       piler options regardless of what language your program is in.  For
       example, you might compile a file "some_class.m" like this:

	       gcc -g -fgnu-runtime -O -c some_class.m

       In this example, only --ffggnnuu--rruunnttiimmee is an option meant only for Objec-
       tive-C programs; you can use the other options with any language sup-
       ported by GCC.

       Here is a list of options that are _o_n_l_y for compiling Objective-C pro-
       grams:

       --ffccoonnssttaanntt--ssttrriinngg--ccllaassss==_c_l_a_s_s_-_n_a_m_e
	   Use _c_l_a_s_s_-_n_a_m_e as the name of the class to instantiate for each
	   literal string specified with the syntax "@"..."".  The default
	   class name is "NXConstantString" if the GNU runtime is being used,
	   and "NSConstantString" if the NeXT runtime is being used (see
	   below).  The --ffccoonnssttaanntt--ccffssttrriinnggss option, if also present, will
	   override the --ffccoonnssttaanntt--ssttrriinngg--ccllaassss setting and cause "@"...""
	   literals to be laid out as constant CoreFoundation strings.

       --ffggnnuu--rruunnttiimmee
	   Generate object code compatible with the standard GNU Objective-C
	   runtime.  This is the default for most types of systems.

       --ffnneexxtt--rruunnttiimmee
	   Generate output compatible with the NeXT runtime.  This is the
	   default for NeXT-based systems, including Darwin and Mac OS X.  The
	   macro "__NEXT_RUNTIME__" is predefined if (and only if) this option
	   is used.

       --ffnnoo--nniill--rreecceeiivveerrss (APPLE ONLY)
	   Assume that all Objective-C message dispatches (e.g., "[receiver
	   message:arg]") in this translation unit ensure that the receiver is
	   not "nil".  This allows for more efficient entry points in the run-
	   time to be used.  Currently, this option is only available in con-
	   junciton with the NeXT runtime.

       --ffoobbjjcc--eexxcceeppttiioonnss (APPLE ONLY)
	   Enable syntactic support for structured exception handling in
	   Objective-C, similar to what is offered by C++ and Java.  This
	   option will also be enabled if the environment variable
	   "MACOSX_DEPLOYMENT_TARGET" exists and is set to "10.3" or greater.

		     @try {
		       ...
			  @throw expr;
		       ...
		     }
		     @catch (AnObjCClass *exc) {
		       ...
			 @throw expr;
		       ...
			 @throw;
		       ...
		     }
		     @catch (AnotherClass *exc) {
		       ...
		     }
		     @catch (id allOthers) {
		       ...
		     }
		     @finally {
		       ...
			 @throw expr;
		       ...
		     }

	   The @throw statement may appear anywhere in an Objective-C or
	   Objective-C++ program; when used inside of a @catch block, the
	   @throw may appear without an argument (as shown above), in which
	   case the object caught by the @catch will be rethrown.

	   Note that only (pointers to) Objective-C objects may be thrown and
	   caught using this scheme.  When an object is thrown, it will be
	   caught by the nearest @catch clause capable of handling objects of
	   that type, analogously to how "catch" blocks work in C++ and Java.
	   A "@catch(id ...)" clause (as shown above) may also be provided to
	   catch any and all Objective-C exceptions not caught by previous
	   @catch clauses (if any).

	   The @finally clause, if present, will be executed upon exit from
	   the immediately preceding "@try ... @catch" section.	 This will
	   happen regardless of whether any exceptions are thrown, caught or
	   rethrown inside the "@try ... @catch" section, analogously to the
	   behavior of the "finally" clause in Java.

	   There are several caveats to using the new exception mechanism:

	   *   Although currently designed to be binary compatible with
	       "NS_HANDLER"-style idioms provided by the "NSException" class,
	       the new exceptions can only be used on Mac OS X 10.3 (Panther)
	       and later systems, due to additional functionality needed in
	       the (NeXT) Objective-C runtime.

	   *   As mentioned above, the new exceptions do not support handling
	       types other than Objective-C objects.   Furthermore, when used
	       from Objective-C++, the Objective-C exception model does not
	       interoperate with C++ exceptions at this time.  This means you
	       cannot @throw an exception from Objective-C and "catch" it in
	       C++, or vice versa (i.e., "throw ... @catch").

	   The --ffoobbjjcc--eexxcceeppttiioonnss switch also enables the use of synchroniza-
	   tion blocks for thread-safe execution:

		     ObjCClass *lockObject = ...;
		     ...
		     @synchronized (lockObject) {
		       ...
			 @throw expr;
		       ...
		     }

	   Unlike Java, Objective-C does not allow for entire methods to be
	   marked @synchronized.  Note that throwing exceptions out of @syn-
	   chronized blocks is allowed, and will cause the guarding object to
	   be unlocked properly.

       --ffrreeppllaaccee--oobbjjcc--ccllaasssseess (APPLE ONLY)
	   When compiling for the NeXT runtime, the compiler ordinarily
	   replaces calls to "objc_getClass("...")" (when the name of the
	   class is known at compile time) with static class references that
	   get initialized at load time, which improves run-time performance.
	   Specifying the --ffrreeppllaaccee--oobbjjcc--ccllaasssseess flag suppresses this behavior
	   and causes calls to "objc_getClass("...")" to be retained.  This is
	   useful in Fix-and-Continue debugging mode, since it allows for
	   individual class implementations to be modified during program exe-
	   cution.

       --ffzzeerroo--lliinnkk (APPLE ONLY)
	   Emit a special marker instructing _ll_dd((11)) not to statically link in
	   the resulting object file, and allow _dd_yy_ll_dd((11)) to load it in at run
	   time instead.  This is used in conjunction with the Zero Link
	   debugging mode.

       --ggeenn--ddeeccllss
	   Dump interface declarations for all classes seen in the source file
	   to a file named _s_o_u_r_c_e_n_a_m_e_._d_e_c_l.

       --WWnnoo--pprroottooccooll
	   If a class is declared to implement a protocol, a warning is issued
	   for every method in the protocol that is not implemented by the
	   class.  The default behavior is to issue a warning for every method
	   not explicitly implemented in the class, even if a method implemen-
	   tation is inherited from the superclass.  If you use the "-Wno-pro-
	   tocol" option, then methods inherited from the superclass are con-
	   sidered to be implemented, and no warning is issued for them.

       --WWsseelleeccttoorr
	   Warn if multiple methods of different types for the same selector
	   are found during compilation.  The check is performed on the list
	   of methods in the final stage of compilation.  Additionally, a
	   check is performed that for each selector appearing in a "@selec-
	   tor(...)"  expression, a corresponding method with that selector
	   has been found during compilation.  Because these checks scan the
	   method table only at the end of compilation, these warnings are not
	   produced if the final stage of compilation is not reached, for
	   example because an error is found during compilation, or because
	   the "-fsyntax-only" option is being used.

       --WWuunnddeeccllaarreedd--sseelleeccttoorr
	   Warn if a "@selector(...)" expression referring to an undeclared
	   selector is found.  A selector is considered undeclared if no
	   method with that name has been declared (explicitly, in an @inter-
	   face or @protocol declaration, or implicitly, in an @implementation
	   section) before the "@selector(...)" expression.  This option
	   always performs its checks as soon as a "@selector(...)" expression
	   is found (while "-Wselector" only performs its checks in the final
	   stage of compilation), and so additionally enforces the coding
	   style convention that methods and selectors must be declared before
	   being used.

       OOppttiioonnss ttoo CCoonnttrrooll DDiiaaggnnoossttiicc MMeessssaaggeess FFoorrmmaattttiinngg

       Traditionally, diagnostic messages have been formatted irrespective of
       the output device's aspect (e.g. its width, ...).  The options
       described below can be used to control the diagnostic messages format-
       ting algorithm, e.g. how many characters per line, how often source
       location information should be reported.	 Right now, only the C++ front
       end can honor these options.  However it is expected, in the near
       future, that the remaining front ends would be able to digest them cor-
       rectly.

       --ffmmeessssaaggee--lleennggtthh==_n
	   Try to format error messages so that they fit on lines of about _n
	   characters.	The default is 72 characters for gg++++ and 0 for the
	   rest of the front ends supported by GCC.  If _n is zero, then no
	   line-wrapping will be done; each error message will appear on a
	   single line.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==oonnccee
	   Only meaningful in line-wrapping mode.  Instructs the diagnostic
	   messages reporter to emit _o_n_c_e source location information; that
	   is, in case the message is too long to fit on a single physical
	   line and has to be wrapped, the source location won't be emitted
	   (as prefix) again, over and over, in subsequent continuation lines.
	   This is the default behavior.

       --ffddiiaaggnnoossttiiccss--sshhooww--llooccaattiioonn==eevveerryy--lliinnee
	   Only meaningful in line-wrapping mode.  Instructs the diagnostic
	   messages reporter to emit the same source location information (as
	   prefix) for physical lines that result from the process of breaking
	   a message which is too long to fit on a single line.

       OOppttiioonnss ttoo RReeqquueesstt oorr SSuupppprreessss WWaarrnniinnggss

       Warnings are diagnostic messages that report constructions which are
       not inherently erroneous but which are risky or suggest there may have
       been an error.

       You can request many specific warnings with options beginning --WW, for
       example --WWiimmpplliicciitt to request warnings on implicit declarations.	 Each
       of these specific warning options also has a negative form beginning
       --WWnnoo-- to turn off warnings; for example, --WWnnoo--iimmpplliicciitt.	This manual
       lists only one of the two forms, whichever is not the default.

       The following options control the amount and kinds of warnings produced
       by GCC; for further, language-specific options also refer to @ref{C++
       Dialect Options} and @ref{Objective-C Dialect Options}.

       --ffssyynnttaaxx--oonnllyy
	   Check the code for syntax errors, but don't do anything beyond
	   that.

       --ppeeddaannttiicc
	   Issue all the warnings demanded by strict ISO C and ISO C++; reject
	   all programs that use forbidden extensions, and some other programs
	   that do not follow ISO C and ISO C++.  For ISO C, follows the ver-
	   sion of the ISO C standard specified by any --ssttdd option used.

	   Valid ISO C and ISO C++ programs should compile properly with or
	   without this option (though a rare few will require --aannssii or a --ssttdd
	   option specifying the required version of ISO C).  However, without
	   this option, certain GNU extensions and traditional C and C++ fea-
	   tures are supported as well.	 With this option, they are rejected.

	   --ppeeddaannttiicc does not cause warning messages for use of the alternate
	   keywords whose names begin and end with ____.	Pedantic warnings are
	   also disabled in the expression that follows "__extension__".  How-
	   ever, only system header files should use these escape routes;
	   application programs should avoid them.

	   Some users try to use --ppeeddaannttiicc to check programs for strict ISO C
	   conformance.	 They soon find that it does not do quite what they
	   want: it finds some non-ISO practices, but not all---only those for
	   which ISO C _r_e_q_u_i_r_e_s a diagnostic, and some others for which diag-
	   nostics have been added.

	   A feature to report any failure to conform to ISO C might be useful
	   in some instances, but would require considerable additional work
	   and would be quite different from --ppeeddaannttiicc.	 We don't have plans
	   to support such a feature in the near future.

	   Where the standard specified with --ssttdd represents a GNU extended
	   dialect of C, such as ggnnuu8899 or ggnnuu9999, there is a corresponding _b_a_s_e
	   _s_t_a_n_d_a_r_d, the version of ISO C on which the GNU extended dialect is
	   based.  Warnings from --ppeeddaannttiicc are given where they are required
	   by the base standard.  (It would not make sense for such warnings
	   to be given only for features not in the specified GNU C dialect,
	   since by definition the GNU dialects of C include all features the
	   compiler supports with the given option, and there would be nothing
	   to warn about.)

       --ppeeddaannttiicc--eerrrroorrss
	   Like --ppeeddaannttiicc, except that errors are produced rather than warn-
	   ings.

       --ww  Inhibit all warning messages.

       --WWnnoo--iimmppoorrtt
	   Inhibit warning messages about the use of ##iimmppoorrtt.

       --WWnnoo--##wwaarrnniinnggss
	   Inhibit warning messages issued by ##wwaarrnniinngg.

       --WWpprraaggmmaa--oonnccee
	   Warn about the use of ##pprraaggmmaa oonnccee.	(APPLE ONLY)

       --WWeexxttrraa--ttookkeennss
	   Warn about extra tokens at the end of prepreprocessor directives.
	   (APPLE ONLY)

       --WWnneewwlliinnee--eeooff
	   Warn about files missing a newline at the end of the file.  (APPLE
	   ONLY)

       --WWnnoo--aallttiivveecc--lloonngg--ddeepprreeccaatteedd
	   Do not warn about the use of the deprecated 'long' keyword in
	   AltiVec data types.	(APPLE ONLY)

       --WWcchhaarr--ssuubbssccrriippttss
	   Warn if an array subscript has type "char".	This is a common cause
	   of error, as programmers often forget that this type is signed on
	   some machines.

       --WWccoommmmeenntt
	   Warn whenever a comment-start sequence //** appears in a //** comment,
	   or whenever a Backslash-Newline appears in a //// comment.

       --WWffoorrmmaatt
	   Check calls to "printf" and "scanf", etc., to make sure that the
	   arguments supplied have types appropriate to the format string
	   specified, and that the conversions specified in the format string
	   make sense.	This includes standard functions, and others specified
	   by format attributes, in the "printf", "scanf", "strftime" and
	   "strfmon" (an X/Open extension, not in the C standard) families.

	   The formats are checked against the format features supported by
	   GNU libc version 2.2.  These include all ISO C90 and C99 features,
	   as well as features from the Single Unix Specification and some BSD
	   and GNU extensions.	Other library implementations may not support
	   all these features; GCC does not support warning about features
	   that go beyond a particular library's limitations.  However, if
	   --ppeeddaannttiicc is used with --WWffoorrmmaatt, warnings will be given about for-
	   mat features not in the selected standard version (but not for
	   "strfmon" formats, since those are not in any version of the C
	   standard).

	   Since --WWffoorrmmaatt also checks for null format arguments for several
	   functions, --WWffoorrmmaatt also implies --WWnnoonnnnuullll.

	   --WWffoorrmmaatt is included in --WWaallll.  For more control over some aspects
	   of format checking, the options --WWnnoo--ffoorrmmaatt--yy22kk, --WWnnoo--ffoorr--
	   mmaatt--eexxttrraa--aarrggss, --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh, --WWffoorrmmaatt--nnoonnlliitteerraall,
	   --WWffoorrmmaatt--sseeccuurriittyy, and --WWffoorrmmaatt==22 are available, but are not
	   included in --WWaallll.

       --WWnnoo--ffoorrmmaatt--yy22kk
	   If --WWffoorrmmaatt is specified, do not warn about "strftime" formats
	   which may yield only a two-digit year.

       --WWnnoo--ffoorrmmaatt--eexxttrraa--aarrggss
	   If --WWffoorrmmaatt is specified, do not warn about excess arguments to a
	   "printf" or "scanf" format function.	 The C standard specifies that
	   such arguments are ignored.

	   Where the unused arguments lie between used arguments that are
	   specified with $$ operand number specifications, normally warnings
	   are still given, since the implementation could not know what type
	   to pass to "va_arg" to skip the unused arguments.  However, in the
	   case of "scanf" formats, this option will suppress the warning if
	   the unused arguments are all pointers, since the Single Unix Speci-
	   fication says that such unused arguments are allowed.

       --WWnnoo--ffoorrmmaatt--zzeerroo--lleennggtthh
	   If --WWffoorrmmaatt is specified, do not warn about zero-length formats.
	   The C standard specifies that zero-length formats are allowed.

       --WWffoorrmmaatt--nnoonnlliitteerraall
	   If --WWffoorrmmaatt is specified, also warn if the format string is not a
	   string literal and so cannot be checked, unless the format function
	   takes its format arguments as a "va_list".

       --WWffoorrmmaatt--sseeccuurriittyy
	   If --WWffoorrmmaatt is specified, also warn about uses of format functions
	   that represent possible security problems.  At present, this warns
	   about calls to "printf" and "scanf" functions where the format
	   string is not a string literal and there are no format arguments,
	   as in "printf (foo);".  This may be a security hole if the format
	   string came from untrusted input and contains %%nn.  (This is cur-
	   rently a subset of what --WWffoorrmmaatt--nnoonnlliitteerraall warns about, but in
	   future warnings may be added to --WWffoorrmmaatt--sseeccuurriittyy that are not
	   included in --WWffoorrmmaatt--nnoonnlliitteerraall.)

       --WWffoorrmmaatt==22
	   Enable --WWffoorrmmaatt plus format checks not included in --WWffoorrmmaatt.	 Cur-
	   rently equivalent to --WWffoorrmmaatt --WWffoorrmmaatt--nnoonnlliitteerraall --WWffoorrmmaatt--sseeccuu--
	   rriittyy.

       --WWnnoonnnnuullll
	   Enable warning about passing a null pointer for arguments marked as
	   requiring a non-null value by the "nonnull" function attribute.

	   --WWnnoonnnnuullll is included in --WWaallll and --WWffoorrmmaatt.	 It can be disabled
	   with the --WWnnoo--nnoonnnnuullll option.

       --WWiimmpplliicciitt--iinntt
	   Warn when a declaration does not specify a type.

       --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
       --WWeerrrroorr--iimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn
	   Give a warning (or error) whenever a function is used before being
	   declared.

       --WWiimmpplliicciitt
	   Same as --WWiimmpplliicciitt--iinntt and --WWiimmpplliicciitt--ffuunnccttiioonn--ddeeccllaarraattiioonn.

       --WWmmaaiinn
	   Warn if the type of mmaaiinn is suspicious.  mmaaiinn should be a function
	   with external linkage, returning int, taking either zero arguments,
	   two, or three arguments of appropriate types.

       --WWmmiissssiinngg--bbrraacceess
	   Warn if an aggregate or union initializer is not fully bracketed.
	   In the following example, the initializer for aa is not fully brack-
	   eted, but that for bb is fully bracketed.

		   int a[2][2] = { 0, 1, 2, 3 };
		   int b[2][2] = { { 0, 1 }, { 2, 3 } };

       --WWppaarreenntthheesseess
	   Warn if parentheses are omitted in certain contexts, such as when
	   there is an assignment in a context where a truth value is
	   expected, or when operators are nested whose precedence people
	   often get confused about.

	   Also warn about constructions where there may be confusion to which
	   "if" statement an "else" branch belongs.  Here is an example of
	   such a case:

		   {
		     if (a)
		       if (b)
			 foo ();
		     else
		       bar ();
		   }

	   In C, every "else" branch belongs to the innermost possible "if"
	   statement, which in this example is "if (b)".  This is often not
	   what the programmer expected, as illustrated in the above example
	   by indentation the programmer chose.	 When there is the potential
	   for this confusion, GCC will issue a warning when this flag is
	   specified.  To eliminate the warning, add explicit braces around
	   the innermost "if" statement so there is no way the "else" could
	   belong to the enclosing "if".  The resulting code would look like
	   this:

		   {
		     if (a)
		       {
			 if (b)
			   foo ();
			 else
			   bar ();
		       }
		   }

       --WWsseeqquueennccee--ppooiinntt
	   Warn about code that may have undefined semantics because of viola-
	   tions of sequence point rules in the C standard.

	   The C standard defines the order in which expressions in a C pro-
	   gram are evaluated in terms of _s_e_q_u_e_n_c_e _p_o_i_n_t_s, which represent a
	   partial ordering between the execution of parts of the program:
	   those executed before the sequence point, and those executed after
	   it.	These occur after the evaluation of a full expression (one
	   which is not part of a larger expression), after the evaluation of
	   the first operand of a "&&", "||", "? :" or "," (comma) operator,
	   before a function is called (but after the evaluation of its argu-
	   ments and the expression denoting the called function), and in cer-
	   tain other places.  Other than as expressed by the sequence point
	   rules, the order of evaluation of subexpressions of an expression
	   is not specified.  All these rules describe only a partial order
	   rather than a total order, since, for example, if two functions are
	   called within one expression with no sequence point between them,
	   the order in which the functions are called is not specified.  How-
	   ever, the standards committee have ruled that function calls do not
	   overlap.

	   It is not specified when between sequence points modifications to
	   the values of objects take effect.  Programs whose behavior depends
	   on this have undefined behavior; the C standard specifies that
	   ``Between the previous and next sequence point an object shall have
	   its stored value modified at most once by the evaluation of an
	   expression.	Furthermore, the prior value shall be read only to
	   determine the value to be stored.''.	 If a program breaks these
	   rules, the results on any particular implementation are entirely
	   unpredictable.

	   Examples of code with undefined behavior are "a = a++;", "a[n] =
	   b[n++]" and "a[i++] = i;".  Some more complicated cases are not
	   diagnosed by this option, and it may give an occasional false posi-
	   tive result, but in general it has been found fairly effective at
	   detecting this sort of problem in programs.

	   The present implementation of this option only works for C pro-
	   grams.  A future implementation may also work for C++ programs.

	   The C standard is worded confusingly, therefore there is some
	   debate over the precise meaning of the sequence point rules in sub-
	   tle cases.  Links to discussions of the problem, including proposed
	   formal definitions, may be found on our readings page, at
	   <hhttttpp::////ggcccc..ggnnuu..oorrgg//rreeaaddiinnggss..hhttmmll>.

       --WWrreettuurrnn--ttyyppee
	   Warn whenever a function is defined with a return-type that
	   defaults to "int".  Also warn about any "return" statement with no
	   return-value in a function whose return-type is not "void".

	   For C++, a function without return type always produces a diagnos-
	   tic message, even when --WWnnoo--rreettuurrnn--ttyyppee is specified.  The only
	   exceptions are mmaaiinn and functions defined in system headers.

       --WWsswwiittcchh
	   Warn whenever a "switch" statement has an index of enumeral type
	   and lacks a "case" for one or more of the named codes of that enu-
	   meration.  (The presence of a "default" label prevents this warn-
	   ing.)  "case" labels outside the enumeration range also provoke
	   warnings when this option is used.

       --WWsswwiittcchh--ddeeffaauulltt
	   Warn whenever a "switch" statement does not have a "default" case.

       --WWsswwiittcchh--eennuumm
	   Warn whenever a "switch" statement has an index of enumeral type
	   and lacks a "case" for one or more of the named codes of that
	   enumeration.	 "case" labels outside the enumeration range also pro-
	   voke warnings when this option is used.

       --WWttrriiggrraapphhss
	   Warn if any trigraphs are encountered that might change the meaning
	   of the program (trigraphs within comments are not warned about).

       --WWuunnuusseedd--ffuunnccttiioonn
	   Warn whenever a static function is declared but not defined or a
	   non\-inline static function is unused.

       --WWuunnuusseedd--llaabbeell
	   Warn whenever a label is declared but not used.

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--ppaarraammeetteerr
	   Warn whenever a function parameter is unused aside from its decla-
	   ration.

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaarriiaabbllee
	   Warn whenever a local variable or non-constant static variable is
	   unused aside from its declaration

	   To suppress this warning use the uunnuusseedd attribute.

       --WWuunnuusseedd--vvaalluuee
	   Warn whenever a statement computes a result that is explicitly not
	   used.

	   To suppress this warning cast the expression to vvooiidd.

       --WWuunnuusseedd
	   All the above --WWuunnuusseedd options combined.

	   In order to get a warning about an unused function parameter, you
	   must either specify --WW --WWuunnuusseedd or separately specify
	   --WWuunnuusseedd--ppaarraammeetteerr.

       --WWuunniinniittiiaalliizzeedd
	   Warn if an automatic variable is used without first being initial-
	   ized or if a variable may be clobbered by a "setjmp" call.

	   These warnings are possible only in optimizing compilation, because
	   they require data flow information that is computed only when opti-
	   mizing.  If you don't specify --OO, you simply won't get these warn-
	   ings.

	   These warnings occur only for variables that are candidates for
	   register allocation.	 Therefore, they do not occur for a variable
	   that is declared "volatile", or whose address is taken, or whose
	   size is other than 1, 2, 4 or 8 bytes.  Also, they do not occur for
	   structures, unions or arrays, even when they are in registers.

	   Note that there may be no warning about a variable that is used
	   only to compute a value that itself is never used, because such
	   computations may be deleted by data flow analysis before the warn-
	   ings are printed.

	   These warnings are made optional because GCC is not smart enough to
	   see all the reasons why the code might be correct despite appearing
	   to have an error.  Here is one example of how this can happen:

		   {
		     int x;
		     switch (y)
		       {
		       case 1: x = 1;
			 break;
		       case 2: x = 4;
			 break;
		       case 3: x = 5;
		       }
		     foo (x);
		   }

	   If the value of "y" is always 1, 2 or 3, then "x" is always ini-
	   tialized, but GCC doesn't know this.	 Here is another common case:

		   {
		     int save_y;
		     if (change_y) save_y = y, y = new_y;
		     ...
		     if (change_y) y = save_y;
		   }

	   This has no bug because "save_y" is used only if it is set.

	   This option also warns when a non-volatile automatic variable might
	   be changed by a call to "longjmp".  These warnings as well are pos-
	   sible only in optimizing compilation.

	   The compiler sees only the calls to "setjmp".  It cannot know where
	   "longjmp" will be called; in fact, a signal handler could call it
	   at any point in the code.  As a result, you may get a warning even
	   when there is in fact no problem because "longjmp" cannot in fact
	   be called at the place which would cause a problem.

	   Some spurious warnings can be avoided if you declare all the func-
	   tions you use that never return as "noreturn".

       --WWuunnkknnoowwnn--pprraaggmmaass
	   Warn when a #pragma directive is encountered which is not under-
	   stood by GCC.  If this command line option is used, warnings will
	   even be issued for unknown pragmas in system header files.  This is
	   not the case if the warnings were only enabled by the --WWaallll command
	   line option.

       --WWssttrriicctt--aalliiaassiinngg
	   This option is only active when --ffssttrriicctt--aalliiaassiinngg is active.	 It
	   warns about code which might break the strict aliasing rules that
	   the compiler is using for optimization. The warning does not catch
	   all cases, but does attempt to catch the more common pitfalls. It
	   is included in --WWaallll.

       --WWaallll
	   All of the above --WW options combined.  This enables all the warn-
	   ings about constructions that some users consider questionable, and
	   that are easy to avoid (or modify to prevent the warning), even in
	   conjunction with macros.  This also enables some language-specific
	   warnings described in @ref{C++ Dialect Options} and @ref{Objec-
	   tive-C Dialect Options}.

       --WWmmoosstt
	   This is equivalent to -Wall -Wno-parentheses. (APPLE ONLY)

       The following --WW...... options are not implied by --WWaallll.  Some of them
       warn about constructions that users generally do not consider question-
       able, but which occasionally you might wish to check for; others warn
       about constructions that are necessary or hard to avoid in some cases,
       and there is no simple way to modify the code to suppress the warning.

       --WW  Print extra warning messages for these events:

	   *   A function can return either with or without a value.  (Falling
	       off the end of the function body is considered returning with-
	       out a value.)  For example, this function would evoke such a
	       warning:

		       foo (a)
		       {
			 if (a > 0)
			   return a;
		       }

	   *   An expression-statement or the left-hand side of a comma
	       expression contains no side effects.  To suppress the warning,
	       cast the unused expression to void.  For example, an expression
	       such as xx[[ii,,jj]] will cause a warning, but xx[[((vvooiidd))ii,,jj]] will not.

	   *   An unsigned value is compared against zero with << or <<==.

	   *   A comparison like xx<<==yy<<==zz appears; this is equivalent to ((xx<<==yy
	       ?? 11 :: 00)) <<== zz, which is a different interpretation from that of
	       ordinary mathematical notation.

	   *   Storage-class specifiers like "static" are not the first things
	       in a declaration.  According to the C Standard, this usage is
	       obsolescent.

	   *   The return type of a function has a type qualifier such as
	       "const".	 Such a type qualifier has no effect, since the value
	       returned by a function is not an lvalue.	 (But don't warn about
	       the GNU extension of "volatile void" return types.  That exten-
	       sion will be warned about if --ppeeddaannttiicc is specified.)

	   *   If --WWaallll or --WWuunnuusseedd is also specified, warn about unused argu-
	       ments.

	   *   A comparison between signed and unsigned values could produce
	       an incorrect result when the signed value is converted to
	       unsigned.  (But don't warn if --WWnnoo--ssiiggnn--ccoommppaarree is also speci-
	       fied.)

	   *   An aggregate has a partly bracketed initializer.	 For example,
	       the following code would evoke such a warning, because braces
	       are missing around the initializer for "x.h":

		       struct s { int f, g; };
		       struct t { struct s h; int i; };
		       struct t x = { 1, 2, 3 };

	   *   An aggregate has an initializer which does not initialize all
	       members.	 For example, the following code would cause such a
	       warning, because "x.h" would be implicitly initialized to zero:

		       struct s { int f, g, h; };
		       struct s x = { 3, 4 };

       --WWnnoo--ddiivv--bbyy--zzeerroo
	   Do not warn about compile-time integer division by zero.  Floating
	   point division by zero is not warned about, as it can be a legiti-
	   mate way of obtaining infinities and NaNs.

       --WWssyysstteemm--hheeaaddeerrss
	   Print warning messages for constructs found in system header files.
	   Warnings from system headers are normally suppressed, on the
	   assumption that they usually do not indicate real problems and
	   would only make the compiler output harder to read.	Using this
	   command line option tells GCC to emit warnings from system headers
	   as if they occurred in user code.  However, note that using --WWaallll
	   in conjunction with this option will _n_o_t warn about unknown pragmas
	   in system headers---for that, --WWuunnkknnoowwnn--pprraaggmmaass must also be used.

       --WWffllooaatt--eeqquuaall
	   Warn if floating point values are used in equality comparisons.

	   The idea behind this is that sometimes it is convenient (for the
	   programmer) to consider floating-point values as approximations to
	   infinitely precise real numbers.  If you are doing this, then you
	   need to compute (by analyzing the code, or in some other way) the
	   maximum or likely maximum error that the computation introduces,
	   and allow for it when performing comparisons (and when producing
	   output, but that's a different problem).  In particular, instead of
	   testing for equality, you would check to see whether the two values
	   have ranges that overlap; and this is done with the relational
	   operators, so equality comparisons are probably mistaken.

       --WWttrraaddiittiioonnaall (C only)
	   Warn about certain constructs that behave differently in tradi-
	   tional and ISO C.  Also warn about ISO C constructs that have no
	   traditional C equivalent, and/or problematic constructs which
	   should be avoided.

	   *   Macro parameters that appear within string literals in the
	       macro body.  In traditional C macro replacement takes place
	       within string literals, but does not in ISO C.

	   *   In traditional C, some preprocessor directives did not exist.
	       Traditional preprocessors would only consider a line to be a
	       directive if the ## appeared in column 1 on the line.  Therefore
	       --WWttrraaddiittiioonnaall warns about directives that traditional C under-
	       stands but would ignore because the ## does not appear as the
	       first character on the line.  It also suggests you hide direc-
	       tives like ##pprraaggmmaa not understood by traditional C by indenting
	       them.  Some traditional implementations would not recognize
	       ##eelliiff, so it suggests avoiding it altogether.

	   *   A function-like macro that appears without arguments.

	   *   The unary plus operator.

	   *   The UU integer constant suffix, or the FF or LL floating point
	       constant suffixes.  (Traditional C does support the LL suffix on
	       integer constants.)  Note, these suffixes appear in macros
	       defined in the system headers of most modern systems, e.g. the
	       __MMIINN/__MMAAXX macros in "<limits.h>".  Use of these macros in user
	       code might normally lead to spurious warnings, however gcc's
	       integrated preprocessor has enough context to avoid warning in
	       these cases.

	   *   A function declared external in one block and then used after
	       the end of the block.

	   *   A "switch" statement has an operand of type "long".

	   *   A non-"static" function declaration follows a "static" one.
	       This construct is not accepted by some traditional C compilers.

	   *   The ISO type of an integer constant has a different width or
	       signedness from its traditional type.  This warning is only
	       issued if the base of the constant is ten.  I.e. hexadecimal or
	       octal values, which typically represent bit patterns, are not
	       warned about.

	   *   Usage of ISO string concatenation is detected.

	   *   Initialization of automatic aggregates.

	   *   Identifier conflicts with labels.  Traditional C lacks a sepa-
	       rate namespace for labels.

	   *   Initialization of unions.  If the initializer is zero, the
	       warning is omitted.  This is done under the assumption that the
	       zero initializer in user code appears conditioned on e.g.
	       "__STDC__" to avoid missing initializer warnings and relies on
	       default initialization to zero in the traditional C case.

	   *   Conversions by prototypes between fixed/floating point values
	       and vice versa.	The absence of these prototypes when compiling
	       with traditional C would cause serious problems.	 This is a
	       subset of the possible conversion warnings, for the full set
	       use --WWccoonnvveerrssiioonn.

	   *   Use of ISO C style function definitions.	 This warning inten-
	       tionally is _n_o_t issued for prototype declarations or variadic
	       functions because these ISO C features will appear in your code
	       when using libiberty's traditional C compatibility macros,
	       "PARAMS" and "VPARAMS".	This warning is also bypassed for
	       nested functions because that feature is already a gcc exten-
	       sion and thus not relevant to traditional C compatibility.

       --WWuunnddeeff
	   Warn if an undefined identifier is evaluated in an ##iiff directive.

       --WWeennddiiff--llaabbeellss
	   Warn whenever an ##eellssee or an ##eennddiiff are followed by text.

       --WWsshhaaddooww
	   Warn whenever a local variable shadows another local variable,
	   parameter or global variable or whenever a built-in function is
	   shadowed.

       --WWllaarrggeerr--tthhaann--_l_e_n
	   Warn whenever an object of larger than _l_e_n bytes is defined.

       --WWppooiinntteerr--aarriitthh
	   Warn about anything that depends on the ``size of'' a function type
	   or of "void".  GNU C assigns these types a size of 1, for conve-
	   nience in calculations with "void *" pointers and pointers to func-
	   tions.

       --WWbbaadd--ffuunnccttiioonn--ccaasstt (C only)
	   Warn whenever a function call is cast to a non-matching type.  For
	   example, warn if "int malloc()" is cast to "anything *".

       --WWccaasstt--qquuaall
	   Warn whenever a pointer is cast so as to remove a type qualifier
	   from the target type.  For example, warn if a "const char *" is
	   cast to an ordinary "char *".

       --WWccaasstt--aalliiggnn
	   Warn whenever a pointer is cast such that the required alignment of
	   the target is increased.  For example, warn if a "char *" is cast
	   to an "int *" on machines where integers can only be accessed at
	   two- or four-byte boundaries.

       --WWwwrriittee--ssttrriinnggss
	   When compiling C, give string constants the type "const
	   char[length]" so that copying the address of one into a non-"const"
	   "char *" pointer will get a warning; when compiling C++, warn about
	   the deprecated conversion from string constants to "char *".	 These
	   warnings will help you find at compile time code that can try to
	   write into a string constant, but only if you have been very care-
	   ful about using "const" in declarations and prototypes.  Otherwise,
	   it will just be a nuisance; this is why we did not make --WWaallll
	   request these warnings.

       --WWccoonnvveerrssiioonn
	   Warn if a prototype causes a type conversion that is different from
	   what would happen to the same argument in the absence of a proto-
	   type.  This includes conversions of fixed point to floating and
	   vice versa, and conversions changing the width or signedness of a
	   fixed point argument except when the same as the default promotion.

	   Also, warn if a negative integer constant expression is implicitly
	   converted to an unsigned type.  For example, warn about the assign-
	   ment "x = -1" if "x" is unsigned.  But do not warn about explicit
	   casts like "(unsigned) -1".

       --WWssiiggnn--ccoommppaarree
	   Warn when a comparison between signed and unsigned values could
	   produce an incorrect result when the signed value is converted to
	   unsigned.  This warning is enabled by --WW, and by --WWaallll in C++ only.

       --WWaaggggrreeggaattee--rreettuurrnn
	   Warn if any functions that return structures or unions are defined
	   or called.  (In languages where you can return an array, this also
	   elicits a warning.)

       --WWssttrriicctt--pprroottoottyyppeess (C only)
	   Warn if a function is declared or defined without specifying the
	   argument types.  (An old-style function definition is permitted
	   without a warning if preceded by a declaration which specifies the
	   argument types.)

       --WWmmiissssiinngg--pprroottoottyyppeess (C only)
	   Warn if a global function is defined without a previous prototype
	   declaration.	 This warning is issued even if the definition itself
	   provides a prototype.  The aim is to detect global functions that
	   fail to be declared in header files.

       --WWmmiissssiinngg--ddeeccllaarraattiioonnss
	   Warn if a global function is defined without a previous declara-
	   tion.  Do so even if the definition itself provides a prototype.
	   Use this option to detect global functions that are not declared in
	   header files.

       --WWmmiissssiinngg--nnoorreettuurrnn
	   Warn about functions which might be candidates for attribute "nore-
	   turn".  Note these are only possible candidates, not absolute ones.
	   Care should be taken to manually verify functions actually do not
	   ever return before adding the "noreturn" attribute, otherwise sub-
	   tle code generation bugs could be introduced.  You will not get a
	   warning for "main" in hosted C environments.

       --WWmmiissssiinngg--ffoorrmmaatt--aattttrriibbuuttee
	   If --WWffoorrmmaatt is enabled, also warn about functions which might be
	   candidates for "format" attributes.	Note these are only possible
	   candidates, not absolute ones.  GCC will guess that "format"
	   attributes might be appropriate for any function that calls a func-
	   tion like "vprintf" or "vscanf", but this might not always be the
	   case, and some functions for which "format" attributes are appro-
	   priate may not be detected.	This option has no effect unless
	   --WWffoorrmmaatt is enabled (possibly by --WWaallll).

       --WWnnoo--mmuullttiicchhaarr
	   Do not warn if a multicharacter constant (''FFOOOOFF'') is used.  Usually
	   they indicate a typo in the user's code, as they have implementa-
	   tion-defined values, and should not be used in portable code.

       --WWnnoo--ddeepprreeccaatteedd--ddeeccllaarraattiioonnss
	   Do not warn about uses of functions, variables, and types marked as
	   deprecated by using the "deprecated" attribute.  (@pxref{Function
	   Attributes}, @pxref{Variable Attributes}, @pxref{Type Attributes}.)

       --WWppaacckkeedd
	   Warn if a structure is given the packed attribute, but the packed
	   attribute has no effect on the layout or size of the structure.
	   Such structures may be mis-aligned for little benefit.  For
	   instance, in this code, the variable "f.x" in "struct bar" will be
	   misaligned even though "struct bar" does not itself have the packed
	   attribute:

		   struct foo {
		     int x;
		     char a, b, c, d;
		   } __attribute__((packed));
		   struct bar {
		     char z;
		     struct foo f;
		   };

       --WWppaaddddeedd
	   Warn if padding is included in a structure, either to align an ele-
	   ment of the structure or to align the whole structure.  Sometimes
	   when this happens it is possible to rearrange the fields of the
	   structure to reduce the padding and so make the structure smaller.

       --WWrreedduunnddaanntt--ddeeccllss
	   Warn if anything is declared more than once in the same scope, even
	   in cases where multiple declaration is valid and changes nothing.

       --WWnneesstteedd--eexxtteerrnnss (C only)
	   Warn if an "extern" declaration is encountered within a function.

       --WWuunnrreeaacchhaabbllee--ccooddee
	   Warn if the compiler detects that code will never be executed.

	   This option is intended to warn when the compiler detects that at
	   least a whole line of source code will never be executed, because
	   some condition is never satisfied or because it is after a proce-
	   dure that never returns.

	   It is possible for this option to produce a warning even though
	   there are circumstances under which part of the affected line can
	   be executed, so care should be taken when removing apparently-
	   unreachable code.

	   For instance, when a function is inlined, a warning may mean that
	   the line is unreachable in only one inlined copy of the function.

	   This option is not made part of --WWaallll because in a debugging ver-
	   sion of a program there is often substantial code which checks cor-
	   rect functioning of the program and is, hopefully, unreachable
	   because the program does work.  Another common use of unreachable
	   code is to provide behavior which is selectable at compile-time.

       --WWiinnlliinnee
	   Warn if a function can not be inlined and it was declared as
	   inline.

       --WWnnoo--iinnvvaalliidd--ooffffsseettooff (C++ only)
	   Suppress warnings from applying the ooffffsseettooff macro to a non-POD
	   type.

       --WWnnoo--lloonngg--ddoouubbllee
	   Inhibit warning if the lloonngg ddoouubbllee type is used. (APPLE ONLY)

       --WWiinnvvaalliidd--ppcchh
	   Warn if a precompiled header is found in the search path but can't
	   be used.

       --WWlloonngg--lloonngg
	   Warn if lloonngg lloonngg type is used.  This is default.  To inhibit the
	   warning messages, use --WWnnoo--lloonngg--lloonngg.  Flags --WWlloonngg--lloonngg and
	   --WWnnoo--lloonngg--lloonngg are taken into account only when --ppeeddaannttiicc flag is
	   used.

       --WWddiissaabblleedd--ooppttiimmiizzaattiioonn
	   Warn if a requested optimization pass is disabled.  This warning
	   does not generally indicate that there is anything wrong with your
	   code; it merely indicates that GCC's optimizers were unable to han-
	   dle the code effectively.  Often, the problem is that your code is
	   too big or too complex; GCC will refuse to optimize programs when
	   the optimization itself is likely to take inordinate amounts of
	   time.

       --WWeerrrroorr
	   Make all warnings into errors.

       OOppttiioonnss ffoorr DDeebbuuggggiinngg YYoouurr PPrrooggrraamm oorr GGCCCC

       GCC has various special options that are used for debugging either your
       program or GCC:

       --gg  Produce debugging information in the operating system's native for-
	   mat (stabs, COFF, XCOFF, or DWARF).	GDB can work with this debug-
	   ging information.

	   On most systems that use stabs format, --gg enables use of extra
	   debugging information that only GDB can use; this extra information
	   makes debugging work better in GDB but will probably make other
	   debuggers crash or refuse to read the program.  If you want to con-
	   trol for certain whether to generate the extra information, use
	   --ggssttaabbss++ or --ggssttaabbss (see below).

	   Unlike most other C compilers, GCC allows you to use --gg with --OO.
	   The shortcuts taken by optimized code may occasionally produce sur-
	   prising results: some variables you declared may not exist at all;
	   flow of control may briefly move where you did not expect it; some
	   statements may not be executed because they compute constant
	   results or their values were already at hand; some statements may
	   execute in different places because they were moved out of loops.

	   Nevertheless it proves possible to debug optimized output.  This
	   makes it reasonable to use the optimizer for programs that might
	   have bugs.

	   The following options are useful when GCC is generated with the
	   capability for more than one debugging format.

       --ggggddbb
	   Produce debugging information for use by GDB.  This means to use
	   the most expressive format available (DWARF 2, stabs, or the native
	   format if neither of those are supported), including GDB extensions
	   if at all possible.

       --ggssttaabbss
	   Produce debugging information in stabs format (if that is sup-
	   ported), without GDB extensions.  This is the format used by DBX on
	   most BSD systems.  On MIPS, Alpha and System V Release 4 systems
	   this option produces stabs debugging output which is not understood
	   by DBX or SDB.  On System V Release 4 systems this option requires
	   the GNU assembler.

       --ggssttaabbss++
	   Produce debugging information in stabs format (if that is sup-
	   ported), using GNU extensions understood only by the GNU debugger
	   (GDB).  The use of these extensions is likely to make other debug-
	   gers crash or refuse to read the program.

	   (Other debug formats, such as --ggccooffff, are not supported in Darwin
	   or Mac OS X.)

       --gg_l_e_v_e_l
       --ggggddbb_l_e_v_e_l
       --ggssttaabbss_l_e_v_e_l
	   Request debugging information and also use _l_e_v_e_l to specify how
	   much information.  The default level is 2.

	   Level 1 produces minimal information, enough for making backtraces
	   in parts of the program that you don't plan to debug.  This
	   includes descriptions of functions and external variables, but no
	   information about local variables and no line numbers.

	   Level 3 includes extra information, such as all the macro defini-
	   tions present in the program.  Some debuggers support macro expan-
	   sion when you use --gg33.

	   Note that in order to avoid confusion between DWARF1 debug level 2,
	   and DWARF2, neither --ggddwwaarrff nor --ggddwwaarrff--22 accept a concatenated
	   debug level.	 Instead use an additional --gg_l_e_v_e_l option to change
	   the debug level for DWARF1 or DWARF2.

       --ffeelliimmiinnaattee--ddwwaarrff22--dduuppss
	   Compress DWARF2 debugging information by eliminating duplicated
	   information about each symbol.  This option only makes sense when
	   generating DWARF2 debugging information with --ggddwwaarrff--22.

       --pp  Generate extra code to write profile information suitable for the
	   analysis program pprrooff.  You must use this option when compiling the
	   source files you want data about, and you must also use it when
	   linking.

       --ppgg Generate extra code to write profile information suitable for the
	   analysis program ggpprrooff.  You must use this option when compiling
	   the source files you want data about, and you must also use it when
	   linking.

       --QQ  Makes the compiler print out each function name as it is compiled,
	   and print some statistics about each pass when it finishes.

       --ffttiimmee--rreeppoorrtt
	   Makes the compiler print some statistics about the time consumed by
	   each pass when it finishes.

       --ffmmeemm--rreeppoorrtt
	   Makes the compiler print some statistics about permanent memory
	   allocation when it finishes.

       --ffpprrooffiillee--aarrccss
	   Instrument _a_r_c_s during compilation to generate coverage data or for
	   profile-directed block ordering.  During execution the program
	   records how many times each branch is executed and how many times
	   it is taken.	 When the compiled program exits it saves this data to
	   a file called _a_u_x_n_a_m_e_._d_a for each source file.  _a_u_x_n_a_m_e is gener-
	   ated from the name of the output file, if explicitly specified and
	   it is not the final executable, otherwise it is the basename of the
	   source file. In both cases any suffix is removed (e.g.  _f_o_o_._d_a for
	   input file _d_i_r_/_f_o_o_._c, or _d_i_r_/_f_o_o_._d_a for output file specified as --oo
	   ddiirr//ffoooo..oo).

	   For profile-directed block ordering, compile the program with
	   --ffpprrooffiillee--aarrccss plus optimization and code generation options, gen-
	   erate the arc profile information by running the program on a
	   selected workload, and then compile the program again with the same
	   optimization and code generation options plus --ffbbrraanncchh--pprroobbaabbiillii--
	   ttiieess.

	   The other use of --ffpprrooffiillee--aarrccss is for use with ggccoovv, when it is
	   used with the --fftteesstt--ccoovveerraaggee option.

	   With --ffpprrooffiillee--aarrccss, for each function of your program GCC creates
	   a program flow graph, then finds a spanning tree for the graph.
	   Only arcs that are not on the spanning tree have to be instru-
	   mented: the compiler adds code to count the number of times that
	   these arcs are executed.  When an arc is the only exit or only
	   entrance to a block, the instrumentation code can be added to the
	   block; otherwise, a new basic block must be created to hold the
	   instrumentation code.

       --fftteesstt--ccoovveerraaggee
	   Create data files for the ggccoovv code-coverage utility.  See --ffpprroo--
	   ffiillee--aarrccss option above for a description of _a_u_x_n_a_m_e.

	   _a_u_x_n_a_m_e..bbbb
	       A mapping from basic blocks to line numbers, which ggccoovv uses to
	       associate basic block execution counts with line numbers.

	   _a_u_x_n_a_m_e..bbbbgg
	       A list of all arcs in the program flow graph.  This allows ggccoovv
	       to reconstruct the program flow graph, so that it can compute
	       all basic block and arc execution counts from the information
	       in the _a_u_x_n_a_m_e_._d_a file.

	   Use --fftteesstt--ccoovveerraaggee with --ffpprrooffiillee--aarrccss; the latter option adds
	   instrumentation to the program, which then writes execution counts
	   to another data file:

	   _a_u_x_n_a_m_e..ddaa
	       Runtime arc execution counts, used in conjunction with the arc
	       information in the file _a_u_x_n_a_m_e_._b_b_g.

	   Coverage data will map better to the source files if --fftteesstt--ccoovveerr--
	   aaggee is used without optimization.

       --dd_l_e_t_t_e_r_s
	   Says to make debugging dumps during compilation at times specified
	   by _l_e_t_t_e_r_s.	This is used for debugging the compiler.  The file
	   names for most of the dumps are made by appending a pass number and
	   a word to the _d_u_m_p_n_a_m_e. _d_u_m_p_n_a_m_e is generated from the name of the
	   output file, if explicitly specified and it is not an executable,
	   otherwise it is the basename of the source file. In both cases any
	   suffix is removed (e.g.  _f_o_o_._0_0_._r_t_l or _f_o_o_._0_1_._s_i_b_l_i_n_g).  Here are
	   the possible letters for use in _l_e_t_t_e_r_s, and their meanings:

	   AA   Annotate the assembler output with miscellaneous debugging
	       information.

	   bb   Dump after computing branch probabilities, to _f_i_l_e_._1_4_._b_p.

	   BB   Dump after block reordering, to _f_i_l_e_._3_2_._b_b_r_o.

	   cc   Dump after instruction combination, to the file _f_i_l_e_._1_9_._c_o_m_-
	       _b_i_n_e.

	   CC   Dump after the first if conversion, to the file _f_i_l_e_._1_5_._c_e_1.

	   dd   Dump after delayed branch scheduling, to _f_i_l_e_._3_4_._d_b_r.

	   DD   Dump all macro definitions, at the end of preprocessing, in
	       addition to normal output.

	   ee   Dump after SSA optimizations, to _f_i_l_e_._0_4_._s_s_a and _f_i_l_e_._0_7_._u_s_s_a.

	   EE   Dump after the second if conversion, to _f_i_l_e_._2_9_._c_e_3.

	   ff   Dump after life analysis, to _f_i_l_e_._1_8_._l_i_f_e.

	   FF   Dump after purging "ADDRESSOF" codes, to _f_i_l_e_._1_0_._a_d_d_r_e_s_s_o_f.

	   gg   Dump after global register allocation, to _f_i_l_e_._2_4_._g_r_e_g.

	   hh   Dump after finalization of EH handling code, to _f_i_l_e_._0_2_._e_h.

	   kk   Dump after reg-to-stack conversion, to _f_i_l_e_._3_1_._s_t_a_c_k.

	   oo   Dump after post-reload optimizations, to _f_i_l_e_._2_5_._p_o_s_t_r_e_l_o_a_d.

	   GG   Dump after GCSE, to _f_i_l_e_._1_1_._g_c_s_e.

	   ii   Dump after sibling call optimizations, to _f_i_l_e_._0_1_._s_i_b_l_i_n_g.

	   jj   Dump after the first jump optimization, to _f_i_l_e_._0_3_._j_u_m_p.

	   kk   Dump after conversion from registers to stack, to
	       _f_i_l_e_._3_1_._s_t_a_c_k.

	   ll   Dump after local register allocation, to _f_i_l_e_._2_3_._l_r_e_g.

	   LL   Dump after loop optimization, to _f_i_l_e_._1_2_._l_o_o_p.

	   MM   Dump after performing the machine dependent reorganization
	       pass, to _f_i_l_e_._3_3_._m_a_c_h.

	   nn   Dump after register renumbering, to _f_i_l_e_._2_8_._r_n_r_e_g.

	   NN   Dump after the register move pass, to _f_i_l_e_._2_1_._r_e_g_m_o_v_e.

	   rr   Dump after RTL generation, to _f_i_l_e_._0_0_._r_t_l.

	   RR   Dump after the second scheduling pass, to _f_i_l_e_._3_0_._s_c_h_e_d_2.

	   ss   Dump after CSE (including the jump optimization that sometimes
	       follows CSE), to _f_i_l_e_._0_9_._c_s_e.

	   SS   Dump after the first scheduling pass, to _f_i_l_e_._2_2_._s_c_h_e_d.

	   tt   Dump after the second CSE pass (including the jump optimization
	       that sometimes follows CSE), to _f_i_l_e_._1_7_._c_s_e_2.

	   uu   Dump after null pointer elimination pass to _f_i_l_e_._0_8_._n_u_l_l.

	   ww   Dump after the second flow pass, to _f_i_l_e_._2_6_._f_l_o_w_2.

	   XX   Dump after SSA dead code elimination, to _f_i_l_e_._0_6_._s_s_a_d_c_e.

	   zz   Dump after the peephole pass, to _f_i_l_e_._2_7_._p_e_e_p_h_o_l_e_2.

	   aa   Produce all the dumps listed above.

	   mm   Print statistics on memory usage, at the end of the run, to
	       standard error.

	   pp   Annotate the assembler output with a comment indicating which
	       pattern and alternative was used.  The length of each instruc-
	       tion is also printed.

	   PP   Dump the RTL in the assembler output as a comment before each
	       instruction.  Also turns on --ddpp annotation.

	   vv   For each of the other indicated dump files (except for
	       _f_i_l_e_._0_0_._r_t_l), dump a representation of the control flow graph
	       suitable for viewing with VCG to _f_i_l_e_._p_a_s_s_._v_c_g.

	   xx   Just generate RTL for a function instead of compiling it.  Usu-
	       ally used with rr.

	   yy   Dump debugging information during parsing, to standard error.

       --ffdduummpp--uunnnnuummbbeerreedd
	   When doing debugging dumps (see --dd option above), suppress instruc-
	   tion numbers and line number note output.  This makes it more fea-
	   sible to use diff on debugging dumps for compiler invocations with
	   different options, in particular with and without --gg.

       --ffdduummpp--ttrraannssllaattiioonn--uunniitt (C and C++ only)
       --ffdduummpp--ttrraannssllaattiioonn--uunniitt--_o_p_t_i_o_n_s (C and C++ only)
	   Dump a representation of the tree structure for the entire transla-
	   tion unit to a file.	 The file name is made by appending _._t_u to the
	   source file name.  If the --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s controls
	   the details of the dump as described for the --ffdduummpp--ttrreeee options.

       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy (C++ only)
       --ffdduummpp--ccllaassss--hhiieerraarrcchhyy--_o_p_t_i_o_n_s (C++ only)
	   Dump a representation of each class's hierarchy and virtual func-
	   tion table layout to a file.	 The file name is made by appending
	   _._c_l_a_s_s to the source file name.  If the --_o_p_t_i_o_n_s form is used,
	   _o_p_t_i_o_n_s controls the details of the dump as described for the
	   --ffdduummpp--ttrreeee options.

       --ffdduummpp--ttrreeee--_s_w_i_t_c_h (C++ only)
       --ffdduummpp--ttrreeee--_s_w_i_t_c_h--_o_p_t_i_o_n_s (C++ only)
	   Control the dumping at various stages of processing the intermedi-
	   ate language tree to a file.	 The file name is generated by append-
	   ing a switch specific suffix to the source file name.  If the
	   --_o_p_t_i_o_n_s form is used, _o_p_t_i_o_n_s is a list of -- separated options
	   that control the details of the dump. Not all options are applica-
	   ble to all dumps, those which are not meaningful will be ignored.
	   The following options are available

	   aaddddrreessss
	       Print the address of each node.	Usually this is not meaningful
	       as it changes according to the environment and source file. Its
	       primary use is for tying up a dump file with a debug environ-
	       ment.

	   sslliimm
	       Inhibit dumping of members of a scope or body of a function
	       merely because that scope has been reached. Only dump such
	       items when they are directly reachable by some other path.

	   aallll Turn on all options.

	   The following tree dumps are possible:

	   oorriiggiinnaall
	       Dump before any tree based optimization, to _f_i_l_e_._o_r_i_g_i_n_a_l.

	   ooppttiimmiizzeedd
	       Dump after all tree based optimization, to _f_i_l_e_._o_p_t_i_m_i_z_e_d.

	   iinnlliinneedd
	       Dump after function inlining, to _f_i_l_e_._i_n_l_i_n_e_d.

       --ffsscchheedd--vveerrbboossee==_n
	   On targets that use instruction scheduling, this option controls
	   the amount of debugging output the scheduler prints.	 This informa-
	   tion is written to standard error, unless --ddSS or --ddRR is specified,
	   in which case it is output to the usual dump listing file, _._s_c_h_e_d
	   or _._s_c_h_e_d_2 respectively.  However for _n greater than nine, the out-
	   put is always printed to standard error.

	   For _n greater than zero, --ffsscchheedd--vveerrbboossee outputs the same informa-
	   tion as --ddRRSS.  For _n greater than one, it also output basic block
	   probabilities, detailed ready list information and unit/insn info.
	   For _n greater than two, it includes RTL at abort point, control-
	   flow and regions info.  And for _n over four, --ffsscchheedd--vveerrbboossee also
	   includes dependence info.

       --ssaavvee--tteemmppss
	   Store the usual ``temporary'' intermediate files permanently; place
	   them in the current directory and name them based on the source
	   file.  Thus, compiling _f_o_o_._c with --cc --ssaavvee--tteemmppss would produce
	   files _f_o_o_._i and _f_o_o_._s, as well as _f_o_o_._o.  This creates a prepro-
	   cessed _f_o_o_._i output file even though the compiler now normally uses
	   an integrated preprocessor.

       --ttiimmee
	   Report the CPU time taken by each subprocess in the compilation
	   sequence.  For C source files, this is the compiler proper and
	   assembler (plus the linker if linking is done).  The output looks
	   like this:

		   # cc1 0.12 0.01
		   # as 0.00 0.01

	   The first number on each line is the ``user time,'' that is time
	   spent executing the program itself.	The second number is ``system
	   time,'' time spent executing operating system routines on behalf of
	   the program.	 Both numbers are in seconds.

       --ffssaavvee--rreeppoossiittoorryy==_l_o_c_a_t_i_o_n
	   Creates separate symbol repository at _l_o_c_a_t_i_o_n for given input
	   header file. Separate repository contains only debugging symbols in
	   stabs format.

       --ggrreeppoossiittoorryy
	   Instructs compiler to use separate symbol repository with debugging
	   symbols. Compiler searches for such repositories in include paths.

       --pprriinntt--ffiillee--nnaammee==_l_i_b_r_a_r_y
	   Print the full absolute name of the library file _l_i_b_r_a_r_y that would
	   be used when linking---and don't do anything else.  With this
	   option, GCC does not compile or link anything; it just prints the
	   file name.

       --pprriinntt--mmuullttii--ddiirreeccttoorryy
	   Print the directory name corresponding to the multilib selected by
	   any other switches present in the command line.  This directory is
	   supposed to exist in GGCCCC__EEXXEECC__PPRREEFFIIXX.

       --pprriinntt--mmuullttii--lliibb
	   Print the mapping from multilib directory names to compiler
	   switches that enable them.  The directory name is separated from
	   the switches by ;;, and each switch starts with an @@}} iinnsstteeaadd ooff tthhee
	   @@ssaammpp{{--, without spaces between multiple switches.  This is sup-
	   posed to ease shell-processing.

       --pprriinntt--pprroogg--nnaammee==_p_r_o_g_r_a_m
	   Like --pprriinntt--ffiillee--nnaammee, but searches for a program such as ccpppp.

       --pprriinntt--lliibbggcccc--ffiillee--nnaammee
	   Same as --pprriinntt--ffiillee--nnaammee==lliibbggcccc..aa.

	   This is useful when you use --nnoossttddlliibb or --nnooddeeffaauullttlliibbss but you do
	   want to link with _l_i_b_g_c_c_._a.	You can do

		   gcc -nostdlib <files>... `gcc -print-libgcc-file-name`

       --pprriinntt--sseeaarrcchh--ddiirrss
	   Print the name of the configured installation directory and a list
	   of program and library directories gcc will search---and don't do
	   anything else.

	   This is useful when gcc prints the error message iinnssttaallllaattiioonn pprroobb--
	   lleemm,, ccaannnnoott eexxeecc ccpppp00:: NNoo ssuucchh ffiillee oorr ddiirreeccttoorryy.  To resolve this
	   you either need to put _c_p_p_0 and the other compiler components where
	   gcc expects to find them, or you can set the environment variable
	   GGCCCC__EEXXEECC__PPRREEFFIIXX to the directory where you installed them.  Don't
	   forget the trailing '/'.

       --dduummppmmaacchhiinnee
	   Print the compiler's target machine (for example,
	   ii668866--ppcc--lliinnuuxx--ggnnuu)---and don't do anything else.

       --dduummppvveerrssiioonn
	   Print the compiler version (for example, 33..00)---and don't do any-
	   thing else.

       --dduummppssppeeccss
	   Print the compiler's built-in specs---and don't do anything else.
	   (This is used when GCC itself is being built.)

       OOppttiioonnss TThhaatt CCoonnttrrooll OOppttiimmiizzaattiioonn

       These options control various sorts of optimizations.

       Without any optimization option, the compiler's goal is to reduce the
       cost of compilation and to make debugging produce the expected results.
       Statements are independent: if you stop the program with a breakpoint
       between statements, you can then assign a new value to any variable or
       change the program counter to any other statement in the function and
       get exactly the results you would expect from the source code.

       Turning on optimization flags makes the compiler attempt to improve the
       performance and/or code size at the expense of compilation time and
       possibly the ability to debug the program.

       Not all optimizations are controlled directly by a flag.	 Only opti-
       mizations that have a flag are listed.

       --OO
       --OO11 Optimize.  Optimizing compilation takes somewhat more time, and a
	   lot more memory for a large function.

	   With --OO, the compiler tries to reduce code size and execution time,
	   without performing any optimizations that take a great deal of com-
	   pilation time.

	   In Apple's version of GCC, --ffssttrriicctt--aalliiaassiinngg, --ffrreeoorrddeerr--bblloocckkss, and
	   --ffsscchheedd--iinntteerrbblloocckk are disabled by default when optimizing.

       --OO22 Optimize even more.	GCC performs nearly all supported optimiza-
	   tions that do not involve a space-speed tradeoff.  The compiler
	   does not perform loop unrolling or function inlining when you spec-
	   ify --OO22.  As compared to --OO, this option increases both compilation
	   time and the performance of the generated code.

	   --OO22 turns on all optimization flags specified by --OO.	 It also turns
	   on the following optimization flags: --ffffoorrccee--mmeemm --ffooppttiimmiizzee--ssiibb--
	   lliinngg--ccaallllss --ffssttrreennggtthh--rreedduuccee --ffccssee--ffoollllooww--jjuummppss  --ffccssee--sskkiipp--bblloocckkss
	   --ffrreerruunn--ccssee--aafftteerr--lloooopp  --ffrreerruunn--lloooopp--oopptt --ffggccssee   --ffggccssee--llmm
	   --ffggccssee--ssmm --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
	   --ffrreeggmmoovvee --ffsscchheedduullee--iinnssnnss  --ffsscchheedduullee--iinnssnnss22 --ffsscchheedd--iinntteerrbblloocckk
	   --ffsscchheedd--ssppeecc --ffccaalllleerr--ssaavveess --ffppeeeepphhoollee22 --ffrreeoorrddeerr--bblloocckkss  --ffrree--
	   oorrddeerr--ffuunnccttiioonnss --ffssttrriicctt--aalliiaassiinngg --ffaalliiggnn--ffuunnccttiioonnss	--ffaalliiggnn--jjuummppss
	   --ffaalliiggnn--llooooppss  --ffaalliiggnn--llaabbeellss

	   Please note the warning under --ffggccssee about invoking --OO22 on programs
	   that use computed gotos.

       --OO33 Optimize yet more.  --OO33 turns on all optimizations specified by --OO22
	   and also turns on the --ffiinnlliinnee--ffuunnccttiioonnss and --ffrreennaammee--rreeggiisstteerrss
	   options.

       --OO00 Do not optimize.  This is the default.

       --ffaasstt
	   Optimize for maximum performance. --ffaasstt changes the overall opti-
	   mization strategy of GCC in order to produce the fastest possible
	   running code for PPC7450 and G5 architectures. By default, --ffaasstt
	   optimizes for G5. Programs optimized for G5 will not run on
	   PPC7450. To optimize for PPC7450, add --mmccppuu==77445500 on command line.

	   --ffaasstt currently enables the following optimization flags (for G5
	   and PPC7450).  These flags may change in the future. You cannot
	   override any of these options if you use --ffaasstt except by setting
	   --mmccppuu==77445500. Note that --ffffaasstt--mmaatthh, --ffssttrriicctt--aalliiaassiinngg and
	   --mmaalliiggnn--nnaattuurraall are unsafe in some situations.  To build shared
	   libraries with --ffaasstt, specify --ffPPIICC on command line.

	   --OO33 --ffuunnrroollll--llooooppss --ffssttrriicctt--aalliiaassiinngg --ffsscchheedd--iinntteerrbblloocckk
	   --ffaalliiggnn--llooooppss==1166 --ffaalliiggnn--jjuummppss==1166 --ffaalliiggnn--ffuunnccttiioonnss==1166
	   --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==1155 --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==1155 --mmaalliiggnn--nnaattuurraall
	   --ffffaasstt--mmaatthh --mmddyynnaammiicc--nnoo--ppiicc --mmppoowweerrppcc--ggppoopptt --ffoorrccee__ccppuussuubbttyyppee__AALLLL
	   --ffssttrriicctt--aalliiaassiinngg --mmttuunnee==GG55 --mmccppuu==GG55 --mmppoowweerrppcc6644

       --OOss Optimize for size.  --OOss enables all --OO22 optimizations that do not
	   typically increase code size.  It also performs further optimiza-
	   tions designed to reduce code size.

	   --OOss disables the following optimization flags: --ffaalliiggnn--ffuunnccttiioonnss
	   --ffaalliiggnn--jjuummppss  --ffaalliiggnn--llooooppss --ffaalliiggnn--llaabbeellss	--ffrreeoorrddeerr--bblloocckkss
	   --ffpprreeffeettcchh--lloooopp--aarrrraayyss

	   If you use multiple --OO options, with or without level numbers, the
	   last such option is the one that is effective.

       Options of the form --ff_f_l_a_g specify machine-independent flags.  Most
       flags have both positive and negative forms; the negative form of --ffffoooo
       would be --ffnnoo--ffoooo.  In the table below, only one of the forms is
       listed---the one you typically will use.	 You can figure out the other
       form by either removing nnoo-- or adding it.

       The following options control specific optimizations.  They are either
       activated by --OO options or are related to ones that are.	 You can use
       the following flags in the rare cases when ``fine-tuning'' of optimiza-
       tions to be performed is desired.

       --ffnnoo--ddeeffaauulltt--iinnlliinnee
	   Do not make member functions inline by default merely because they
	   are defined inside the class scope (C++ only).  Otherwise, when you
	   specify --OO, member functions defined inside class scope are com-
	   piled inline by default; i.e., you don't need to add iinnlliinnee in
	   front of the member function name.

       --ffnnoo--ddeeffeerr--ppoopp
	   Always pop the arguments to each function call as soon as that
	   function returns.  For machines which must pop arguments after a
	   function call, the compiler normally lets arguments accumulate on
	   the stack for several function calls and pops them all at once.

	   Disabled at levels --OO, --OO22, --OO33, --OOss.

       --ffffoorrccee--mmeemm
	   Force memory operands to be copied into registers before doing
	   arithmetic on them.	This produces better code by making all memory
	   references potential common subexpressions.	When they are not com-
	   mon subexpressions, instruction combination should eliminate the
	   separate register-load.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffffoorrccee--aaddddrr
	   Force memory address constants to be copied into registers before
	   doing arithmetic on them.  This may produce better code just as
	   --ffffoorrccee--mmeemm may.

       --ffoommiitt--ffrraammee--ppooiinntteerr
	   Don't keep the frame pointer in a register for functions that don't
	   need one.  This avoids the instructions to save, set up and restore
	   frame pointers; it also makes an extra register available in many
	   functions.  IItt aallssoo mmaakkeess ddeebbuuggggiinngg iimmppoossssiibbllee oonn ssoommee mmaacchhiinneess..

	   On some machines, such as the VAX, this flag has no effect, because
	   the standard calling sequence automatically handles the frame
	   pointer and nothing is saved by pretending it doesn't exist.	 The
	   machine-description macro "FRAME_POINTER_REQUIRED" controls whether
	   a target machine supports this flag.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--ssiibblliinngg--ccaallllss
	   Optimize sibling and tail recursive calls.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--iinnlliinnee
	   Don't pay attention to the "inline" keyword.	 Normally this option
	   is used to keep the compiler from expanding any functions inline.
	   Note that if you are not optimizing, no functions can be expanded
	   inline.

       --ffiinnlliinnee--ffuunnccttiioonnss
	   Integrate all simple functions into their callers.  The compiler
	   heuristically decides which functions are simple enough to be worth
	   integrating in this way.

	   If all calls to a given function are integrated, and the function
	   is declared "static", then the function is normally not output as
	   assembler code in its own right.

	   Enabled at level --OO33.

       --ffiinnlliinnee--lliimmiitt==_n
	   By default, gcc limits the size of functions that can be inlined.
	   This flag allows the control of this limit for functions that are
	   explicitly marked as inline (i.e., marked with the inline keyword
	   or defined within the class definition in c++).  _n is the size of
	   functions that can be inlined in number of pseudo instructions (not
	   counting parameter handling).  The default value of _n is 600.
	   Increasing this value can result in more inlined code at the cost
	   of compilation time and memory consumption.	Decreasing usually
	   makes the compilation faster and less code will be inlined (which
	   presumably means slower programs).  This option is particularly
	   useful for programs that use inlining heavily such as those based
	   on recursive templates with C++.

	   Inlining is actually controlled by a number of parameters, which
	   may be specified individually by using ----ppaarraamm _n_a_m_e==_v_a_l_u_e.  The
	   --ffiinnlliinnee--lliimmiitt==_n option sets some of these parameters as follows:

	    @item max-inline-insns
	     is set to I<n>.
	    @item max-inline-insns-single
	     is set to I<n>/2.
	    @item max-inline-insns-single-auto
	     is set to I<n>/2.
	    @item min-inline-insns
	     is set to 130 or I<n>/4, whichever is smaller.
	    @item max-inline-insns-rtl
	     is set to I<n>.

	   Using --ffiinnlliinnee--lliimmiitt==660000 thus results in the default settings for
	   these parameters.  See below for a documentation of the individual
	   parameters controlling inlining.

	   _N_o_t_e_: pseudo instruction represents, in this particular context, an
	   abstract measurement of function's size.  In no way, it represents
	   a count of assembly instructions and as such its exact meaning
	   might change from one release to an another.

       --ffkkeeeepp--iinnlliinnee--ffuunnccttiioonnss
	   Even if all calls to a given function are integrated, and the func-
	   tion is declared "static", nevertheless output a separate run-time
	   callable version of the function.  This switch does not affect
	   "extern inline" functions.

       --ffkkeeeepp--ssttaattiicc--ccoonnssttss
	   Emit variables declared "static const" when optimization isn't
	   turned on, even if the variables aren't referenced.

	   GCC enables this option by default.	If you want to force the com-
	   piler to check if the variable was referenced, regardless of
	   whether or not optimization is turned on, use the
	   --ffnnoo--kkeeeepp--ssttaattiicc--ccoonnssttss option.

       --ffmmeerrggee--ccoonnssttaannttss
	   Attempt to merge identical constants (string constants and floating
	   point constants) across compilation units.

	   This option is the default for optimized compilation if the assem-
	   bler and linker support it.	Use --ffnnoo--mmeerrggee--ccoonnssttaannttss to inhibit
	   this behavior.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffmmeerrggee--aallll--ccoonnssttaannttss
	   Attempt to merge identical constants and identical variables.

	   This option implies --ffmmeerrggee--ccoonnssttaannttss.  In addition to --ffmmeerrggee--ccoonn--
	   ssttaannttss this considers e.g. even constant initialized arrays or ini-
	   tialized constant variables with integral or floating point types.
	   Languages like C or C++ require each non-automatic variable to have
	   distinct location, so using this option will result in non-conform-
	   ing behavior.

       --ffnnoo--bbrraanncchh--ccoouunntt--rreegg
	   Do not use ``decrement and branch'' instructions on a count regis-
	   ter, but instead generate a sequence of instructions that decrement
	   a register, compare it against zero, then branch based upon the
	   result.  This option is only meaningful on architectures that sup-
	   port such instructions, which include x86, PowerPC, IA-64 and
	   S/390.

	   The default is --ffbbrraanncchh--ccoouunntt--rreegg, enabled when --ffssttrreennggtthh--rreedduuccee
	   is enabled.

       --ffnnoo--ffuunnccttiioonn--ccssee
	   Do not put function addresses in registers; make each instruction
	   that calls a constant function contain the function's address
	   explicitly.

	   This option results in less efficient code, but some strange hacks
	   that alter the assembler output may be confused by the optimiza-
	   tions performed when this option is not used.

	   The default is --ffffuunnccttiioonn--ccssee

       --ffnnoo--zzeerroo--iinniittiiaalliizzeedd--iinn--bbssss
	   If the target supports a BSS section, GCC by default puts variables
	   that are initialized to zero into BSS.  This can save space in the
	   resulting code.

	   This option turns off this behavior because some programs explic-
	   itly rely on variables going to the data section.  E.g., so that
	   the resulting executable can find the beginning of that section
	   and/or make assumptions based on that.

	   The default is --ffzzeerroo--iinniittiiaalliizzeedd--iinn--bbssss.

       --ffssttrreennggtthh--rreedduuccee
	   Perform the optimizations of loop strength reduction and elimina-
	   tion of iteration variables.

	   Enabled at levels --OO22, --OO33, --OOss.

       --fftthhrreeaadd--jjuummppss
	   Perform optimizations where we check to see if a jump branches to a
	   location where another comparison subsumed by the first is found.
	   If so, the first branch is redirected to either the destination of
	   the second branch or a point immediately following it, depending on
	   whether the condition is known to be true or false.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccssee--ffoollllooww--jjuummppss
	   In common subexpression elimination, scan through jump instructions
	   when the target of the jump is not reached by any other path.  For
	   example, when CSE encounters an "if" statement with an "else"
	   clause, CSE will follow the jump when the condition tested is
	   false.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffccssee--sskkiipp--bblloocckkss
	   This is similar to --ffccssee--ffoollllooww--jjuummppss, but causes CSE to follow
	   jumps which conditionally skip over blocks.	When CSE encounters a
	   simple "if" statement with no else clause, --ffccssee--sskkiipp--bblloocckkss causes
	   CSE to follow the jump around the body of the "if".

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--ccssee--aafftteerr--lloooopp
	   Re-run common subexpression elimination after loop optimizations
	   has been performed.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreerruunn--lloooopp--oopptt
	   Run the loop optimizer twice.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee
	   Perform a global common subexpression elimination pass.  This pass
	   also performs global constant and copy propagation.

	   _N_o_t_e_: When compiling a program using computed gotos, a GCC exten-
	   sion, you may get better runtime performance if you disable the
	   global common subexpression elimination pass by adding --ffnnoo--ggccssee to
	   the command line.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffggccssee--llmm
	   When --ffggccssee--llmm is enabled, global common subexpression elimination
	   will attempt to move loads which are only killed by stores into
	   themselves.	This allows a loop containing a load/store sequence to
	   be changed to a load outside the loop, and a copy/store within the
	   loop.

	   Enabled by default when gcse is enabled.

       --ffggccssee--ssmm
	   When --ffggccssee--ssmm is enabled, A store motion pass is run after global
	   common subexpression elimination.  This pass will attempt to move
	   stores out of loops.	 When used in conjunction with --ffggccssee--llmm,
	   loops containing a load/store sequence can be changed to a load
	   before the loop and a store after the loop.

	   Enabled by default when gcse is enabled.

       --fflloooopp--ooppttiimmiizzee
	   Perform loop optimizations: move constant expressions out of loops,
	   simplify exit test conditions and optionally do strength-reduction
	   and loop unrolling as well.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffccrroossssjjuummppiinngg
	   Perform cross-jumping transformation. This transformation unifies
	   equivalent code and save code size. The resulting code may or may
	   not perform better than without cross-jumping.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn
	   Attempt to transform conditional jumps into branch-less equiva-
	   lents.  This include use of conditional moves, min, max, set flags
	   and abs instructions, and some tricks doable by standard arith-
	   metics.  The use of conditional execution on chips where it is
	   available is controlled by "if-conversion2".

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffiiff--ccoonnvveerrssiioonn22
	   Use conditional execution (where available) to transform condi-
	   tional jumps into branch-less equivalents.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss
	   Use global dataflow analysis to identify and eliminate useless
	   checks for null pointers.  The compiler assumes that dereferencing
	   a null pointer would have halted the program.  If a pointer is
	   checked after it has already been dereferenced, it cannot be null.

	   In some environments, this assumption is not true, and programs can
	   safely dereference null pointers.  Use
	   --ffnnoo--ddeelleettee--nnuullll--ppooiinntteerr--cchheecckkss to disable this optimization for
	   programs which depend on that behavior.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffeexxppeennssiivvee--ooppttiimmiizzaattiioonnss
	   Perform a number of minor optimizations that are relatively expen-
	   sive.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee
       --ffrreeggmmoovvee
	   Attempt to reassign register numbers in move instructions and as
	   operands of other simple instructions in order to maximize the
	   amount of register tying.  This is especially helpful on machines
	   with two-operand instructions.

	   Note --ffrreeggmmoovvee and --ffooppttiimmiizzee--rreeggiisstteerr--mmoovvee are the same optimiza-
	   tion.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffddeellaayyeedd--bbrraanncchh
	   If supported for the target machine, attempt to reorder instruc-
	   tions to exploit instruction slots available after delayed branch
	   instructions.

	   Enabled at levels --OO, --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss
	   If supported for the target machine, attempt to reorder instruc-
	   tions to eliminate execution stalls due to required data being
	   unavailable.	 This helps machines that have slow floating point or
	   memory load instructions by allowing other instructions to be
	   issued until the result of the load or floating point instruction
	   is required.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffsscchheedduullee--iinnssnnss22
	   Similar to --ffsscchheedduullee--iinnssnnss, but requests an additional pass of
	   instruction scheduling after register allocation has been done.
	   This is especially useful on machines with a relatively small num-
	   ber of registers and where memory load instructions take more than
	   one cycle.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffnnoo--sscchheedd--iinntteerrbblloocckk
	   Don't schedule instructions across basic blocks.  This is normally
	   enabled by default when scheduling before register allocation, i.e.
	   with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffnnoo--sscchheedd--ssppeecc
	   Don't allow speculative motion of non-load instructions.  This is
	   normally enabled by default when scheduling before register alloca-
	   tion, i.e.  with --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd
	   Allow speculative motion of some load instructions.	This only
	   makes sense when scheduling before register allocation, i.e. with
	   --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffsscchheedd--ssppeecc--llooaadd--ddaannggeerroouuss
	   Allow speculative motion of more load instructions.	This only
	   makes sense when scheduling before register allocation, i.e. with
	   --ffsscchheedduullee--iinnssnnss or at --OO22 or higher.

       --ffccaalllleerr--ssaavveess
	   Enable values to be allocated in registers that will be clobbered
	   by function calls, by emitting extra instructions to save and
	   restore the registers around such calls.  Such allocation is done
	   only when it seems to result in better code than would otherwise be
	   produced.

	   This option is always enabled by default on certain machines, usu-
	   ally those which have no call-preserved registers to use instead.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffmmoovvee--aallll--mmoovvaabblleess
	   Forces all invariant computations in loops to be moved outside the
	   loop.

       --ffrreedduuccee--aallll--ggiivvss
	   Forces all general-induction variables in loops to be
	   strength-reduced.

	   _N_o_t_e_: When compiling programs written in Fortran, --ffmmoovvee--aallll--mmoovv--
	   aabblleess and --ffrreedduuccee--aallll--ggiivvss are enabled by default when you use the
	   optimizer.

	   These options may generate better or worse code; results are highly
	   dependent on the structure of loops within the source code.

	   These two options are intended to be removed someday, once they
	   have helped determine the efficacy of various approaches to improv-
	   ing loop optimizations.

	   Please let us (<ggcccc@@ggcccc..ggnnuu..oorrgg> and <ffoorrttrraann@@ggnnuu..oorrgg>) know how
	   use of these options affects the performance of your production
	   code.  We're very interested in code that runs _s_l_o_w_e_r when these
	   options are _e_n_a_b_l_e_d.

       --ffnnoo--ppeeeepphhoollee
       --ffnnoo--ppeeeepphhoollee22
	   Disable any machine-specific peephole optimizations.	 The differ-
	   ence between --ffnnoo--ppeeeepphhoollee and --ffnnoo--ppeeeepphhoollee22 is in how they are
	   implemented in the compiler; some targets use one, some use the
	   other, a few use both.

	   --ffppeeeepphhoollee is enabled by default.  --ffppeeeepphhoollee22 enabled at levels
	   --OO22, --OO33, --OOss.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
       --ffnnoo--gguueessss--bbrraanncchh--pprroobbaabbiilliittyy
	   Do not guess branch probabilities using a randomized model.

	   Sometimes gcc will opt to use a randomized model to guess branch
	   probabilities, when none are available from either profiling feed-
	   back (--ffpprrooffiillee--aarrccss) or ____bbuuiillttiinn__eexxppeecctt.  This means that differ-
	   ent runs of the compiler on the same program may produce different
	   object code.

	   In a hard real-time system, people don't want different runs of the
	   compiler to produce code that has different behavior; minimizing
	   non-determinism is of paramount import.  This switch allows users
	   to reduce non-determinism, possibly at the expense of inferior
	   optimization.

	   The default is --ffgguueessss--bbrraanncchh--pprroobbaabbiilliittyy at levels --OO, --OO22, --OO33,
	   --OOss.

       --ffrreeoorrddeerr--bblloocckkss
	   Reorder basic blocks in the compiled function in order to reduce
	   number of taken branches and improve code locality.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffrreeoorrddeerr--ffuunnccttiioonnss
	   Reorder basic blocks in the compiled function in order to reduce
	   number of taken branches and improve code locality. This is imple-
	   mented by using special subsections "text.hot" for most frequently
	   executed functions and "text.unlikely" for unlikely executed func-
	   tions.  Reordering is done by the linker so object file format must
	   support named sections and linker must place them in a reasonable
	   way.

	   Also profile feedback must be available in to make this option
	   effective.  See --ffpprrooffiillee--aarrccss for details.

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffssttrriicctt--aalliiaassiinngg
	   Allows the compiler to assume the strictest aliasing rules applica-
	   ble to the language being compiled.	For C (and C++), this acti-
	   vates optimizations based on the type of expressions.  In particu-
	   lar, an object of one type is assumed never to reside at the same
	   address as an object of a different type, unless the types are
	   almost the same.  For example, an "unsigned int" can alias an
	   "int", but not a "void*" or a "double".  A character type may alias
	   any other type.

	   Pay special attention to code like this:

		   union a_union {
		     int i;
		     double d;
		   };

		   int f() {
		     a_union t;
		     t.d = 3.0;
		     return t.i;
		   }

	   The practice of reading from a different union member than the one
	   most recently written to (called ``type-punning'') is common.  Even
	   with --ffssttrriicctt--aalliiaassiinngg, type-punning is allowed, provided the mem-
	   ory is accessed through the union type.  So, the code above will
	   work as expected.  However, this code might not:

		   int f() {
		     a_union t;
		     int* ip;
		     t.d = 3.0;
		     ip = &t.i;
		     return *ip;
		   }

	   Every language that wishes to perform language-specific alias anal-
	   ysis should define a function that computes, given an "tree" node,
	   an alias set for the node.  Nodes in different alias sets are not
	   allowed to alias.  For an example, see the C front-end function
	   "c_get_alias_set".

	   Enabled at levels --OO22, --OO33, --OOss.

       --ffaalliiggnn--ffuunnccttiioonnss
       --ffaalliiggnn--ffuunnccttiioonnss==_n
	   Align the start of functions to the next power-of-two greater than
	   _n, skipping up to _n bytes.  For instance, --ffaalliiggnn--ffuunnccttiioonnss==3322
	   aligns functions to the next 32-byte boundary, but --ffaalliiggnn--ffuunncc--
	   ttiioonnss==2244 would align to the next 32-byte boundary only if this can
	   be done by skipping 23 bytes or less.

	   --ffnnoo--aalliiggnn--ffuunnccttiioonnss and --ffaalliiggnn--ffuunnccttiioonnss==11 are equivalent and
	   mean that functions will not be aligned.

	   Some assemblers only support this flag when _n is a power of two; in
	   that case, it is rounded up.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llaabbeellss
       --ffaalliiggnn--llaabbeellss==_n
	   Align all branch targets to a power-of-two boundary, skipping up to
	   _n bytes like --ffaalliiggnn--ffuunnccttiioonnss.  This option can easily make code
	   slower, because it must insert dummy operations for when the branch
	   target is reached in the usual flow of the code.

	   If --ffaalliiggnn--llooooppss or --ffaalliiggnn--jjuummppss are applicable and are greater
	   than this value, then their values are used instead.

	   If _n is not specified, use a machine-dependent default which is
	   very likely to be 11, meaning no alignment.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--llooooppss
       --ffaalliiggnn--llooooppss==_n
	   Align loops to a power-of-two boundary, skipping up to _n bytes like
	   --ffaalliiggnn--ffuunnccttiioonnss.  The hope is that the loop will be executed many
	   times, which will make up for any execution of the dummy opera-
	   tions.

       --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp
       --ffaalliiggnn--llooooppss--mmaaxx--sskkiipp==_n
	   When aligning loops to a power-of-two boundary, only do so if can
	   skip by up to _n bytes.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffaalliiggnn--jjuummppss
       --ffaalliiggnn--jjuummppss==_n
	   Align branch targets to a power-of-two boundary, for branch targets
	   where the targets can only be reached by jumping, skipping up to _n
	   bytes like --ffaalliiggnn--ffuunnccttiioonnss.  In this case, no dummy operations
	   need be executed.

       --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp
       --ffaalliiggnn--jjuummppss--mmaaxx--sskkiipp==_n
	   When aligning branch targets to a power-of-two boundary, only do so
	   if can skip by up to _n bytes.

	   If _n is not specified, use a machine-dependent default.

	   Enabled at levels --OO22, --OO33.

       --ffrreennaammee--rreeggiisstteerrss
	   Attempt to avoid false dependencies in scheduled code by making use
	   of registers left over after register allocation.  This optimiza-
	   tion will most benefit processors with lots of registers.  It can,
	   however, make debugging impossible, since variables will no longer
	   stay in a ``home register''.

	   Enabled at levels --OO33.

       --ffnnoo--ccpprroopp--rreeggiisstteerrss
	   After register allocation and post-register allocation instruction
	   splitting, we perform a copy-propagation pass to try to reduce
	   scheduling dependencies and occasionally eliminate the copy.

	   Disabled at levels --OO, --OO22, --OO33, --OOss.

       The following options control compiler behavior regarding floating
       point arithmetic.  These options trade off between speed and correct-
       ness.  All must be specifically enabled.

       --ffffllooaatt--ssttoorree
	   Do not store floating point variables in registers, and inhibit
	   other options that might change whether a floating point value is
	   taken from a register or memory.

	   This option prevents undesirable excess precision on machines such
	   as the 68000 where the floating registers (of the 68881) keep more
	   precision than a "double" is supposed to have.  Similarly for the
	   x86 architecture.  For most programs, the excess precision does
	   only good, but a few programs rely on the precise definition of
	   IEEE floating point.	 Use --ffffllooaatt--ssttoorree for such programs, after
	   modifying them to store all pertinent intermediate computations
	   into variables.

       --ffffaasstt--mmaatthh
	   Sets --ffnnoo--mmaatthh--eerrrrnnoo, --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss, --ffnnoo--ttrraapp--
	   ppiinngg--mmaatthh, --ffffiinniittee--mmaatthh--oonnllyy and --ffnnoo--ssiiggnnaalliinngg--nnaannss.

	   This option causes the preprocessor macro "__FAST_MATH__" to be
	   defined.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

       --ffnnoo--mmaatthh--eerrrrnnoo
	   Do not set ERRNO after calling math functions that are executed
	   with a single instruction, e.g., sqrt.  A program that relies on
	   IEEE exceptions for math error handling may want to use this flag
	   for speed while maintaining IEEE arithmetic compatibility.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffmmaatthh--eerrrrnnoo.

       --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
	   Allow optimizations for floating-point arithmetic that (a) assume
	   that arguments and results are valid and (b) may violate IEEE or
	   ANSI standards.  When used at link-time, it may include libraries
	   or startup files that change the default FPU control word or other
	   similar optimizations.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffnnoo--uunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss.

       --ffffiinniittee--mmaatthh--oonnllyy
	   Allow optimizations for floating-point arithmetic that assume that
	   arguments and results are not NaNs or +-Infs.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications.

	   The default is --ffnnoo--ffiinniittee--mmaatthh--oonnllyy.

       --ffnnoo--ttrraappppiinngg--mmaatthh
	   Compile code assuming that floating-point operations cannot gener-
	   ate user-visible traps.  These traps include division by zero,
	   overflow, underflow, inexact result and invalid operation.  This
	   option implies --ffnnoo--ssiiggnnaalliinngg--nnaannss.	Setting this option may allow
	   faster code if one relies on ``non-stop'' IEEE arithmetic, for
	   example.

	   This option should never be turned on by any --OO option since it can
	   result in incorrect output for programs which depend on an exact
	   implementation of IEEE or ISO rules/specifications for math func-
	   tions.

	   The default is --ffttrraappppiinngg--mmaatthh.

       --ffssiiggnnaalliinngg--nnaannss
	   Compile code assuming that IEEE signaling NaNs may generate user-
	   visible traps during floating-point operations.  Setting this
	   option disables optimizations that may change the number of excep-
	   tions visible with signaling NaNs.  This option implies --ffttrraapp--
	   ppiinngg--mmaatthh.

	   This option causes the preprocessor macro "__SUPPORT_SNAN__" to be
	   defined.

	   The default is --ffnnoo--ssiiggnnaalliinngg--nnaannss.

	   This option is experimental and does not currently guarantee to
	   disable all GCC optimizations that affect signaling NaN behavior.

       --ffssiinnggllee--pprreecciissiioonn--ccoonnssttaanntt
	   Treat floating point constant as single precision constant instead
	   of implicitly converting it to double precision constant.

       The following options control optimizations that may improve perfor-
       mance, but are not enabled by any --OO options.  This section includes
       experimental options that may produce broken code.

       --ffbbrraanncchh--pprroobbaabbiilliittiieess
	   After running a program compiled with --ffpprrooffiillee--aarrccss, you can com-
	   pile it a second time using --ffbbrraanncchh--pprroobbaabbiilliittiieess, to improve
	   optimizations based on the number of times each branch was taken.
	   When the program compiled with --ffpprrooffiillee--aarrccss exits it saves arc
	   execution counts to a file called _s_o_u_r_c_e_n_a_m_e_._d_a for each source
	   file	 The information in this data file is very dependent on the
	   structure of the generated code, so you must use the same source
	   code and the same optimization options for both compilations.

	   With --ffbbrraanncchh--pprroobbaabbiilliittiieess, GCC puts a RREEGG__BBRR__PPRROOBB note on each
	   JJUUMMPP__IINNSSNN and CCAALLLL__IINNSSNN.  These can be used to improve optimiza-
	   tion.  Currently, they are only used in one place: in _r_e_o_r_g_._c,
	   instead of guessing which path a branch is mostly to take, the
	   RREEGG__BBRR__PPRROOBB values are used to exactly determine which path is
	   taken more often.

       --ffnneeww--rraa
	   Use a graph coloring register allocator.  Currently this option is
	   meant for testing, so we are interested to hear about miscompila-
	   tions with --ffnneeww--rraa.

       --ffttrraacceerr
	   Perform tail duplication to enlarge superblock size. This transfor-
	   mation simplifies the control flow of the function allowing other
	   optimizations to do better job.

       --ffuunnrroollll--llooooppss
	   Unroll loops whose number of iterations can be determined at com-
	   pile time or upon entry to the loop.	 --ffuunnrroollll--llooooppss implies both
	   --ffssttrreennggtthh--rreedduuccee and --ffrreerruunn--ccssee--aafftteerr--lloooopp.  This option makes
	   code larger, and may or may not make it run faster.

       --ffuunnrroollll--aallll--llooooppss
	   Unroll all loops, even if their number of iterations is uncertain
	   when the loop is entered.  This usually makes programs run more
	   slowly.  --ffuunnrroollll--aallll--llooooppss implies the same options as --ffuunn--
	   rroollll--llooooppss,

       --ffpprreeffeettcchh--lloooopp--aarrrraayyss
	   If supported by the target machine, generate instructions to
	   prefetch memory to improve the performance of loops that access
	   large arrays.

	   Disabled at level --OOss.

       --ffffuunnccttiioonn--sseeccttiioonnss
       --ffddaattaa--sseeccttiioonnss
	   Place each function or data item into its own section in the output
	   file if the target supports arbitrary sections.  The name of the
	   function or the name of the data item determines the section's name
	   in the output file.

	   Use these options on systems where the linker can perform optimiza-
	   tions to improve locality of reference in the instruction space.
	   HPPA processors running HP-UX and SPARC processors running Solaris
	   2 have linkers with such optimizations.  Other systems using the
	   ELF object format as well as AIX may have these optimizations in
	   the future.

	   Only use these options when there are significant benefits from
	   doing so.  When you specify these options, the assembler and linker
	   will create larger object and executable files and will also be
	   slower.  You will not be able to use "gprof" on all systems if you
	   specify this option and you may have problems with debugging if you
	   specify both this option and --gg.

       --ffssssaa
	   Perform optimizations in static single assignment form.  Each func-
	   tion's flow graph is translated into SSA form, optimizations are
	   performed, and the flow graph is translated back from SSA form.
	   Users should not specify this option, since it is not yet ready for
	   production use.

       --ffssssaa--ccccpp
	   Perform Sparse Conditional Constant Propagation in SSA form.
	   Requires --ffssssaa.  Like --ffssssaa, this is an experimental feature.

       --ffssssaa--ddccee
	   Perform aggressive dead-code elimination in SSA form.  Requires
	   --ffssssaa.  Like --ffssssaa, this is an experimental feature.

       ----ppaarraamm _n_a_m_e==_v_a_l_u_e
	   In some places, GCC uses various constants to control the amount of
	   optimization that is done.  For example, GCC will not inline func-
	   tions that contain more that a certain number of instructions.  You
	   can control some of these constants on the command-line using the
	   ----ppaarraamm option.

	   In each case, the _v_a_l_u_e is an integer.  The allowable choices for
	   _n_a_m_e are given in the following table:

	   mmaaxx--ddeellaayy--sslloott--iinnssnn--sseeaarrcchh
	       The maximum number of instructions to consider when looking for
	       an instruction to fill a delay slot.  If more than this arbi-
	       trary number of instructions is searched, the time savings from
	       filling the delay slot will be minimal so stop searching.
	       Increasing values mean more aggressive optimization, making the
	       compile time increase with probably small improvement in exe-
	       cutable run time.

	   mmaaxx--ddeellaayy--sslloott--lliivvee--sseeaarrcchh
	       When trying to fill delay slots, the maximum number of instruc-
	       tions to consider when searching for a block with valid live
	       register information.  Increasing this arbitrarily chosen value
	       means more aggressive optimization, increasing the compile
	       time.  This parameter should be removed when the delay slot
	       code is rewritten to maintain the control-flow graph.

	   mmaaxx--ggccssee--mmeemmoorryy
	       The approximate maximum amount of memory that will be allocated
	       in order to perform the global common subexpression elimination
	       optimization.  If more memory than specified is required, the
	       optimization will not be done.

	   mmaaxx--ggccssee--ppaasssseess
	       The maximum number of passes of GCSE to run.

	   mmaaxx--ppeennddiinngg--lliisstt--lleennggtthh
	       The maximum number of pending dependencies scheduling will
	       allow before flushing the current state and starting over.
	       Large functions with few branches or calls can create exces-
	       sively large lists which needlessly consume memory and
	       resources.

	   mmaaxx--iinnlliinnee--iinnssnnss--ssiinnggllee
	       Several parameters control the tree inliner used in gcc.	 This
	       number sets the maximum number of instructions (counted in
	       gcc's internal representation) in a single function that the
	       tree inliner will consider for inlining.	 This only affects
	       functions declared inline and methods implemented in a class
	       declaration (C++).  The default value is 300.

	   mmaaxx--iinnlliinnee--iinnssnnss--aauuttoo
	       When you use --ffiinnlliinnee--ffuunnccttiioonnss (included in --OO33), a lot of
	       functions that would otherwise not be considered for inlining
	       by the compiler will be investigated.  To those functions, a
	       different (more restrictive) limit compared to functions
	       declared inline can be applied.	The default value is 300.

	   mmaaxx--iinnlliinnee--iinnssnnss
	       The tree inliner does decrease the allowable size for single
	       functions to be inlined after we already inlined the number of
	       instructions given here by repeated inlining.  This number
	       should be a factor of two or more larger than the single func-
	       tion limit.  Higher numbers result in better runtime perfor-
	       mance, but incur higher compile-time resource (CPU time, mem-
	       ory) requirements and result in larger binaries.	 Very high
	       values are not advisable, as too large binaries may adversely
	       affect runtime performance.  The default value is 600.

	   mmaaxx--iinnlliinnee--ssllooppee
	       After exceeding the maximum number of inlined instructions by
	       repeated inlining, a linear function is used to decrease the
	       allowable size for single functions.  The slope of that func-
	       tion is the negative reciprocal of the number specified here.
	       The default value is 32.

	   mmiinn--iinnlliinnee--iinnssnnss
	       The repeated inlining is throttled more and more by the linear
	       function after exceeding the limit.  To avoid too much throt-
	       tling, a minimum for this function is specified here to allow
	       repeated inlining for very small functions even when a lot of
	       repeated inlining already has been done.	 The default value is
	       130.

	   mmaaxx--iinnlliinnee--iinnssnnss--rrttll
	       For languages that use the RTL inliner (this happens at a later
	       stage than tree inlining), you can set the maximum allowable
	       size (counted in RTL instructions) for the RTL inliner with
	       this parameter.	The default value is 600.

	   mmaaxx--uunnrroolllleedd--iinnssnnss
	       The maximum number of instructions that a loop should have if
	       that loop is unrolled, and if the loop is unrolled, it deter-
	       mines how many times the loop code is unrolled.

	   hhoott--bbbb--ccoouunntt--ffrraaccttiioonn
	       Select fraction of the maximal count of repetitions of basic
	       block in program given basic block needs to have to be consid-
	       ered hot.

	   hhoott--bbbb--ffrreeqquueennccyy--ffrraaccttiioonn
	       Select fraction of the maximal frequency of executions of basic
	       block in function given basic block needs to have to be consid-
	       ered hot

	   ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee
	   ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk
	       This value is used to limit superblock formation once the given
	       percentage of executed instructions is covered.	This limits
	       unnecessary code size expansion.

	       The ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee--ffeeeeddbbaacckk is used only when profile
	       feedback is available.  The real profiles (as opposed to stati-
	       cally estimated ones) are much less balanced allowing the
	       threshold to be larger value.

	   ttrraacceerr--mmaaxx--ccooddee--ggrroowwtthh
	       Stop tail duplication once code growth has reached given per-
	       centage.	 This is rather hokey argument, as most of the dupli-
	       cates will be eliminated later in cross jumping, so it may be
	       set to much higher values than is the desired code growth.

	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
	       Stop reverse growth when the reverse probability of best edge
	       is less than this threshold (in percent).

	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo
	   ttrraacceerr--mmiinn--bbrraanncchh--rraattiioo--ffeeeeddbbaacckk
	       Stop forward growth if the best edge do have probability lower
	       than this threshold.

	       Similarly to ttrraacceerr--ddyynnaammiicc--ccoovveerraaggee two values are present,
	       one for compilation for profile feedback and one for compila-
	       tion without.  The value for compilation with profile feedback
	       needs to be more conservative (higher) in order to make tracer
	       effective.

	   ggggcc--mmiinn--eexxppaanndd
	       GCC uses a garbage collector to manage its own memory alloca-
	       tion.  This parameter specifies the minimum percentage by which
	       the garbage collector's heap should be allowed to expand
	       between collections.  Tuning this may improve compilation
	       speed; it has no effect on code generation.

	       The default is 30% + 70% * (RAM/1GB) with an upper bound of
	       100% when RAM >= 1GB.  If "getrlimit" is available, the notion
	       of "RAM" is the smallest of actual RAM, RLIMIT_RSS, RLIMIT_DATA
	       and RLIMIT_AS.  If GCC is not able to calculate RAM on a par-
	       ticular platform, the lower bound of 30% is used.  Setting this
	       parameter and ggggcc--mmiinn--hheeaappssiizzee to zero causes a full collection
	       to occur at every opportunity.  This is extremely slow, but can
	       be useful for debugging.

	   ggggcc--mmiinn--hheeaappssiizzee
	       Minimum size of the garbage collector's heap before it begins
	       bothering to collect garbage.  The first collection occurs
	       after the heap expands by ggggcc--mmiinn--eexxppaanndd% beyond ggggcc--mmiinn--hheeaapp--
	       ssiizzee.  Again, tuning this may improve compilation speed, and
	       has no effect on code generation.

	       The default is RAM/8, with a lower bound of 4096 (four
	       megabytes) and an upper bound of 131072 (128 megabytes).	 If
	       "getrlimit" is available, the notion of "RAM" is the smallest
	       of actual RAM, RLIMIT_RSS, RLIMIT_DATA and RLIMIT_AS.  If GCC
	       is not able to calculate RAM on a particular platform, the
	       lower bound is used.  Setting this parameter very large effec-
	       tively disables garbage collection.  Setting this parameter and
	       ggggcc--mmiinn--eexxppaanndd to zero causes a full collection to occur at
	       every opportunity.

       OOppttiioonnss CCoonnttrroolllliinngg tthhee PPrreepprroocceessssoorr

       These options control the C preprocessor, which is run on each C source
       file before actual compilation.

       If you use the --EE option, nothing is done except preprocessing.	Some
       of these options make sense only together with --EE because they cause
       the preprocessor output to be unsuitable for actual compilation.

       You can use --WWpp,,_o_p_t_i_o_n to bypass the compiler driver and pass _o_p_t_i_o_n
       directly through to the preprocessor.  If _o_p_t_i_o_n contains commas, it is
       split into multiple options at the commas.  However, many options are
       modified, translated or interpreted by the compiler driver before being
       passed to the preprocessor, and --WWpp forcibly bypasses this phase.  The
       preprocessor's direct interface is undocumented and subject to change,
       so whenever possible you should avoid using --WWpp and let the driver han-
       dle the options instead.

       --DD _n_a_m_e
	   Predefine _n_a_m_e as a macro, with definition 1.

       --DD _n_a_m_e==_d_e_f_i_n_i_t_i_o_n
	   Predefine _n_a_m_e as a macro, with definition _d_e_f_i_n_i_t_i_o_n.  There are
	   no restrictions on the contents of _d_e_f_i_n_i_t_i_o_n, but if you are
	   invoking the preprocessor from a shell or shell-like program you
	   may need to use the shell's quoting syntax to protect characters
	   such as spaces that have a meaning in the shell syntax.

	   If you wish to define a function-like macro on the command line,
	   write its argument list with surrounding parentheses before the
	   equals sign (if any).  Parentheses are meaningful to most shells,
	   so you will need to quote the option.  With sshh and ccsshh,
	   --DD''_n_a_m_e((_a_r_g_s_._._.))==_d_e_f_i_n_i_t_i_o_n'' works.

	   --DD and --UU options are processed in the order they are given on the
	   command line.  All --iimmaaccrrooss _f_i_l_e and --iinncclluuddee _f_i_l_e options are pro-
	   cessed after all --DD and --UU options.

       --UU _n_a_m_e
	   Cancel any previous definition of _n_a_m_e, either built in or provided
	   with a --DD option.

       --uunnddeeff
	   Do not predefine any system-specific macros.	 The common predefined
	   macros remain defined.

       --II _d_i_r
	   Add the directory _d_i_r to the list of directories to be searched for
	   header files.  Directories named by --II are searched before the
	   standard system include directories.	 If the directory _d_i_r is a
	   standard system include directory, the option is ignored to ensure
	   that the default search order for system directories and the spe-
	   cial treatment of system headers are not defeated .

       --oo _f_i_l_e
	   Write output to _f_i_l_e.  This is the same as specifying _f_i_l_e as the
	   second non-option argument to ccpppp.  ggcccc has a different interpreta-
	   tion of a second non-option argument, so you must use --oo to specify
	   the output file.

       --WWaallll
	   Turns on all optional warnings which are desirable for normal code.
	   At present this is --WWccoommmmeenntt and --WWttrriiggrraapphhss.  Note that many of
	   the preprocessor's warnings are on by default and have no options
	   to control them.

       --WWccoommmmeenntt
       --WWccoommmmeennttss
	   Warn whenever a comment-start sequence //** appears in a //** comment,
	   or whenever a backslash-newline appears in a //// comment.  (Both
	   forms have the same effect.)

       --WWttrriiggrraapphhss
	   Warn if any trigraphs are encountered.  This option used to take
	   effect only if --ttrriiggrraapphhss was also specified, but now works inde-
	   pendently.  Warnings are not given for trigraphs within comments,
	   as they do not affect the meaning of the program.

       --WWttrraaddiittiioonnaall
	   Warn about certain constructs that behave differently in tradi-
	   tional and ISO C.  Also warn about ISO C constructs that have no
	   traditional C equivalent, and problematic constructs which should
	   be avoided.

       --WWiimmppoorrtt
	   Warn the first time ##iimmppoorrtt is used.

       --WWuunnddeeff
	   Warn whenever an identifier which is not a macro is encountered in
	   an ##iiff directive, outside of ddeeffiinneedd.  Such identifiers are
	   replaced with zero.

       --WWuunnuusseedd--mmaaccrrooss
	   Warn about macros defined in the main file that are unused.	A
	   macro is _u_s_e_d if it is expanded or tested for existence at least
	   once.  The preprocessor will also warn if the macro has not been
	   used at the time it is redefined or undefined.

	   Built-in macros, macros defined on the command line, and macros
	   defined in include files are not warned about.

	   NNoottee:: If a macro is actually used, but only used in skipped condi-
	   tional blocks, then CPP will report it as unused.  To avoid the
	   warning in such a case, you might improve the scope of the macro's
	   definition by, for example, moving it into the first skipped block.
	   Alternatively, you could provide a dummy use with something like:

		   #if defined the_macro_causing_the_warning
		   #endif

       --WWeennddiiff--llaabbeellss
	   Warn whenever an ##eellssee or an ##eennddiiff are followed by text.  This
	   usually happens in code of the form

		   #if FOO
		   ...
		   #else FOO
		   ...
		   #endif FOO

	   The second and third "FOO" should be in comments, but often are not
	   in older programs.  This warning is on by default.

       --WWeerrrroorr
	   Make all warnings into hard errors.	Source code which triggers
	   warnings will be rejected.

       --WWssyysstteemm--hheeaaddeerrss
	   Issue warnings for code in system headers.  These are normally
	   unhelpful in finding bugs in your own code, therefore suppressed.
	   If you are responsible for the system library, you may want to see
	   them.

       --ww  Suppress all warnings, including those which GNU CPP issues by
	   default.

       --ppeeddaannttiicc
	   Issue all the mandatory diagnostics listed in the C standard.  Some
	   of them are left out by default, since they trigger frequently on
	   harmless code.

       --ppeeddaannttiicc--eerrrroorrss
	   Issue all the mandatory diagnostics, and make all mandatory diag-
	   nostics into errors.	 This includes mandatory diagnostics that GCC
	   issues without --ppeeddaannttiicc but treats as warnings.

       --MM  Instead of outputting the result of preprocessing, output a rule
	   suitable for mmaakkee describing the dependencies of the main source
	   file.  The preprocessor outputs one mmaakkee rule containing the object
	   file name for that source file, a colon, and the names of all the
	   included files, including those coming from --iinncclluuddee or --iimmaaccrrooss
	   command line options.

	   Unless specified explicitly (with --MMTT or --MMQQ), the object file name
	   consists of the basename of the source file with any suffix
	   replaced with object file suffix.  If there are many included files
	   then the rule is split into several lines using \\-newline.  The
	   rule has no commands.

	   This option does not suppress the preprocessor's debug output, such
	   as --ddMM.  To avoid mixing such debug output with the dependency
	   rules you should explicitly specify the dependency output file with
	   --MMFF, or use an environment variable like DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT.
	   Debug output will still be sent to the regular output stream as
	   normal.

	   Passing --MM to the driver implies --EE, and suppresses warnings with
	   an implicit --ww.

       --MMMM Like --MM but do not mention header files that are found in system
	   header directories, nor header files that are included, directly or
	   indirectly, from such a header.

	   This implies that the choice of angle brackets or double quotes in
	   an ##iinncclluuddee directive does not in itself determine whether that
	   header will appear in --MMMM dependency output.	 This is a slight
	   change in semantics from GCC versions 3.0 and earlier.

       --MMFF _f_i_l_e
	   @anchor{-MF} When used with --MM or --MMMM, specifies a file to write
	   the dependencies to.	 If no --MMFF switch is given the preprocessor
	   sends the rules to the same place it would have sent preprocessed
	   output.

	   When used with the driver options --MMDD or --MMMMDD, --MMFF overrides the
	   default dependency output file.

       --ddeeppeennddeennccyy--ffiillee
	   Like --MMFF. (APPLE ONLY)

       --MMGG In conjunction with an option such as --MM requesting dependency gen-
	   eration, --MMGG assumes missing header files are generated files and
	   adds them to the dependency list without raising an error.  The
	   dependency filename is taken directly from the "#include" directive
	   without prepending any path.	 --MMGG also suppresses preprocessed out-
	   put, as a missing header file renders this useless.

	   This feature is used in automatic updating of makefiles.

       --MMPP This option instructs CPP to add a phony target for each dependency
	   other than the main file, causing each to depend on nothing.	 These
	   dummy rules work around errors mmaakkee gives if you remove header
	   files without updating the _M_a_k_e_f_i_l_e to match.

	   This is typical output:

		   test.o: test.c test.h

		   test.h:

       --MMTT _t_a_r_g_e_t
	   Change the target of the rule emitted by dependency generation.  By
	   default CPP takes the name of the main input file, including any
	   path, deletes any file suffix such as ..cc, and appends the plat-
	   form's usual object suffix.	The result is the target.

	   An --MMTT option will set the target to be exactly the string you
	   specify.  If you want multiple targets, you can specify them as a
	   single argument to --MMTT, or use multiple --MMTT options.

	   For example, --MMTT ''$$((oobbjjppffxx))ffoooo..oo'' might give

		   $(objpfx)foo.o: foo.c

       --MMQQ _t_a_r_g_e_t
	   Same as --MMTT, but it quotes any characters which are special to
	   Make.  --MMQQ ''$$((oobbjjppffxx))ffoooo..oo'' gives

		   $$(objpfx)foo.o: foo.c

	   The default target is automatically quoted, as if it were given
	   with --MMQQ.

       --MMDD --MMDD is equivalent to --MM --MMFF _f_i_l_e, except that --EE is not implied.
	   The driver determines _f_i_l_e based on whether an --oo option is given.
	   If it is, the driver uses its argument but with a suffix of _._d,
	   otherwise it take the basename of the input file and applies a _._d
	   suffix.

	   If --MMDD is used in conjunction with --EE, any --oo switch is understood
	   to specify the dependency output file (but @pxref{-MF}), but if
	   used without --EE, each --oo is understood to specify a target object
	   file.

	   Since --EE is not implied, --MMDD can be used to generate a dependency
	   output file as a side-effect of the compilation process.

       --MMMMDD
	   Like --MMDD except mention only user header files, not system -header
	   files.

       --ffppcchh--ddeeppss
	   When using precompiled headers, this flag will cause the depen-
	   dency-output flags to also list the files from the precompiled
	   header's dependencies.  If not specified only the precompiled
	   header would be listed and not the files that were used to create
	   it because those files are not consulted when a precompiled header
	   is used.

       --xx cc
       --xx cc++++
       --xx oobbjjeeccttiivvee--cc
       --xx oobbjjeeccttiivvee--cc++++
       --xx aasssseemmbblleerr--wwiitthh--ccpppp
	   Specify the source language: C, C++, Objective-C, Objective-C++, or
	   assembly.  This has nothing to do with standards conformance or
	   extensions; it merely selects which base syntax to expect.  If you
	   give none of these options, cpp will deduce the language from the
	   extension of the source file: ..cc, ..cccc, ..mm, ..mmmm, or ..SS.  Some other
	   common extensions for C++ and assembly are also recognized.	If cpp
	   does not recognize the extension, it will treat the file as C; this
	   is the most generic mode.

	   NNoottee:: Previous versions of cpp accepted a --llaanngg option which
	   selected both the language and the standards conformance level.
	   This option has been removed, because it conflicts with the --ll
	   option.

       --ssttdd==_s_t_a_n_d_a_r_d
       --aannssii
	   Specify the standard to which the code should conform.  Currently
	   CPP knows about C and C++ standards; others may be added in the
	   future.

	   _s_t_a_n_d_a_r_d may be one of:

	   "iso9899:1990"
	   "c89"
	       The ISO C standard from 1990.  cc8899 is the customary shorthand
	       for this version of the standard.

	       The --aannssii option is equivalent to --ssttdd==cc8899.

	   "iso9899:199409"
	       The 1990 C standard, as amended in 1994.

	   "iso9899:1999"
	   "c99"
	   "iso9899:199x"
	   "c9x"
	       The revised ISO C standard, published in December 1999.	Before
	       publication, this was known as C9X.

	   "gnu89"
	       The 1990 C standard plus GNU extensions.	 This is the default.

	   "gnu99"
	   "gnu9x"
	       The 1999 C standard plus GNU extensions.

	   "c++98"
	       The 1998 ISO C++ standard plus amendments.

	   "gnu++98"
	       The same as --ssttdd==cc++++9988 plus GNU extensions.  This is the
	       default for C++ code.

       --II-- Split the include path.  Any directories specified with --II options
	   before --II-- are searched only for headers requested with
	   "#include "file""; they are not searched for "#include <file>".  If
	   additional directories are specified with --II options after the --II--,
	   those directories are searched for all ##iinncclluuddee directives.

	   In addition, --II-- inhibits the use of the directory of the current
	   file directory as the first search directory for "#include "file"".

       --nnoossttddiinncc
	   Do not search the standard system directories for header files.
	   Only the directories you have specified with --II options (and the
	   directory of the current file, if appropriate) are searched.

       --nnoossttddiinncc++++
	   Do not search for header files in the C++-specific standard direc-
	   tories, but do still search the other standard directories.	(This
	   option is used when building the C++ library.)

       --iinncclluuddee _f_i_l_e
	   Process _f_i_l_e as if "#include "file"" appeared as the first line of
	   the primary source file.  However, the first directory searched for
	   _f_i_l_e is the preprocessor's working directory _i_n_s_t_e_a_d _o_f the direc-
	   tory containing the main source file.  If not found there, it is
	   searched for in the remainder of the "#include "..."" search chain
	   as normal.

	   If multiple --iinncclluuddee options are given, the files are included in
	   the order they appear on the command line.

       --iimmaaccrrooss _f_i_l_e
	   Exactly like --iinncclluuddee, except that any output produced by scanning
	   _f_i_l_e is thrown away.	 Macros it defines remain defined.  This
	   allows you to acquire all the macros from a header without also
	   processing its declarations.

	   All files specified by --iimmaaccrrooss are processed before all files
	   specified by --iinncclluuddee.

       --iiddiirraafftteerr _d_i_r
	   Search _d_i_r for header files, but do it _a_f_t_e_r all directories speci-
	   fied with --II and the standard system directories have been
	   exhausted.  _d_i_r is treated as a system include directory.

       --iipprreeffiixx _p_r_e_f_i_x
	   Specify _p_r_e_f_i_x as the prefix for subsequent --iiwwiitthhpprreeffiixx options.
	   If the prefix represents a directory, you should include the final
	   //.

       --iiwwiitthhpprreeffiixx _d_i_r
       --iiwwiitthhpprreeffiixxbbeeffoorree _d_i_r
	   Append _d_i_r to the prefix specified previously with --iipprreeffiixx, and
	   add the resulting directory to the include search path.  --iiwwiitthhpprree--
	   ffiixxbbeeffoorree puts it in the same place --II would; --iiwwiitthhpprreeffiixx puts it
	   where --iiddiirraafftteerr would.

	   Use of these options is discouraged.

       --iissyysstteemm _d_i_r
	   Search _d_i_r for header files, after all directories specified by --II
	   but before the standard system directories.	Mark it as a system
	   directory, so that it gets the same special treatment as is applied
	   to the standard system directories.

       --ffpprreepprroocceesssseedd
	   Indicate to the preprocessor that the input file has already been
	   preprocessed.  This suppresses things like macro expansion, tri-
	   graph conversion, escaped newline splicing, and processing of most
	   directives.	The preprocessor still recognizes and removes com-
	   ments, so that you can pass a file preprocessed with --CC to the com-
	   piler without problems.  In this mode the integrated preprocessor
	   is little more than a tokenizer for the front ends.

	   --ffpprreepprroocceesssseedd is implicit if the input file has one of the exten-
	   sions ..ii, ..iiii or ..mmii.  These are the extensions that GCC uses for
	   preprocessed files created by --ssaavvee--tteemmppss.

       --ffttaabbssttoopp==_w_i_d_t_h
	   Set the distance between tab stops.	This helps the preprocessor
	   report correct column numbers in warnings or errors, even if tabs
	   appear on the line.	If the value is less than 1 or greater than
	   100, the option is ignored.	The default is 8.

       --ffnnoo--sshhooww--ccoolluummnn
	   Do not print column numbers in diagnostics.	This may be necessary
	   if diagnostics are being scanned by a program that does not under-
	   stand the column numbers, such as ddeejjaaggnnuu.

       --AA _p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
	   Make an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.
	   This form is preferred to the older form --AA _p_r_e_d_i_c_a_t_e((_a_n_s_w_e_r)),
	   which is still supported, because it does not use shell special
	   characters.

       --AA --_p_r_e_d_i_c_a_t_e==_a_n_s_w_e_r
	   Cancel an assertion with the predicate _p_r_e_d_i_c_a_t_e and answer _a_n_s_w_e_r.

       --AA-- Cancel all predefined assertions and all assertions preceding it on
	   the command line.  Also, undefine all predefined macros and all
	   macros preceding it on the command line.  (This is a historical
	   wart and may change in the future.)

       --ddCCHHAARRSS
	   _C_H_A_R_S is a sequence of one or more of the following characters, and
	   must not be preceded by a space.  Other characters are interpreted
	   by the compiler proper, or reserved for future versions of GCC, and
	   so are silently ignored.  If you specify characters whose behavior
	   conflicts, the result is undefined.

	   MM   Instead of the normal output, generate a list of ##ddeeffiinnee direc-
	       tives for all the macros defined during the execution of the
	       preprocessor, including predefined macros.  This gives you a
	       way of finding out what is predefined in your version of the
	       preprocessor.  Assuming you have no file _f_o_o_._h, the command

		       touch foo.h; cpp -dM foo.h

	       will show all the predefined macros.

	   DD   Like MM except in two respects: it does _n_o_t include the prede-
	       fined macros, and it outputs _b_o_t_h the ##ddeeffiinnee directives and
	       the result of preprocessing.  Both kinds of output go to the
	       standard output file.

	   NN   Like DD, but emit only the macro names, not their expansions.

	   II   Output ##iinncclluuddee directives in addition to the result of prepro-
	       cessing.

       --PP  Inhibit generation of linemarkers in the output from the preproces-
	   sor.	 This might be useful when running the preprocessor on some-
	   thing that is not C code, and will be sent to a program which might
	   be confused by the linemarkers.

       --CC  Do not discard comments.  All comments are passed through to the
	   output file, except for comments in processed directives, which are
	   deleted along with the directive.

	   You should be prepared for side effects when using --CC; it causes
	   the preprocessor to treat comments as tokens in their own right.
	   For example, comments appearing at the start of what would be a
	   directive line have the effect of turning that line into an ordi-
	   nary source line, since the first token on the line is no longer a
	   ##.

       --CCCC Do not discard comments, including during macro expansion.  This is
	   like --CC, except that comments contained within macros are also
	   passed through to the output file where the macro is expanded.

	   In addition to the side-effects of the --CC option, the --CCCC option
	   causes all C++-style comments inside a macro to be converted to
	   C-style comments.  This is to prevent later use of that macro from
	   inadvertently commenting out the remainder of the source line.

	   The --CCCC option is generally used to support lint comments.

       --ggcccc
	   Define the macros __GNUC__, __GNUC_MINOR__ and __GNUC_PATCHLEVEL__.
	   These are defined automatically when you use ggcccc --EE; you can turn
	   them off in that case with --nnoo--ggcccc.

       --ttrraaddiittiioonnaall--ccpppp
	   Try to imitate the behavior of old-fashioned C preprocessors, as
	   opposed to ISO C preprocessors.

       --ttrriiggrraapphhss
	   Process trigraph sequences.	These are three-character sequences,
	   all starting with ????, that are defined by ISO C to stand for single
	   characters.	For example, ????// stands for \\, so ''????//nn'' is a charac-
	   ter constant for a newline.	By default, GCC ignores trigraphs, but
	   in standard-conforming modes it converts them.  See the --ssttdd and
	   --aannssii options.

	   The nine trigraphs and their replacements are

		   Trigraph:	   ??(	??)  ??<  ??>  ??=  ??/	 ??'  ??!  ??-
		   Replacement:	     [	  ]    {    }	 #    \	   ^	|    ~

       --rreemmaapp
	   Enable special code to work around file systems which only permit
	   very short file names, such as MS-DOS.

       ----hheellpp
       ----ttaarrggeett--hheellpp
	   Print text describing all the command line options instead of pre-
	   processing anything.

       --vv  Verbose mode.  Print out GNU CPP's version number at the beginning
	   of execution, and report the final form of the include path.

       --HH  Print the name of each header file used, in addition to other nor-
	   mal activities.  Each name is indented to show how deep in the
	   ##iinncclluuddee stack it is.  Precompiled header files are also printed,
	   even if they are found to be invalid; an invalid precompiled header
	   file is printed with ......xx and a valid one with ......!! .

       --vveerrssiioonn
       ----vveerrssiioonn
	   Print out GNU CPP's version number.	With one dash, proceed to pre-
	   process as normal.  With two dashes, exit immediately.

       PPaassssiinngg OOppttiioonnss ttoo tthhee AAsssseemmbblleerr

       You can pass options to the assembler.

       --WWaa,,_o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the assembler.  If _o_p_t_i_o_n contains com-
	   mas, it is split into multiple options at the commas.

       OOppttiioonnss ffoorr LLiinnkkiinngg

       These options come into play when the compiler links object files into
       an executable output file.  They are meaningless if the compiler is not
       doing a link step.

       In addition to the options listed below, Apple's GCC also accepts and
       passes nearly all of the options defined by the linker lldd and by the
       library tool lliibbttooooll.  Common options include --ffrraammeewwoorrkk, --ddyynnaammiicc,
       --bbuunnddllee, --ffllaatt__nnaammeessppaaccee, and so forth.	See the ld and libtool man
       pages for further details.

       _o_b_j_e_c_t_-_f_i_l_e_-_n_a_m_e
	   A file name that does not end in a special recognized suffix is
	   considered to name an object file or library.  (Object files are
	   distinguished from libraries by the linker according to the file
	   contents.)  If linking is done, these object files are used as
	   input to the linker.

       --cc
       --SS
       --EE  If any of these options is used, then the linker is not run, and
	   object file names should not be used as arguments.

       --ll_l_i_b_r_a_r_y
       --ll _l_i_b_r_a_r_y
	   Search the library named _l_i_b_r_a_r_y when linking.  (The second alter-
	   native with the library as a separate argument is only for POSIX
	   compliance and is not recommended.)

	   It makes a difference where in the command you write this option;
	   the linker searches and processes libraries and object files in the
	   order they are specified.  Thus, ffoooo..oo --llzz bbaarr..oo searches library zz
	   after file _f_o_o_._o but before _b_a_r_._o.  If _b_a_r_._o refers to functions in
	   zz, those functions may not be loaded.

	   The linker searches a standard list of directories for the library,
	   which is actually a file named _l_i_b_l_i_b_r_a_r_y_._a.	 The linker then uses
	   this file as if it had been specified precisely by name.

	   The directories searched include several standard system directo-
	   ries plus any that you specify with --LL.

	   Normally the files found this way are library files---archive files
	   whose members are object files.  The linker handles an archive file
	   by scanning through it for members which define symbols that have
	   so far been referenced but not defined.  But if the file that is
	   found is an ordinary object file, it is linked in the usual fash-
	   ion.	 The only difference between using an --ll option and specifying
	   a file name is that --ll surrounds _l_i_b_r_a_r_y with lliibb and ..aa and
	   searches several directories.

       --lloobbjjcc
	   You need this special case of the --ll option in order to link an
	   Objective-C program.

       --nnoossttaarrttffiilleess
	   Do not use the standard system startup files when linking.  The
	   standard system libraries are used normally, unless --nnoossttddlliibb or
	   --nnooddeeffaauullttlliibbss is used.

       --nnooddeeffaauullttlliibbss
	   Do not use the standard system libraries when linking.  Only the
	   libraries you specify will be passed to the linker.	The standard
	   startup files are used normally, unless --nnoossttaarrttffiilleess is used.  The
	   compiler may generate calls to memcmp, memset, and memcpy for Sys-
	   tem V (and ISO C) environments or to bcopy and bzero for BSD envi-
	   ronments.  These entries are usually resolved by entries in libc.
	   These entry points should be supplied through some other mechanism
	   when this option is specified.

       --nnoossttddlliibb
	   Do not use the standard system startup files or libraries when
	   linking.  No startup files and only the libraries you specify will
	   be passed to the linker.  The compiler may generate calls to mem-
	   cmp, memset, and memcpy for System V (and ISO C) environments or to
	   bcopy and bzero for BSD environments.  These entries are usually
	   resolved by entries in libc.	 These entry points should be supplied
	   through some other mechanism when this option is specified.

       --nnoo--cc++++ffiilltt
	   By default all linker diagnostic output is piped through c++filt.
	   This option suppresses that behavior. (APPLE ONLY)

	   One of the standard libraries bypassed by --nnoossttddlliibb and --nnooddeeffaauulltt--
	   lliibbss is _l_i_b_g_c_c_._a, a library of internal subroutines that GCC uses
	   to overcome shortcomings of particular machines, or special needs
	   for some languages.

	   In most cases, you need _l_i_b_g_c_c_._a even when you want to avoid other
	   standard libraries.	In other words, when you specify --nnoossttddlliibb or
	   --nnooddeeffaauullttlliibbss you should usually specify --llggcccc as well.  This
	   ensures that you have no unresolved references to internal GCC
	   library subroutines.	 (For example, ____mmaaiinn, used to ensure C++ con-
	   structors will be called.)

       --ss  Remove all symbol table and relocation information from the exe-
	   cutable.

       --ssttaattiicc
	   On systems that support dynamic linking, this prevents linking with
	   the shared libraries.  On other systems, this option has no effect.

	   This option will not work on Mac OS X unless all of your libraries
	   (including _l_i_b_g_c_c_._a) have also been compiled with --ssttaattiicc.

       --sshhaarreedd
	   Produce a shared object which can then be linked with other objects
	   to form an executable.  Not all systems support this option.	 For
	   predictable results, you must also specify the same set of options
	   that were used to generate code (--ffppiicc, --ffPPIICC, or model suboptions)
	   when you specify this option.[1]

	   This option is not supported on Mac OS X.

       --sshhaarreedd--lliibbggcccc
       --ssttaattiicc--lliibbggcccc
	   On systems that provide _l_i_b_g_c_c as a shared library, these options
	   force the use of either the shared or static version respectively.
	   If no shared version of _l_i_b_g_c_c was built when the compiler was con-
	   figured, these options have no effect.

	   There are several situations in which an application should use the
	   shared _l_i_b_g_c_c instead of the static version.	 The most common of
	   these is when the application wishes to throw and catch exceptions
	   across different shared libraries.  In that case, each of the
	   libraries as well as the application itself should use the shared
	   _l_i_b_g_c_c.

	   Therefore, the G++ and GCJ drivers automatically add --sshhaarreedd--lliibbggcccc
	   whenever you build a shared library or a main executable, because
	   C++ and Java programs typically use exceptions, so this is the
	   right thing to do.

	   If, instead, you use the GCC driver to create shared libraries, you
	   may find that they will not always be linked with the shared
	   _l_i_b_g_c_c.  If GCC finds, at its configuration time, that you have a
	   GNU linker that does not support option ----eehh--ffrraammee--hhddrr, it will
	   link the shared version of _l_i_b_g_c_c into shared libraries by default.
	   Otherwise, it will take advantage of the linker and optimize away
	   the linking with the shared version of _l_i_b_g_c_c, linking with the
	   static version of libgcc by default.	 This allows exceptions to
	   propagate through such shared libraries, without incurring reloca-
	   tion costs at library load time.

	   However, if a library or main executable is supposed to throw or
	   catch exceptions, you must link it using the G++ or GCJ driver, as
	   appropriate for the languages used in the program, or using the
	   option --sshhaarreedd--lliibbggcccc, such that it is linked with the shared
	   _l_i_b_g_c_c.

       --ssyymmbboolliicc
	   Bind references to global symbols when building a shared object.
	   Warn about any unresolved references (unless overridden by the link
	   editor option --XXlliinnkkeerr --zz --XXlliinnkkeerr ddeeffss).  Only a few systems sup-
	   port this option.

       --XXlliinnkkeerr _o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the linker.  You can use this to supply
	   system-specific linker options which GCC does not know how to rec-
	   ognize.

	   If you want to pass an option that takes an argument, you must use
	   --XXlliinnkkeerr twice, once for the option and once for the argument.  For
	   example, to pass --aasssseerrtt ddeeffiinniittiioonnss, you must write --XXlliinnkkeerr
	   --aasssseerrtt --XXlliinnkkeerr ddeeffiinniittiioonnss.  It does not work to write --XXlliinnkkeerr
	   ""--aasssseerrtt ddeeffiinniittiioonnss"", because this passes the entire string as a
	   single argument, which is not what the linker expects.

       --WWll,,_o_p_t_i_o_n
	   Pass _o_p_t_i_o_n as an option to the linker.  If _o_p_t_i_o_n contains commas,
	   it is split into multiple options at the commas.

       --uu _s_y_m_b_o_l
	   Pretend the symbol _s_y_m_b_o_l is undefined, to force linking of library
	   modules to define it.  You can use --uu multiple times with different
	   symbols to force loading of additional library modules.

       OOppttiioonnss ffoorr DDiirreeccttoorryy SSeeaarrcchh

       These options specify directories to search for header files, for
       libraries and for parts of the compiler:

       --II_d_i_r
	   Add the directory _d_i_r to the head of the list of directories to be
	   searched for header files.  This can be used to override a system
	   header file, substituting your own version, since these directories
	   are searched before the system header file directories.  However,
	   you should not use this option to add directories that contain ven-
	   dor-supplied system header files (use --iissyysstteemm for that).  If you
	   use more than one --II option, the directories are scanned in left-
	   to-right order; the standard system directories come after.

	   If a standard system include directory, or a directory specified
	   with --iissyysstteemm, is also specified with --II, the --II option will be
	   ignored.  The directory will still be searched but as a system
	   directory at its normal position in the system include chain.  This
	   is to ensure that GCC's procedure to fix buggy system headers and
	   the ordering for the include_next directive are not inadvertently
	   changed.  If you really need to change the search order for system
	   directories, use the --nnoossttddiinncc and/or --iissyysstteemm options.

       --II-- Any directories you specify with --II options before the --II-- option
	   are searched only for the case of ##iinncclluuddee ""_f_i_l_e""; they are not
	   searched for ##iinncclluuddee <<_f_i_l_e>>.

	   If additional directories are specified with --II options after the
	   --II--, these directories are searched for all ##iinncclluuddee directives.
	   (Ordinarily _a_l_l --II directories are used this way.)

	   In addition, the --II-- option inhibits the use of the current direc-
	   tory (where the current input file came from) as the first search
	   directory for ##iinncclluuddee ""_f_i_l_e"".  There is no way to override this
	   effect of --II--.  With --II.. you can specify searching the directory
	   which was current when the compiler was invoked.  That is not
	   exactly the same as what the preprocessor does by default, but it
	   is often satisfactory.

	   --II-- does not inhibit the use of the standard system directories for
	   header files.  Thus, --II-- and --nnoossttddiinncc are independent.

       --LL_d_i_r
	   Add directory _d_i_r to the list of directories to be searched for --ll.

       --FF_d_i_r
	   In Apple's version of GCC only, add the directory _d_i_r to the head
	   of the list of directories to be searched for frameworks.

	   The framework search algorithm is, for an inclusion of
	   <<FFmmwwkk//HHeeaaddeerr..hh>>, to look for files named _p_a_t_h_/_F_m_w_k_._f_r_a_m_e_w_o_r_k_/_H_e_a_d_-
	   _e_r_s_/_H_e_a_d_e_r_._h or _p_a_t_h_/_F_m_w_k_._f_r_a_m_e_w_o_r_k_/_P_r_i_v_a_t_e_H_e_a_d_e_r_s_/_H_e_a_d_e_r_._h where
	   _p_a_t_h includes _/_S_y_s_t_e_m_/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/ _/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/, and
	   _/_L_o_c_a_l_/_L_i_b_r_a_r_y_/_F_r_a_m_e_w_o_r_k_s_/, plus any additional paths specified by
	   --FF.

	   All the --FF options are also passed to the linker.

       --BB_p_r_e_f_i_x
	   This option specifies where to find the executables, libraries,
	   include files, and data files of the compiler itself.

	   The compiler driver program runs one or more of the subprograms
	   _c_p_p, _c_c_1, _a_s and _l_d.	 It tries _p_r_e_f_i_x as a prefix for each program
	   it tries to run, both with and without _m_a_c_h_i_n_e//_v_e_r_s_i_o_n//.

	   For each subprogram to be run, the compiler driver first tries the
	   --BB prefix, if any.  If that name is not found, or if --BB was not
	   specified, the driver tries two standard prefixes, which are
	   _/_u_s_r_/_l_i_b_/_g_c_c_/ and _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_g_c_c_-_l_i_b_/.  If neither of those
	   results in a file name that is found, the unmodified program name
	   is searched for using the directories specified in your PPAATTHH envi-
	   ronment variable.

	   The compiler will check to see if the path provided by the --BB
	   refers to a directory, and if necessary it will add a directory
	   separator character at the end of the path.

	   --BB prefixes that effectively specify directory names also apply to
	   libraries in the linker, because the compiler translates these
	   options into --LL options for the linker.  They also apply to
	   includes files in the preprocessor, because the compiler translates
	   these options into --iissyysstteemm options for the preprocessor.  In this
	   case, the compiler appends iinncclluuddee to the prefix.

	   The run-time support file _l_i_b_g_c_c_._a can also be searched for using
	   the --BB prefix, if needed.  If it is not found there, the two stan-
	   dard prefixes above are tried, and that is all.  The file is left
	   out of the link if it is not found by those means.

	   Another way to specify a prefix much like the --BB prefix is to use
	   the environment variable GGCCCC__EEXXEECC__PPRREEFFIIXX.

	   As a special kludge, if the path provided by --BB is _[_d_i_r_/_]_s_t_a_g_e_N_/,
	   where _N is a number in the range 0 to 9, then it will be replaced
	   by _[_d_i_r_/_]_i_n_c_l_u_d_e.  This is to help with boot-strapping the com-
	   piler.

       --ssppeeccss==_f_i_l_e
	   Process _f_i_l_e after the compiler reads in the standard _s_p_e_c_s file,
	   in order to override the defaults that the _g_c_c driver program uses
	   when determining what switches to pass to _c_c_1, _c_c_1_p_l_u_s, _a_s, _l_d,
	   etc.	 More than one --ssppeeccss==_f_i_l_e can be specified on the command
	   line, and they are processed in order, from left to right.

       SSppeecciiffyyiinngg TTaarrggeett MMaacchhiinnee aanndd CCoommppiilleerr VVeerrssiioonn

       The usual way to run GCC is to run the executable called _g_c_c, or
       _<_m_a_c_h_i_n_e_>_-_g_c_c when cross-compiling, or _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> to run a
       version other than the one that was installed last.  Sometimes this is
       inconvenient, so GCC provides options that will switch to another
       cross-compiler or version.

       --bb _m_a_c_h_i_n_e
	   The argument _m_a_c_h_i_n_e specifies the target machine for compilation.

	   The value to use for _m_a_c_h_i_n_e is the same as was specified as the
	   machine type when configuring GCC as a cross-compiler.  For exam-
	   ple, if a cross-compiler was configured with ccoonnffiigguurree ii338866vv, mean-
	   ing to compile for an 80386 running System V, then you would spec-
	   ify --bb ii338866vv to run that cross compiler.

       --VV _v_e_r_s_i_o_n
	   The argument _v_e_r_s_i_o_n specifies which version of GCC to run.	This
	   is useful when multiple versions are installed.  For example, _v_e_r_-
	   _s_i_o_n might be 22..00, meaning to run GCC version 2.0.

       The --VV and --bb options work by running the _<_m_a_c_h_i_n_e_>_-_g_c_c_-_<_v_e_r_s_i_o_n_> exe-
       cutable, so there's no real reason to use them if you can just run that
       directly.

       HHaarrddwwaarree MMooddeellss aanndd CCoonnffiigguurraattiioonnss

       Earlier we discussed the standard option --bb which chooses among differ-
       ent installed compilers for completely different target machines, such
       as VAX vs. 68000 vs. 80386.

       In addition, each of these target machine types can have its own
       special options, starting with --mm, to choose among various hardware
       models or configurations---for example, 68010 vs 68020, floating copro-
       cessor or none.	A single installed version of the compiler can compile
       for any model or configuration, according to the options specified.

       Some configurations of the compiler also support additional special
       options, usually for compatibility with other compilers on the same
       platform.

       These options are defined by the macro "TARGET_SWITCHES" in the machine
       description.  The default for the options is also defined by that
       macro, which enables you to change the defaults.

       _I_B_M _R_S_/_6_0_0_0 _a_n_d _P_o_w_e_r_P_C _O_p_t_i_o_n_s

       These --mm options are defined for the IBM RS/6000 and PowerPC:

       --mmppoowweerr
       --mmnnoo--ppoowweerr
       --mmppoowweerr22
       --mmnnoo--ppoowweerr22
       --mmppoowweerrppcc
       --mmnnoo--ppoowweerrppcc
       --mmppoowweerrppcc--ggppoopptt
       --mmnnoo--ppoowweerrppcc--ggppoopptt
       --mmppoowweerrppcc--ggffxxoopptt
       --mmnnoo--ppoowweerrppcc--ggffxxoopptt
       --mmppoowweerrppcc6644
       --mmnnoo--ppoowweerrppcc6644
	   GCC supports two related instruction set architectures for the
	   RS/6000 and PowerPC.	 The _P_O_W_E_R instruction set are those instruc-
	   tions supported by the rriiooss chip set used in the original RS/6000
	   systems and the _P_o_w_e_r_P_C instruction set is the architecture of the
	   Motorola MPC5xx, MPC6xx, MPC8xx microprocessors, and the IBM 4xx
	   microprocessors.

	   Neither architecture is a subset of the other.  However there is a
	   large common subset of instructions supported by both.  An MQ reg-
	   ister is included in processors supporting the POWER architecture.

	   You use these options to specify which instructions are available
	   on the processor you are using.  The default value of these options
	   is determined when configuring GCC.	Specifying the --mmccppuu==_c_p_u___t_y_p_e
	   overrides the specification of these options.  We recommend you use
	   the --mmccppuu==_c_p_u___t_y_p_e option rather than the options listed above.

	   The --mmppoowweerr option allows GCC to generate instructions that are
	   found only in the POWER architecture and to use the MQ register.
	   Specifying --mmppoowweerr22 implies --ppoowweerr and also allows GCC to generate
	   instructions that are present in the POWER2 architecture but not
	   the original POWER architecture.

	   The --mmppoowweerrppcc option allows GCC to generate instructions that are
	   found only in the 32-bit subset of the PowerPC architecture.	 Spec-
	   ifying --mmppoowweerrppcc--ggppoopptt implies --mmppoowweerrppcc and also allows GCC to use
	   the optional PowerPC architecture instructions in the General Pur-
	   pose group, including floating-point square root.  Specifying
	   --mmppoowweerrppcc--ggffxxoopptt implies --mmppoowweerrppcc and also allows GCC to use the
	   optional PowerPC architecture instructions in the Graphics group,
	   including floating-point select.

	   The --mmppoowweerrppcc6644 option allows GCC to generate the additional 64-bit
	   instructions that are found in the full PowerPC64 architecture and
	   to treat GPRs as 64-bit, doubleword quantities.  GCC defaults to
	   --mmnnoo--ppoowweerrppcc6644.

	   If you specify both --mmnnoo--ppoowweerr and --mmnnoo--ppoowweerrppcc, GCC will use only
	   the instructions in the common subset of both architectures plus
	   some special AIX common-mode calls, and will not use the MQ regis-
	   ter.	 Specifying both --mmppoowweerr and --mmppoowweerrppcc permits GCC to use any
	   instruction from either architecture and to allow use of the MQ
	   register; specify this for the Motorola MPC601.

       --mmnneeww--mmnneemmoonniiccss
       --mmoolldd--mmnneemmoonniiccss
	   Select which mnemonics to use in the generated assembler code.
	   With --mmnneeww--mmnneemmoonniiccss, GCC uses the assembler mnemonics defined for
	   the PowerPC architecture.  With --mmoolldd--mmnneemmoonniiccss it uses the assem-
	   bler mnemonics defined for the POWER architecture.  Instructions
	   defined in only one architecture have only one mnemonic; GCC uses
	   that mnemonic irrespective of which of these options is specified.

	   GCC defaults to the mnemonics appropriate for the architecture in
	   use.	 Specifying --mmccppuu==_c_p_u___t_y_p_e sometimes overrides the value of
	   these option.  Unless you are building a cross-compiler, you should
	   normally not specify either --mmnneeww--mmnneemmoonniiccss or --mmoolldd--mmnneemmoonniiccss, but
	   should instead accept the default.

       --mmccppuu==_c_p_u___t_y_p_e
	   Set architecture type, register usage, choice of mnemonics, and
	   instruction scheduling parameters for machine type _c_p_u___t_y_p_e.	 Sup-
	   ported values for _c_p_u___t_y_p_e are rriiooss, rriiooss11, rrsscc, rriiooss22, rrss6644aa, 660011,
	   660022, 660033, 660033ee, 660044, 660044ee, 662200, 663300, 774400, 77440000, 77445500, 775500, ppoowweerr,
	   ppoowweerr22, ppoowweerrppcc, 440033, 550055, 880011, 882211, 882233, and 886600 and ccoommmmoonn.

	   --mmccppuu==ccoommmmoonn selects a completely generic processor.	 Code gener-
	   ated under this option will run on any POWER or PowerPC processor.
	   GCC will use only the instructions in the common subset of both
	   architectures, and will not use the MQ register.  GCC assumes a
	   generic processor model for scheduling purposes.

	   --mmccppuu==ppoowweerr, --mmccppuu==ppoowweerr22, --mmccppuu==ppoowweerrppcc, and --mmccppuu==ppoowweerrppcc6644 spec-
	   ify generic POWER, POWER2, pure 32-bit PowerPC (i.e., not MPC601),
	   and 64-bit PowerPC architecture machine types, with an appropriate,
	   generic processor model assumed for scheduling purposes.

	   The other options specify a specific processor.  Code generated
	   under those options will run best on that processor, and may not
	   run at all on others.

	   The --mmccppuu options automatically enable or disable other --mm options
	   as follows:

	   ccoommmmoonn
	       --mmnnoo--ppoowweerr, --mmnnoo--ppoowweerrppcc

	   ppoowweerr
	   ppoowweerr22
	   rriiooss11
	   rriiooss22
	   rrsscc --mmppoowweerr, --mmnnoo--ppoowweerrppcc, --mmnnoo--nneeww--mmnneemmoonniiccss

	   ppoowweerrppcc
	   rrss6644aa
	   660022
	   660033
	   660033ee
	   660044
	   662200
	   663300
	   774400
	   77440000
	   77445500
	   775500
	   550055 --mmnnoo--ppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss

	   660011 --mmppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss

	   440033
	   882211
	   886600 --mmnnoo--ppoowweerr, --mmppoowweerrppcc, --mmnneeww--mmnneemmoonniiccss, --mmssoofftt--ffllooaatt

       --mmttuunnee==_c_p_u___t_y_p_e
	   Set the instruction scheduling parameters for machine type
	   _c_p_u___t_y_p_e, but do not set the architecture type, register usage, or
	   choice of mnemonics, as --mmccppuu==_c_p_u___t_y_p_e would.  The same values for
	   _c_p_u___t_y_p_e are used for --mmttuunnee as for --mmccppuu.  If both are specified,
	   the code generated will use the architecture, registers, and
	   mnemonics set by --mmccppuu, but the scheduling parameters set by
	   --mmttuunnee.

       --mmaallttiivveecc
       --mmnnoo--aallttiivveecc
	   These switches enable or disable the use of built-in functions that
	   allow access to the AltiVec instruction set.	 You may also need to
	   set --mmaabbii==aallttiivveecc to adjust the current ABI with AltiVec ABI
	   enhancements.

	   This option is not supported on Mac OS X; use --ffaallttiivveecc instead.

       --mmaabbii==ssppee
	   Extend the current ABI with SPE ABI extensions.  This does not
	   change the default ABI, instead it adds the SPE ABI extensions to
	   the current ABI.

       --mmaabbii==nnoo--ssppee
	   Disable Booke SPE ABI extensions for the current ABI.

       --mmiisseell==_y_e_s_/_n_o
       --mmiisseell
	   This switch enables or disables the generation of ISEL instruc-
	   tions.

       --mmffuullll--ttoocc
       --mmnnoo--ffpp--iinn--ttoocc
       --mmnnoo--ssuumm--iinn--ttoocc
       --mmmmiinniimmaall--ttoocc
	   Modify generation of the TOC (Table Of Contents), which is created
	   for every executable file.  The --mmffuullll--ttoocc option is selected by
	   default.  In that case, GCC will allocate at least one TOC entry
	   for each unique non-automatic variable reference in your program.
	   GCC will also place floating-point constants in the TOC.  However,
	   only 16,384 entries are available in the TOC.

	   If you receive a linker error message that saying you have over-
	   flowed the available TOC space, you can reduce the amount of TOC
	   space used with the --mmnnoo--ffpp--iinn--ttoocc and --mmnnoo--ssuumm--iinn--ttoocc options.
	   --mmnnoo--ffpp--iinn--ttoocc prevents GCC from putting floating-point constants
	   in the TOC and --mmnnoo--ssuumm--iinn--ttoocc forces GCC to generate code to cal-
	   culate the sum of an address and a constant at run-time instead of
	   putting that sum into the TOC.  You may specify one or both of
	   these options.  Each causes GCC to produce very slightly slower and
	   larger code at the expense of conserving TOC space.

	   If you still run out of space in the TOC even when you specify both
	   of these options, specify --mmmmiinniimmaall--ttoocc instead.  This option
	   causes GCC to make only one TOC entry for every file.  When you
	   specify this option, GCC will produce code that is slower and
	   larger but which uses extremely little TOC space.  You may wish to
	   use this option only on files that contain less frequently executed
	   code.

       --mmaaiixx6644
       --mmaaiixx3322
	   Enable 64-bit AIX ABI and calling convention: 64-bit pointers,
	   64-bit "long" type, and the infrastructure needed to support them.
	   Specifying --mmaaiixx6644 implies --mmppoowweerrppcc6644 and --mmppoowweerrppcc, while --mmaaiixx3322
	   disables the 64-bit ABI and implies --mmnnoo--ppoowweerrppcc6644.	GCC defaults
	   to --mmaaiixx3322.

       --mmxxll--ccaallll
       --mmnnoo--xxll--ccaallll
	   On AIX, pass floating-point arguments to prototyped functions
	   beyond the register save area (RSA) on the stack in addition to
	   argument FPRs.  The AIX calling convention was extended but not
	   initially documented to handle an obscure K&R C case of calling a
	   function that takes the address of its arguments with fewer argu-
	   ments than declared.	 AIX XL compilers access floating point argu-
	   ments which do not fit in the RSA from the stack when a subroutine
	   is compiled without optimization.  Because always storing floating-
	   point arguments on the stack is inefficient and rarely needed, this
	   option is not enabled by default and only is necessary when calling
	   subroutines compiled by AIX XL compilers without optimization.

       --mmppee
	   Support _I_B_M _R_S_/_6_0_0_0 _S_P _P_a_r_a_l_l_e_l _E_n_v_i_r_o_n_m_e_n_t (PE).  Link an applica-
	   tion written to use message passing with special startup code to
	   enable the application to run.  The system must have PE installed
	   in the standard location (_/_u_s_r_/_l_p_p_/_p_p_e_._p_o_e_/), or the _s_p_e_c_s file
	   must be overridden with the --ssppeeccss== option to specify the appropri-
	   ate directory location.  The Parallel Environment does not support
	   threads, so the --mmppee option and the --pptthhrreeaadd option are incompati-
	   ble.

       --mmaalliiggnn--mmaacc6688kk
       --mmaalliiggnn--ppoowweerr
       --mmaalliiggnn--nnaattuurraall
	   The option --mmaalliiggnn--mmaacc6688kk causes structure fields to be aligned on
	   2-byte boundaries, in order to be compatible with m68k compiler
	   output.  The option --mmaalliiggnn--ppoowweerr is the standard alignment mode
	   for the PowerPC.  The option --mmaalliiggnn--nnaattuurraall is an extension of
	   PowerPC alignment that aligns larger data types such as doubles on
	   their natural boundaries.  (APPLE ONLY)

       --mmssoofftt--ffllooaatt
       --mmhhaarrdd--ffllooaatt
	   Generate code that does not use (uses) the floating-point register
	   set.	 Software floating point emulation is provided if you use the
	   --mmssoofftt--ffllooaatt option, and pass the option to GCC when linking.

       --mmmmuullttiippllee
       --mmnnoo--mmuullttiippllee
	   Generate code that uses (does not use) the load multiple word
	   instructions and the store multiple word instructions.  These
	   instructions are generated by default on POWER systems, and not
	   generated on PowerPC systems.  Do not use --mmmmuullttiippllee on little
	   endian PowerPC systems, since those instructions do not work when
	   the processor is in little endian mode.  The exceptions are PPC740
	   and PPC750 which permit the instructions usage in little endian
	   mode.

       --mmssttrriinngg
       --mmnnoo--ssttrriinngg
	   Generate code that uses (does not use) the load string instructions
	   and the store string word instructions to save multiple registers
	   and do small block moves.  These instructions are generated by
	   default on POWER systems, and not generated on PowerPC systems.  Do
	   not use --mmssttrriinngg on little endian PowerPC systems, since those
	   instructions do not work when the processor is in little endian
	   mode.  The exceptions are PPC740 and PPC750 which permit the
	   instructions usage in little endian mode.

       --mmuuppddaattee
       --mmnnoo--uuppddaattee
	   Generate code that uses (does not use) the load or store instruc-
	   tions that update the base register to the address of the calcu-
	   lated memory location.  These instructions are generated by
	   default.  If you use --mmnnoo--uuppddaattee, there is a small window between
	   the time that the stack pointer is updated and the address of the
	   previous frame is stored, which means code that walks the stack
	   frame across interrupts or signals may get corrupted data.

       --mmffuusseedd--mmaadddd
       --mmnnoo--ffuusseedd--mmaadddd
	   Generate code that uses (does not use) the floating point multiply
	   and accumulate instructions.	 These instructions are generated by
	   default if hardware floating is used.

       --mmnnoo--bbiitt--aalliiggnn
       --mmbbiitt--aalliiggnn
	   On System V.4 and embedded PowerPC systems do not (do) force struc-
	   tures and unions that contain bit-fields to be aligned to the base
	   type of the bit-field.

	   For example, by default a structure containing nothing but 8
	   "unsigned" bit-fields of length 1 would be aligned to a 4 byte
	   boundary and have a size of 4 bytes.	 By using --mmnnoo--bbiitt--aalliiggnn, the
	   structure would be aligned to a 1 byte boundary and be one byte in
	   size.

       --mmnnoo--ssttrriicctt--aalliiggnn
       --mmssttrriicctt--aalliiggnn
	   On System V.4 and embedded PowerPC systems do not (do) assume that
	   unaligned memory references will be handled by the system.

       --mmrreellooccaattaabbllee
       --mmnnoo--rreellooccaattaabbllee
	   On embedded PowerPC systems generate code that allows (does not
	   allow) the program to be relocated to a different address at run-
	   time.  If you use --mmrreellooccaattaabbllee on any module, all objects linked
	   together must be compiled with --mmrreellooccaattaabbllee or --mmrreellooccaattaabbllee--lliibb.

       --mmrreellooccaattaabbllee--lliibb
       --mmnnoo--rreellooccaattaabbllee--lliibb
	   On embedded PowerPC systems generate code that allows (does not
	   allow) the program to be relocated to a different address at run-
	   time.  Modules compiled with --mmrreellooccaattaabbllee--lliibb can be linked with
	   either modules compiled without --mmrreellooccaattaabbllee and --mmrreellooccaattaabbllee--lliibb
	   or with modules compiled with the --mmrreellooccaattaabbllee options.

       --mmnnoo--ttoocc
       --mmttoocc
	   On System V.4 and embedded PowerPC systems do not (do) assume that
	   register 2 contains a pointer to a global area pointing to the
	   addresses used in the program.

       --mmlliittttllee
       --mmlliittttllee--eennddiiaann
	   On System V.4 and embedded PowerPC systems compile code for the
	   processor in little endian mode.  The --mmlliittttllee--eennddiiaann option is the
	   same as --mmlliittttllee.

       --mmbbiigg
       --mmbbiigg--eennddiiaann
	   On System V.4 and embedded PowerPC systems compile code for the
	   processor in big endian mode.  The --mmbbiigg--eennddiiaann option is the same
	   as --mmbbiigg.

       --mmddyynnaammiicc--nnoo--ppiicc
	   On Darwin and Mac OS X systems, compile code so that it is not
	   relocatable, but that its external references are relocatable.  The
	   resulting code is suitable for applications, but not shared
	   libraries. (APPLE ONLY)

       --mmlloonngg--bbrraanncchh
	   On Darwin and Mac OS X systems, compile calls to use a 32-bit des-
	   tination address.  This is to support kernel extensions, which may
	   load anywhere within the kernel address space.  (APPLE ONLY)

       --mmccaallll--ssyyssvv
	   On System V.4 and embedded PowerPC systems compile code using call-
	   ing conventions that adheres to the March 1995 draft of the System
	   V Application Binary Interface, PowerPC processor supplement.  This
	   is the default unless you configured GCC using ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssyyssvv--eeaabbii
	   Specify both --mmccaallll--ssyyssvv and --mmeeaabbii options.

       --mmccaallll--ssyyssvv--nnooeeaabbii
	   Specify both --mmccaallll--ssyyssvv and --mmnnoo--eeaabbii options.

       --mmccaallll--aaiixx
	   On System V.4 and embedded PowerPC systems compile code using call-
	   ing conventions that are similar to those used on AIX.  This is the
	   default if you configured GCC using ppoowweerrppcc--**--eeaabbiiaaiixx.

       --mmccaallll--ssoollaarriiss
	   On System V.4 and embedded PowerPC systems compile code for the
	   Solaris operating system.

       --mmccaallll--lliinnuuxx
	   On System V.4 and embedded PowerPC systems compile code for the
	   Linux-based GNU system.

       --mmccaallll--ggnnuu
	   On System V.4 and embedded PowerPC systems compile code for the
	   Hurd-based GNU system.

       --mmccaallll--nneettbbssdd
	   On System V.4 and embedded PowerPC systems compile code for the
	   NetBSD operating system.

       --mmaaiixx--ssttrruucctt--rreettuurrnn
	   Return all structures in memory (as specified by the AIX ABI).

       --mmssvvrr44--ssttrruucctt--rreettuurrnn
	   Return structures smaller than 8 bytes in registers (as specified
	   by the SVR4 ABI).

       --mmaabbii==aallttiivveecc
	   Extend the current ABI with AltiVec ABI extensions.	This does not
	   change the default ABI, instead it adds the AltiVec ABI extensions
	   to the current ABI.

	   This option is effectively permanently enabled on Mac OS X.

       --mmaabbii==nnoo--aallttiivveecc
	   Disable AltiVec ABI extensions for the current ABI.

	   This option will not work on Mac OS X.

       --mmpprroottoottyyppee
       --mmnnoo--pprroottoottyyppee
	   On System V.4 and embedded PowerPC systems assume that all calls to
	   variable argument functions are properly prototyped.	 Otherwise,
	   the compiler must insert an instruction before every non prototyped
	   call to set or clear bit 6 of the condition code register (_C_R) to
	   indicate whether floating point values were passed in the floating
	   point registers in case the function takes a variable arguments.
	   With --mmpprroottoottyyppee, only calls to prototyped variable argument func-
	   tions will set or clear the bit.

       --mmssiimm
	   On embedded PowerPC systems, assume that the startup module is
	   called _s_i_m_-_c_r_t_0_._o and that the standard C libraries are _l_i_b_s_i_m_._a
	   and _l_i_b_c_._a.	This is the default for ppoowweerrppcc--**--eeaabbiissiimm.  configura-
	   tions.

       --mmmmvvmmee
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_m_v_m_e_._a and
	   _l_i_b_c_._a.

       --mmaaddss
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_a_d_s_._a and _l_i_b_c_._a.

       --mmyyeelllloowwkknniiffee
	   On embedded PowerPC systems, assume that the startup module is
	   called _c_r_t_0_._o and the standard C libraries are _l_i_b_y_k_._a and _l_i_b_c_._a.

       --mmvvxxwwoorrkkss
	   On System V.4 and embedded PowerPC systems, specify that you are
	   compiling for a VxWorks system.

       --mmwwiinnddiissss
	   Specify that you are compiling for the WindISS simulation environ-
	   ment.

       --mmeemmbb
	   On embedded PowerPC systems, set the _P_P_C___E_M_B bit in the ELF flags
	   header to indicate that eeaabbii extended relocations are used.

       --mmeeaabbii
       --mmnnoo--eeaabbii
	   On System V.4 and embedded PowerPC systems do (do not) adhere to
	   the Embedded Applications Binary Interface (eabi) which is a set of
	   modifications to the System V.4 specifications.  Selecting --mmeeaabbii
	   means that the stack is aligned to an 8 byte boundary, a function
	   "__eabi" is called to from "main" to set up the eabi environment,
	   and the --mmssddaattaa option can use both "r2" and "r13" to point to two
	   separate small data areas.  Selecting --mmnnoo--eeaabbii means that the
	   stack is aligned to a 16 byte boundary, do not call an initializa-
	   tion function from "main", and the --mmssddaattaa option will only use
	   "r13" to point to a single small data area.	The --mmeeaabbii option is
	   on by default if you configured GCC using one of the ppooww--
	   eerrppcc**--**--eeaabbii** options.

       --mmssddaattaa==eeaabbii
	   On System V.4 and embedded PowerPC systems, put small initialized
	   "const" global and static data in the ..ssddaattaa22 section, which is
	   pointed to by register "r2".	 Put small initialized non-"const"
	   global and static data in the ..ssddaattaa section, which is pointed to
	   by register "r13".  Put small uninitialized global and static data
	   in the ..ssbbssss section, which is adjacent to the ..ssddaattaa section.  The
	   --mmssddaattaa==eeaabbii option is incompatible with the --mmrreellooccaattaabbllee option.
	   The --mmssddaattaa==eeaabbii option also sets the --mmeemmbb option.

       --mmssddaattaa==ssyyssvv
	   On System V.4 and embedded PowerPC systems, put small global and
	   static data in the ..ssddaattaa section, which is pointed to by register
	   "r13".  Put small uninitialized global and static data in the ..ssbbssss
	   section, which is adjacent to the ..ssddaattaa section.  The --mmssddaattaa==ssyyssvv
	   option is incompatible with the --mmrreellooccaattaabbllee option.

       --mmssddaattaa==ddeeffaauulltt
       --mmssddaattaa
	   On System V.4 and embedded PowerPC systems, if --mmeeaabbii is used, com-
	   pile code the same as --mmssddaattaa==eeaabbii, otherwise compile code the same
	   as --mmssddaattaa==ssyyssvv.

       --mmssddaattaa--ddaattaa
	   On System V.4 and embedded PowerPC systems, put small global and
	   static data in the ..ssddaattaa section.  Put small uninitialized global
	   and static data in the ..ssbbssss section.  Do not use register "r13" to
	   address small data however.	This is the default behavior unless
	   other --mmssddaattaa options are used.

       --mmssddaattaa==nnoonnee
       --mmnnoo--ssddaattaa
	   On embedded PowerPC systems, put all initialized global and static
	   data in the ..ddaattaa section, and all uninitialized data in the ..bbssss
	   section.

       --GG _n_u_m
	   On embedded PowerPC systems, put global and static items less than
	   or equal to _n_u_m bytes into the small data or bss sections instead
	   of the normal data or bss section.  By default, _n_u_m is 8.  The --GG
	   _n_u_m switch is also passed to the linker.  All modules should be
	   compiled with the same --GG _n_u_m value.

       --mmrreeggnnaammeess
       --mmnnoo--rreeggnnaammeess
	   On System V.4 and embedded PowerPC systems do (do not) emit regis-
	   ter names in the assembly language output using symbolic forms.

       --mmlloonnggccaallll
       --mmnnoo--lloonnggccaallll
	   Default to making all function calls indirectly, using a register,
	   so that functions which reside further than 32 megabytes
	   (33,554,432 bytes) from the current location can be called.	This
	   setting can be overridden by the "shortcall" function attribute, or
	   by "#pragma longcall(0)".

	   Some linkers are capable of detecting out-of-range calls and gener-
	   ating glue code on the fly.	On these systems, long calls are
	   unnecessary and generate slower code.  As of this writing, the AIX
	   linker can do this, as can the GNU linker for PowerPC/64.  It is
	   planned to add this feature to the GNU linker for 32-bit PowerPC
	   systems as well.

	   On Darwin/PPC systems, "#pragma longcall" will generate ``jbsr
	   callee, L42'', plus a ``branch island'' (glue code).	 The two tar-
	   get addresses represent the callee and the ``branch island.'' The
	   Darwin/PPC linker will prefer the first address and generate a ``bl
	   callee'' if the PPC ``bl'' instruction will reach the callee
	   directly; otherwise, the linker will generate ``bl L42'' to call
	   the ``branch island.''  The ``branch island'' is appended to the
	   body of the calling function; it computes the full 32-bit address
	   of the callee and jumps to it.

	   In the future, we may cause GCC to ignore all longcall specifica-
	   tions when the linker is known to generate glue.

       --pptthhrreeaadd
	   Adds support for multithreading with the _p_t_h_r_e_a_d_s library.  This
	   option sets flags for both the preprocessor and linker.

       _D_a_r_w_i_n _O_p_t_i_o_n_s

       --aallll__llooaadd
	   Loads all members of static archive libraries.  See man _l_d(1) for
	   more information.

       --aarrcchh__eerrrroorrss__ffaattaall
	   Cause the errors having to do with files that have the wrong archi-
	   tecture to be fatal.

       --bbiinndd__aatt__llooaadd
	   Causes the output file to be marked such that the dynamic linker
	   will bind all undefined references when the file is loaded or
	   launched.

       --bbuunnddllee
	   Produce a Mach-o bundle format file.	 See man _l_d(1) for more infor-
	   mation.

       --bbuunnddllee__llooaaddeerr _e_x_e_c_u_t_a_b_l_e
	   This specifies the _e_x_e_c_u_t_a_b_l_e that will be loading the build output
	   file being linked. See man _l_d(1) for more information.

       --aalllloowwaabbllee__cclliieenntt  _c_l_i_e_n_t___n_a_m_e
       --aarrcchh__oonnllyy
       --cclliieenntt__nnaammee
       --ccoommppaattiibbiilliittyy__vveerrssiioonn
       --ccuurrrreenntt__vveerrssiioonn
       --ddeeppeennddeennccyy--ffiillee
       --ddyylliibb__ffiillee
       --ddyylliinnkkeerr__iinnssttaallll__nnaammee
       --ddyynnaammiicc
       --ddyynnaammiicclliibb
       --eexxppoorrtteedd__ssyymmbboollss__lliisstt
       --ffiilleelliisstt
       --ffllaatt__nnaammeessppaaccee
       --ffoorrccee__ccppuussuubbttyyppee__AALLLL
       --ffoorrccee__ffllaatt__nnaammeessppaaccee
       --hheeaaddeerrppaadd__mmaaxx__iinnssttaallll__nnaammeess
       --iimmaaggee__bbaassee
       --iinniitt
       --iinnssttaallll__nnaammee
       --kkeeeepp__pprriivvaattee__eexxtteerrnnss
       --mmuullttii__mmoodduullee
       --mmuullttiippllyy__ddeeffiinneedd
       --mmuullttiippllyy__ddeeffiinneedd__uunnuusseedd
       --nnooaallll__llooaadd
       --nnoommuullttiiddeeffss
       --nnoopprreebbiinndd
       --nnoosseegglliinnkkeeddiitt
       --ppaaggeezzeerroo__ssiizzee
       --pprreebbiinndd
       --pprreebbiinndd__aallll__ttwwoolleevveell__mmoodduulleess
       --pprriivvaattee__bbuunnddllee
       --rreeaadd__oonnllyy__rreellooccss
       --sseeccttaalliiggnn
       --sseeccttoobbjjeeccttssyymmbboollss
       --wwhhyyllooaadd
       --sseegg11aaddddrr
       --sseeccttccrreeaattee
       --sseeccttoobbjjeeccttssyymmbboollss
       --sseeccttoorrddeerr
       --sseegg__aaddddrr__ttaabbllee
       --sseegg__aaddddrr__ttaabbllee__ffiilleennaammee
       --sseegglliinnkkeeddiitt
       --sseeggpprroott
       --sseeggss__rreeaadd__oonnllyy__aaddddrr
       --sseeggss__rreeaadd__wwrriittee__aaddddrr
       --ssiinnggllee__mmoodduullee
       --ssttaattiicc
       --ssuubb__lliibbrraarryy
       --ssuubb__uummbbrreellllaa
       --ttwwoolleevveell__nnaammeessppaaccee
       --uummbbrreellllaa
       --uunnddeeffiinneedd
       --uunneexxppoorrtteedd__ssyymmbboollss__lliisstt
       --wweeaakk__rreeffeerreennccee__mmiissmmaattcchheess
       --wwhhaattssllooaaddeedd
	   This options are available for Darwin linker. Darwin linker man
	   page describes them in detail.

       _I_n_t_e_l _3_8_6 _a_n_d _A_M_D _x_8_6_-_6_4 _O_p_t_i_o_n_s

       These --mm options are defined for the i386 and x86-64 family of comput-
       ers:

       --mmccppuu==_c_p_u_-_t_y_p_e
	   Tune to _c_p_u_-_t_y_p_e everything applicable about the generated code,
	   except for the ABI and the set of available instructions.  The
	   choices for _c_p_u_-_t_y_p_e are ii338866, ii448866, ii558866, ii668866, ppeennttiiuumm, ppeennttiiuumm--
	   mmmmxx, ppeennttiiuummpprroo, ppeennttiiuumm22, ppeennttiiuumm33, ppeennttiiuumm44, kk66, kk66--22, kk66--33,
	   aatthhlloonn, aatthhlloonn--ttbbiirrdd, aatthhlloonn--44, aatthhlloonn--xxpp, aatthhlloonn--mmpp, wwiinncchhiipp--cc66,
	   wwiinncchhiipp22 and cc33.

	   While picking a specific _c_p_u_-_t_y_p_e will schedule things appropri-
	   ately for that particular chip, the compiler will not generate any
	   code that does not run on the i386 without the --mmaarrcchh==_c_p_u_-_t_y_p_e
	   option being used.  ii558866 is equivalent to ppeennttiiuumm and ii668866 is
	   equivalent to ppeennttiiuummpprroo.  kk66 and aatthhlloonn are the AMD chips as
	   opposed to the Intel ones.

       --mmaarrcchh==_c_p_u_-_t_y_p_e
	   Generate instructions for the machine type _c_p_u_-_t_y_p_e.	 The choices
	   for _c_p_u_-_t_y_p_e are the same as for --mmccppuu.  Moreover, specifying
	   --mmaarrcchh==_c_p_u_-_t_y_p_e implies --mmccppuu==_c_p_u_-_t_y_p_e.

       --mm338866
       --mm448866
       --mmppeennttiiuumm
       --mmppeennttiiuummpprroo
	   These options are synonyms for --mmccppuu==ii338866, --mmccppuu==ii448866, --mmccppuu==ppeenn--
	   ttiiuumm, and --mmccppuu==ppeennttiiuummpprroo respectively.  These synonyms are depre-
	   cated.

       --mmffppmmaatthh==_u_n_i_t
	   generate floating point arithmetics for selected unit _u_n_i_t.	the
	   choices for _u_n_i_t are:

	   338877 Use the standard 387 floating point coprocessor present major-
	       ity of chips and emulated otherwise.  Code compiled with this
	       option will run almost everywhere.  The temporary results are
	       computed in 80bit precision instead of precision specified by
	       the type resulting in slightly different results compared to
	       most of other chips. See --ffffllooaatt--ssttoorree for more detailed
	       description.

	       This is the default choice for i386 compiler.

	   ssssee Use scalar floating point instructions present in the SSE
	       instruction set.	 This instruction set is supported by Pentium3
	       and newer chips, in the AMD line by Athlon-4, Athlon-xp and
	       Athlon-mp chips.	 The earlier version of SSE instruction set
	       supports only single precision arithmetics, thus the double and
	       extended precision arithmetics is still done using 387.	Later
	       version, present only in Pentium4 and the future AMD x86-64
	       chips supports double precision arithmetics too.

	       For i387 you need to use --mmaarrcchh==_c_p_u_-_t_y_p_e, --mmssssee or --mmssssee22
	       switches to enable SSE extensions and make this option effec-
	       tive.  For x86-64 compiler, these extensions are enabled by
	       default.

	       The resulting code should be considerably faster in majority of
	       cases and avoid the numerical instability problems of 387 code,
	       but may break some existing code that expects temporaries to be
	       80bit.

	       This is the default choice for x86-64 compiler.

	   ssssee,,338877
	       Attempt to utilize both instruction sets at once.  This effec-
	       tively double the amount of available registers and on chips
	       with separate execution units for 387 and SSE the execution
	       resources too.  Use this option with care, as it is still
	       experimental, because gcc register allocator does not model
	       separate functional units well resulting in instable perfor-
	       mance.

       --mmaassmm==_d_i_a_l_e_c_t
	   Output asm instructions using selected _d_i_a_l_e_c_t. Supported choices
	   are iinntteell or aatttt (the default one).

       --mmiieeeeee--ffpp
       --mmnnoo--iieeeeee--ffpp
	   Control whether or not the compiler uses IEEE floating point com-
	   parisons.  These handle correctly the case where the result of a
	   comparison is unordered.

       --mmssoofftt--ffllooaatt
	   Generate output containing library calls for floating point.	 WWaarrnn--
	   iinngg:: the requisite libraries are not part of GCC.  Normally the
	   facilities of the machine's usual C compiler are used, but this
	   can't be done directly in cross-compilation.	 You must make your
	   own arrangements to provide suitable library functions for
	   cross-compilation.

	   On machines where a function returns floating point results in the
	   80387 register stack, some floating point opcodes may be emitted
	   even if --mmssoofftt--ffllooaatt is used.

       --mmnnoo--ffpp--rreett--iinn--338877
	   Do not use the FPU registers for return values of functions.

	   The usual calling convention has functions return values of types
	   "float" and "double" in an FPU register, even if there is no FPU.
	   The idea is that the operating system should emulate an FPU.

	   The option --mmnnoo--ffpp--rreett--iinn--338877 causes such values to be returned in
	   ordinary CPU registers instead.

       --mmnnoo--ffaannccyy--mmaatthh--338877
	   Some 387 emulators do not support the "sin", "cos" and "sqrt"
	   instructions for the 387.  Specify this option to avoid generating
	   those instructions.	This option is the default on FreeBSD, OpenBSD
	   and NetBSD.	This option is overridden when --mmaarrcchh indicates that
	   the target cpu will always have an FPU and so the instruction will
	   not need emulation.	As of revision 2.6.1, these instructions are
	   not generated unless you also use the --ffuunnssaaffee--mmaatthh--ooppttiimmiizzaattiioonnss
	   switch.

       --mmaalliiggnn--ddoouubbllee
       --mmnnoo--aalliiggnn--ddoouubbllee
	   Control whether GCC aligns "double", "long double", and "long long"
	   variables on a two word boundary or a one word boundary.  Aligning
	   "double" variables on a two word boundary will produce code that
	   runs somewhat faster on a PPeennttiiuumm at the expense of more memory.

	   WWaarrnniinngg:: if you use the --mmaalliiggnn--ddoouubbllee switch, structures contain-
	   ing the above types will be aligned differently than the published
	   application binary interface specifications for the 386 and will
	   not be binary compatible with structures in code compiled without
	   that switch.

       --mm112288bbiitt--lloonngg--ddoouubbllee
	   Control the size of "long double" type. i386 application binary
	   interface specify the size to be 12 bytes, while modern architec-
	   tures (Pentium and newer) prefer "long double" aligned to 8 or 16
	   byte boundary.  This is impossible to reach with 12 byte long dou-
	   bles in the array accesses.

	   WWaarrnniinngg:: if you use the --mm112288bbiitt--lloonngg--ddoouubbllee switch, the structures
	   and arrays containing "long double" will change their size as well
	   as function calling convention for function taking "long double"
	   will be modified.

       --mm9966bbiitt--lloonngg--ddoouubbllee
	   Set the size of "long double" to 96 bits as required by the i386
	   application binary interface.  This is the default.

       --mmssvvrr33--sshhlliibb
       --mmnnoo--ssvvrr33--sshhlliibb
	   Control whether GCC places uninitialized local variables into the
	   "bss" or "data" segments.  --mmssvvrr33--sshhlliibb places them into "bss".
	   These options are meaningful only on System V Release 3.

       --mmrrttdd
	   Use a different function-calling convention, in which functions
	   that take a fixed number of arguments return with the "ret" _n_u_m
	   instruction, which pops their arguments while returning.  This
	   saves one instruction in the caller since there is no need to pop
	   the arguments there.

	   You can specify that an individual function is called with this
	   calling sequence with the function attribute ssttddccaallll.  You can also
	   override the --mmrrttdd option by using the function attribute ccddeeccll.

	   WWaarrnniinngg:: this calling convention is incompatible with the one nor-
	   mally used on Unix, so you cannot use it if you need to call
	   libraries compiled with the Unix compiler.

	   Also, you must provide function prototypes for all functions that
	   take variable numbers of arguments (including "printf"); otherwise
	   incorrect code will be generated for calls to those functions.

	   In addition, seriously incorrect code will result if you call a
	   function with too many arguments.  (Normally, extra arguments are
	   harmlessly ignored.)

       --mmrreeggppaarrmm==_n_u_m
	   Control how many registers are used to pass integer arguments.  By
	   default, no registers are used to pass arguments, and at most 3
	   registers can be used.  You can control this behavior for a spe-
	   cific function by using the function attribute rreeggppaarrmm.

	   WWaarrnniinngg:: if you use this switch, and _n_u_m is nonzero, then you must
	   build all modules with the same value, including any libraries.
	   This includes the system libraries and startup modules.

       --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==_n_u_m
	   Attempt to keep the stack boundary aligned to a 2 raised to _n_u_m
	   byte boundary.  If --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy is not specified, the
	   default is 4 (16 bytes or 128 bits), except when optimizing for
	   code size (--OOss), in which case the default is the minimum correct
	   alignment (4 bytes for x86, and 8 bytes for x86-64).

	   On Pentium and PentiumPro, "double" and "long double" values should
	   be aligned to an 8 byte boundary (see --mmaalliiggnn--ddoouubbllee) or suffer
	   significant run time performance penalties.	On Pentium III, the
	   Streaming SIMD Extension (SSE) data type "__m128" suffers similar
	   penalties if it is not 16 byte aligned.

	   To ensure proper alignment of this values on the stack, the stack
	   boundary must be as aligned as that required by any value stored on
	   the stack.  Further, every function must be generated such that it
	   keeps the stack aligned.  Thus calling a function compiled with a
	   higher preferred stack boundary from a function compiled with a
	   lower preferred stack boundary will most likely misalign the stack.
	   It is recommended that libraries that use callbacks always use the
	   default setting.

	   This extra alignment does consume extra stack space, and generally
	   increases code size.	 Code that is sensitive to stack space usage,
	   such as embedded systems and operating system kernels, may want to
	   reduce the preferred alignment to --mmpprreeffeerrrreedd--ssttaacckk--bboouunnddaarryy==22.

       --mmmmmmxx
       --mmnnoo--mmmmxx
       --mmssssee
       --mmnnoo--ssssee
       --mmssssee22
       --mmnnoo--ssssee22
       --mm33ddnnooww
       --mmnnoo--33ddnnooww
	   These switches enable or disable the use of built-in functions that
	   allow direct access to the MMX, SSE and 3Dnow extensions of the
	   instruction set.

	   To have SSE/SSE2 instructions generated automatically from float-
	   ing-point code, see --mmffppmmaatthh==ssssee.

       --mmppuusshh--aarrggss
       --mmnnoo--ppuusshh--aarrggss
	   Use PUSH operations to store outgoing parameters.  This method is
	   shorter and usually equally fast as method using SUB/MOV operations
	   and is enabled by default.  In some cases disabling it may improve
	   performance because of improved scheduling and reduced dependen-
	   cies.

       --mmaaccccuummuullaattee--oouuttggooiinngg--aarrggss
	   If enabled, the maximum amount of space required for outgoing argu-
	   ments will be computed in the function prologue.  This is faster on
	   most modern CPUs because of reduced dependencies, improved schedul-
	   ing and reduced stack usage when preferred stack boundary is not
	   equal to 2.	The drawback is a notable increase in code size.  This
	   switch implies --mmnnoo--ppuusshh--aarrggss.

       --mmtthhrreeaaddss
	   Support thread-safe exception handling on MMiinnggww3322.  Code that
	   relies on thread-safe exception handling must compile and link all
	   code with the --mmtthhrreeaaddss option.  When compiling, --mmtthhrreeaaddss defines
	   --DD__MMTT; when linking, it links in a special thread helper library
	   --llmmiinnggwwtthhrrdd which cleans up per thread exception handling data.

       --mmnnoo--aalliiggnn--ssttrriinnggooppss
	   Do not align destination of inlined string operations.  This switch
	   reduces code size and improves performance in case the destination
	   is already aligned, but gcc don't know about it.

       --mmiinnlliinnee--aallll--ssttrriinnggooppss
	   By default GCC inlines string operations only when destination is
	   known to be aligned at least to 4 byte boundary.  This enables more
	   inlining, increase code size, but may improve performance of code
	   that depends on fast memcpy, strlen and memset for short lengths.

       --mmoommiitt--lleeaaff--ffrraammee--ppooiinntteerr
	   Don't keep the frame pointer in a register for leaf functions.
	   This avoids the instructions to save, set up and restore frame
	   pointers and makes an extra register available in leaf functions.
	   The option --ffoommiitt--ffrraammee--ppooiinntteerr removes the frame pointer for all
	   functions which might make debugging harder.

       These --mm switches are supported in addition to the above on AMD x86-64
       processors in 64-bit environments.

       --mm3322
       --mm6644
	   Generate code for a 32-bit or 64-bit environment.  The 32-bit envi-
	   ronment sets int, long and pointer to 32 bits and generates code
	   that runs on any i386 system.  The 64-bit environment sets int to
	   32 bits and long and pointer to 64 bits and generates code for
	   AMD's x86-64 architecture.

       --mmnnoo--rreedd--zzoonnee
	   Do not use a so called red zone for x86-64 code.  The red zone is
	   mandated by the x86-64 ABI, it is a 128-byte area beyond the loca-
	   tion of the stack pointer that will not be modified by signal or
	   interrupt handlers and therefore can be used for temporary data
	   without adjusting the stack pointer.	 The flag --mmnnoo--rreedd--zzoonnee dis-
	   ables this red zone.

       --mmccmmooddeell==ssmmaallll
	   Generate code for the small code model: the program and its symbols
	   must be linked in the lower 2 GB of the address space.  Pointers
	   are 64 bits.	 Programs can be statically or dynamically linked.
	   This is the default code model.

       --mmccmmooddeell==kkeerrnneell
	   Generate code for the kernel code model.  The kernel runs in the
	   negative 2 GB of the address space.	This model has to be used for
	   Linux kernel code.

       --mmccmmooddeell==mmeeddiiuumm
	   Generate code for the medium model: The program is linked in the
	   lower 2 GB of the address space but symbols can be located anywhere
	   in the address space.  Programs can be statically or dynamically
	   linked, but building of shared libraries are not supported with the
	   medium model.

       --mmccmmooddeell==llaarrggee
	   Generate code for the large model: This model makes no assumptions
	   about addresses and sizes of sections.  Currently GCC does not
	   implement this model.

       OOppttiioonnss ffoorr CCooddee GGeenneerraattiioonn CCoonnvveennttiioonnss

       These machine-independent options control the interface conventions
       used in code generation.

       Most of them have both positive and negative forms; the negative form
       of --ffffoooo would be --ffnnoo--ffoooo.  In the table below, only one of the forms
       is listed---the one which is not the default.  You can figure out the
       other form by either removing nnoo-- or adding it.

       --ffbboouunnddss--cchheecckk
	   For front-ends that support it, generate additional code to check
	   that indices used to access arrays are within the declared range.
	   This is currently only supported by the Java and Fortran 77
	   front-ends, where this option defaults to true and false respec-
	   tively.

       --ffttrraappvv
	   This option generates traps for signed overflow on addition, sub-
	   traction, multiplication operations.

       --ffeexxcceeppttiioonnss
	   Enable exception handling.  Generates extra code needed to propa-
	   gate exceptions.  For some targets, this implies GCC will generate
	   frame unwind information for all functions, which can produce sig-
	   nificant data size overhead, although it does not affect execution.
	   If you do not specify this option, GCC will enable it by default
	   for languages like C++ which normally require exception handling,
	   and disable it for languages like C that do not normally require
	   it.	However, you may need to enable this option when compiling C
	   code that needs to interoperate properly with exception handlers
	   written in C++.  You may also wish to disable this option if you
	   are compiling older C++ programs that don't use exception handling.

       --ffnnoonn--ccaallll--eexxcceeppttiioonnss
	   Generate code that allows trapping instructions to throw excep-
	   tions.  Note that this requires platform-specific runtime support
	   that does not exist everywhere.  Moreover, it only allows _t_r_a_p_p_i_n_g
	   instructions to throw exceptions, i.e. memory references or float-
	   ing point instructions.  It does not allow exceptions to be thrown
	   from arbitrary signal handlers such as "SIGALRM".

       --ffuunnwwiinndd--ttaabblleess
	   Similar to --ffeexxcceeppttiioonnss, except that it will just generate any
	   needed static data, but will not affect the generated code in any
	   other way.  You will normally not enable this option; instead, a
	   language processor that needs this handling would enable it on your
	   behalf.

       --ffaassyynncchhrroonnoouuss--uunnwwiinndd--ttaabblleess
	   Generate unwind table in dwarf2 format, if supported by target
	   machine.  The table is exact at each instruction boundary, so it
	   can be used for stack unwinding from asynchronous events (such as
	   debugger or garbage collector).

       --ffppcccc--ssttrruucctt--rreettuurrnn
	   Return ``short'' "struct" and "union" values in memory like longer
	   ones, rather than in registers.  This convention is less efficient,
	   but it has the advantage of allowing intercallability between GCC-
	   compiled files and files compiled with other compilers, particu-
	   larly the Portable C Compiler (pcc).

	   The precise convention for returning structures in memory depends
	   on the target configuration macros.

	   Short structures and unions are those whose size and alignment
	   match that of some integer type.

	   WWaarrnniinngg:: code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn switch is not
	   binary compatible with code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn
	   switch.  Use it to conform to a non-default application binary
	   interface.

       --ffrreegg--ssttrruucctt--rreettuurrnn
	   Return "struct" and "union" values in registers when possible.
	   This is more efficient for small structures than
	   --ffppcccc--ssttrruucctt--rreettuurrnn.

	   If you specify neither --ffppcccc--ssttrruucctt--rreettuurrnn nor --ffrreegg--ssttrruucctt--rreettuurrnn,
	   GCC defaults to whichever convention is standard for the target.
	   If there is no standard convention, GCC defaults to
	   --ffppcccc--ssttrruucctt--rreettuurrnn, except on targets where GCC is the principal
	   compiler.  In those cases, we can choose the standard, and we chose
	   the more efficient register return alternative.

	   WWaarrnniinngg:: code compiled with the --ffrreegg--ssttrruucctt--rreettuurrnn switch is not
	   binary compatible with code compiled with the --ffppcccc--ssttrruucctt--rreettuurrnn
	   switch.  Use it to conform to a non-default application binary
	   interface.

       --ffsshhoorrtt--eennuummss
	   Allocate to an "enum" type only as many bytes as it needs for the
	   declared range of possible values.  Specifically, the "enum" type
	   will be equivalent to the smallest integer type which has enough
	   room.

	   WWaarrnniinngg:: the --ffsshhoorrtt--eennuummss switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--ddoouubbllee
	   Use the same size for "double" as for "float".

	   WWaarrnniinngg:: the --ffsshhoorrtt--ddoouubbllee switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhoorrtt--wwcchhaarr
	   Override the underlying type for wwcchhaarr__tt to be sshhoorrtt uunnssiiggnneedd iinntt
	   instead of the default for the target.  This option is useful for
	   building programs to run under WINE.

	   WWaarrnniinngg:: the --ffsshhoorrtt--wwcchhaarr switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Use it to conform to a non-default application binary interface.

       --ffsshhaarreedd--ddaattaa
	   Requests that the data and non-"const" variables of this compila-
	   tion be shared data rather than private data.  The distinction
	   makes sense only on certain operating systems, where shared data is
	   shared between processes running the same program, while private
	   data exists in one copy per process.

       --ffnnoo--ccoommmmoonn
	   In C, allocate even uninitialized global variables in the data sec-
	   tion of the object file, rather than generating them as common
	   blocks.  This has the effect that if the same variable is declared
	   (without "extern") in two different compilations, you will get an
	   error when you link them.  The only reason this might be useful is
	   if you wish to verify that the program will work on other systems
	   which always work this way.

       --ffnnoo--iiddeenntt
	   Ignore the ##iiddeenntt directive.

       --ffnnoo--ggnnuu--lliinnkkeerr
	   Do not output global initializations (such as C++ constructors and
	   destructors) in the form used by the GNU linker (on systems where
	   the GNU linker is the standard method of handling them).  Use this
	   option when you want to use a non-GNU linker, which also requires
	   using the ccoolllleecctt22 program to make sure the system linker includes
	   constructors and destructors.  (ccoolllleecctt22 is included in the GCC
	   distribution.)  For systems which _m_u_s_t use ccoolllleecctt22, the compiler
	   driver ggcccc is configured to do this automatically.

       --ffiinnhhiibbiitt--ssiizzee--ddiirreeccttiivvee
	   Don't output a ".size" assembler directive, or anything else that
	   would cause trouble if the function is split in the middle, and the
	   two halves are placed at locations far apart in memory.  This
	   option is used when compiling _c_r_t_s_t_u_f_f_._c; you should not need to
	   use it for anything else.

       --ffvveerrbboossee--aassmm
	   Put extra commentary information in the generated assembly code to
	   make it more readable.  This option is generally only of use to
	   those who actually need to read the generated assembly code (per-
	   haps while debugging the compiler itself).

	   --ffnnoo--vveerrbboossee--aassmm, the default, causes the extra information to be
	   omitted and is useful when comparing two assembler files.

       --ffvvoollaattiillee
	   Consider all memory references through pointers to be volatile.

       --ffvvoollaattiillee--gglloobbaall
	   Consider all memory references to extern and global data items to
	   be volatile.	 GCC does not consider static data items to be
	   volatile because of this switch.

       --ffvvoollaattiillee--ssttaattiicc
	   Consider all memory references to static data to be volatile.

       --ffppiicc
	   Generate position-independent code (PIC) suitable for use in a
	   shared library, if supported for the target machine.	 Such code
	   accesses all constant addresses through a global offset table
	   (GOT).  The dynamic loader resolves the GOT entries when the pro-
	   gram starts (the dynamic loader is not part of GCC; it is part of
	   the operating system).  If the GOT size for the linked executable
	   exceeds a machine-specific maximum size, you get an error message
	   from the linker indicating that --ffppiicc does not work; in that case,
	   recompile with --ffPPIICC instead.  (These maximums are 16k on the m88k,
	   8k on the SPARC, and 32k on the m68k and RS/6000.  The 386 has no
	   such limit.)

	   Position-independent code requires special support, and therefore
	   works only on certain machines.  For the 386, GCC supports PIC for
	   System V but not for the Sun 386i.  Code generated for the IBM
	   RS/6000 is always position-independent.

	   --ffppiicc is not supported on Mac OS X.

       --ffPPIICC
	   If supported for the target machine, emit position-independent
	   code, suitable for dynamic linking and avoiding any limit on the
	   size of the global offset table.  This option makes a difference on
	   the m68k, m88k, and the SPARC.

	   Position-independent code requires special support, and therefore
	   works only on certain machines.

	   --ffPPIICC is the default on Darwin and Mac OS X.

       --ffffiixxeedd--_r_e_g
	   Treat the register named _r_e_g as a fixed register; generated code
	   should never refer to it (except perhaps as a stack pointer, frame
	   pointer or in some other fixed role).

	   _r_e_g must be the name of a register.	The register names accepted
	   are machine-specific and are defined in the "REGISTER_NAMES" macro
	   in the machine description macro file.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffccaallll--uusseedd--_r_e_g
	   Treat the register named _r_e_g as an allocable register that is clob-
	   bered by function calls.  It may be allocated for temporaries or
	   variables that do not live across a call.  Functions compiled this
	   way will not save and restore the register _r_e_g.

	   It is an error to used this flag with the frame pointer or stack
	   pointer.  Use of this flag for other registers that have fixed per-
	   vasive roles in the machine's execution model will produce disas-
	   trous results.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffccaallll--ssaavveedd--_r_e_g
	   Treat the register named _r_e_g as an allocable register saved by
	   functions.  It may be allocated even for temporaries or variables
	   that live across a call.  Functions compiled this way will save and
	   restore the register _r_e_g if they use it.

	   It is an error to used this flag with the frame pointer or stack
	   pointer.  Use of this flag for other registers that have fixed per-
	   vasive roles in the machine's execution model will produce disas-
	   trous results.

	   A different sort of disaster will result from the use of this flag
	   for a register in which function values may be returned.

	   This flag does not have a negative form, because it specifies a
	   three-way choice.

       --ffppaacckk--ssttrruucctt
	   Pack all structure members together without holes.

	   WWaarrnniinngg:: the --ffppaacckk--ssttrruucctt switch causes GCC to generate code that
	   is not binary compatible with code generated without that switch.
	   Additionally, it makes the code suboptimal.	Use it to conform to a
	   non-default application binary interface.

       --ffiinnssttrruummeenntt--ffuunnccttiioonnss
	   Generate instrumentation calls for entry and exit to functions.
	   Just after function entry and just before function exit, the fol-
	   lowing profiling functions will be called with the address of the
	   current function and its call site.	(On some platforms,
	   "__builtin_return_address" does not work beyond the current func-
	   tion, so the call site information may not be available to the pro-
	   filing functions otherwise.)

		   void __cyg_profile_func_enter (void *this_fn,
						  void *call_site);
		   void __cyg_profile_func_exit	 (void *this_fn,
						  void *call_site);

	   The first argument is the address of the start of the current func-
	   tion, which may be looked up exactly in the symbol table.

	   This instrumentation is also done for functions expanded inline in
	   other functions.  The profiling calls will indicate where, concep-
	   tually, the inline function is entered and exited.  This means that
	   addressable versions of such functions must be available.  If all
	   your uses of a function are expanded inline, this may mean an addi-
	   tional expansion of code size.  If you use eexxtteerrnn iinnlliinnee in your C
	   code, an addressable version of such functions must be provided.
	   (This is normally the case anyways, but if you get lucky and the
	   optimizer always expands the functions inline, you might have got-
	   ten away without providing static copies.)

	   A function may be given the attribute "no_instrument_function", in
	   which case this instrumentation will not be done.  This can be
	   used, for example, for the profiling functions listed above, high-
	   priority interrupt routines, and any functions from which the pro-
	   filing functions cannot safely be called (perhaps signal handlers,
	   if the profiling routines generate output or allocate memory).

       --ffssttaacckk--cchheecckk
	   Generate code to verify that you do not go beyond the boundary of
	   the stack.  You should specify this flag if you are running in an
	   environment with multiple threads, but only rarely need to specify
	   it in a single-threaded environment since stack overflow is auto-
	   matically detected on nearly all systems if there is only one
	   stack.

	   Note that this switch does not actually cause checking to be done;
	   the operating system must do that.  The switch causes generation of
	   code to ensure that the operating system sees the stack being
	   extended.

       --ffssttaacckk--lliimmiitt--rreeggiisstteerr==_r_e_g
       --ffssttaacckk--lliimmiitt--ssyymmbbooll==_s_y_m
       --ffnnoo--ssttaacckk--lliimmiitt
	   Generate code to ensure that the stack does not grow beyond a cer-
	   tain value, either the value of a register or the address of a sym-
	   bol.	 If the stack would grow beyond the value, a signal is raised.
	   For most targets, the signal is raised before the stack overruns
	   the boundary, so it is possible to catch the signal without taking
	   special precautions.

	   For instance, if the stack starts at absolute address 00xx8800000000000000
	   and grows downwards, you can use the flags --ffssttaacckk--lliimmiitt--ssyymm--
	   bbooll==____ssttaacckk__lliimmiitt and --WWll,,----ddeeffssyymm,,____ssttaacckk__lliimmiitt==00xx77ffffee00000000 to
	   enforce a stack limit of 128KB.  Note that this may only work with
	   the GNU linker.

       --ffaarrgguummeenntt--aalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass
       --ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall
	   Specify the possible relationships among parameters and between
	   parameters and global data.

	   --ffaarrgguummeenntt--aalliiaass specifies that arguments (parameters) may alias
	   each other and may alias global storage.--ffaarrgguummeenntt--nnooaalliiaass speci-
	   fies that arguments do not alias each other, but may alias global
	   storage.--ffaarrgguummeenntt--nnooaalliiaass--gglloobbaall specifies that arguments do not
	   alias each other and do not alias global storage.

	   Each language will automatically use whatever option is required by
	   the language standard.  You should not need to use these options
	   yourself.

       --fflleeaaddiinngg--uunnddeerrssccoorree
	   This option and its counterpart, --ffnnoo--lleeaaddiinngg--uunnddeerrssccoorree, forcibly
	   change the way C symbols are represented in the object file.	 One
	   use is to help link with legacy assembly code.

	   WWaarrnniinngg:: the --fflleeaaddiinngg--uunnddeerrssccoorree switch causes GCC to generate
	   code that is not binary compatible with code generated without that
	   switch.  Use it to conform to a non-default application binary
	   interface.  Not all targets provide complete support for this
	   switch.

       --ffttllss--mmooddeell==_m_o_d_e_l
	   Alter the thread-local storage model to be used.  The _m_o_d_e_l argu-
	   ment should be one of "global-dynamic", "local-dynamic", "ini-
	   tial-exec" or "local-exec".

	   The default without --ffppiicc is "initial-exec"; with --ffppiicc the default
	   is "global-dynamic".

EENNVVIIRROONNMMEENNTT
       This section describes several environment variables that affect how
       GCC operates.  Some of them work by specifying directories or prefixes
       to use when searching for various kinds of files.  Some are used to
       specify other aspects of the compilation environment.

       Note that you can also specify places to search using options such as
       --BB, --II and --LL.  These take precedence over places specified using envi-
       ronment variables, which in turn take precedence over those specified
       by the configuration of GCC.

       LLAANNGG
       LLCC__CCTTYYPPEE
       LLCC__MMEESSSSAAGGEESS
       LLCC__AALLLL
	   These environment variables control the way that GCC uses localiza-
	   tion information that allow GCC to work with different national
	   conventions.	 GCC inspects the locale categories LLCC__CCTTYYPPEE and
	   LLCC__MMEESSSSAAGGEESS if it has been configured to do so.  These locale cate-
	   gories can be set to any value supported by your installation.  A
	   typical value is eenn__UUKK for English in the United Kingdom.

	   The LLCC__CCTTYYPPEE environment variable specifies character classifica-
	   tion.  GCC uses it to determine the character boundaries in a
	   string; this is needed for some multibyte encodings that contain
	   quote and escape characters that would otherwise be interpreted as
	   a string end or escape.

	   The LLCC__MMEESSSSAAGGEESS environment variable specifies the language to use
	   in diagnostic messages.

	   If the LLCC__AALLLL environment variable is set, it overrides the value
	   of LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS; otherwise, LLCC__CCTTYYPPEE and LLCC__MMEESSSSAAGGEESS
	   default to the value of the LLAANNGG environment variable.  If none of
	   these variables are set, GCC defaults to traditional C English
	   behavior.

       TTMMPPDDIIRR
	   If TTMMPPDDIIRR is set, it specifies the directory to use for temporary
	   files.  GCC uses temporary files to hold the output of one stage of
	   compilation which is to be used as input to the next stage: for
	   example, the output of the preprocessor, which is the input to the
	   compiler proper.

       GGCCCC__EEXXEECC__PPRREEFFIIXX
	   If GGCCCC__EEXXEECC__PPRREEFFIIXX is set, it specifies a prefix to use in the
	   names of the subprograms executed by the compiler.  No slash is
	   added when this prefix is combined with the name of a subprogram,
	   but you can specify a prefix that ends with a slash if you wish.

	   If GGCCCC__EEXXEECC__PPRREEFFIIXX is not set, GCC will attempt to figure out an
	   appropriate prefix to use based on the pathname it was invoked
	   with.

	   If GCC cannot find the subprogram using the specified prefix, it
	   tries looking in the usual places for the subprogram.

	   The default value of GGCCCC__EEXXEECC__PPRREEFFIIXX is _p_r_e_f_i_x_/_l_i_b_/_g_c_c_-_l_i_b_/ where
	   _p_r_e_f_i_x is the value of "prefix" when you ran the _c_o_n_f_i_g_u_r_e script.

	   Other prefixes specified with --BB take precedence over this prefix.

	   This prefix is also used for finding files such as _c_r_t_0_._o that are
	   used for linking.

	   In addition, the prefix is used in an unusual way in finding the
	   directories to search for header files.  For each of the standard
	   directories whose name normally begins with //uussrr//llooccaall//lliibb//ggcccc--lliibb
	   (more precisely, with the value of GGCCCC__IINNCCLLUUDDEE__DDIIRR), GCC tries
	   replacing that beginning with the specified prefix to produce an
	   alternate directory name.  Thus, with --BBffoooo//, GCC will search
	   _f_o_o_/_b_a_r where it would normally search _/_u_s_r_/_l_o_c_a_l_/_l_i_b_/_b_a_r.  These
	   alternate directories are searched first; the standard directories
	   come next.

       CCOOMMPPIILLEERR__PPAATTHH
	   The value of CCOOMMPPIILLEERR__PPAATTHH is a colon-separated list of directo-
	   ries, much like PPAATTHH.  GCC tries the directories thus specified
	   when searching for subprograms, if it can't find the subprograms
	   using GGCCCC__EEXXEECC__PPRREEFFIIXX.

       LLIIBBRRAARRYY__PPAATTHH
	   The value of LLIIBBRRAARRYY__PPAATTHH is a colon-separated list of directories,
	   much like PPAATTHH.  When configured as a native compiler, GCC tries
	   the directories thus specified when searching for special linker
	   files, if it can't find them using GGCCCC__EEXXEECC__PPRREEFFIIXX.	Linking using
	   GCC also uses these directories when searching for ordinary
	   libraries for the --ll option (but directories specified with --LL come
	   first).

       LLAANNGG
	   This variable is used to pass locale information to the compiler.
	   One way in which this information is used is to determine the char-
	   acter set to be used when character literals, string literals and
	   comments are parsed in C and C++.  When the compiler is configured
	   to allow multibyte characters, the following values for LLAANNGG are
	   recognized:

	   CC--JJIISS
	       Recognize JIS characters.

	   CC--SSJJIISS
	       Recognize SJIS characters.

	   CC--EEUUCCJJPP
	       Recognize EUCJP characters.

	   If LLAANNGG is not defined, or if it has some other value, then the
	   compiler will use mblen and mbtowc as defined by the default locale
	   to recognize and translate multibyte characters.

       Some additional environments variables affect the behavior of the pre-
       processor.

       CCPPAATTHH
       CC__IINNCCLLUUDDEE__PPAATTHH
       CCPPLLUUSS__IINNCCLLUUDDEE__PPAATTHH
       OOBBJJCC__IINNCCLLUUDDEE__PPAATTHH
	   Each variable's value is a list of directories separated by a spe-
	   cial character, much like PPAATTHH, in which to look for header files.
	   The special character, "PATH_SEPARATOR", is target-dependent and
	   determined at GCC build time.  For Windows-based targets it is a
	   semicolon, and for almost all other targets it is a colon.

	   CCPPAATTHH specifies a list of directories to be searched as if speci-
	   fied with --II, but after any paths given with --II options on the com-
	   mand line.  This environment variable is used regardless of which
	   language is being preprocessed.

	   The remaining environment variables apply only when preprocessing
	   the particular language indicated.  Each specifies a list of direc-
	   tories to be searched as if specified with --iissyysstteemm, but after any
	   paths given with --iissyysstteemm options on the command line.

	   In all these variables, an empty element instructs the compiler to
	   search its current working directory.  Empty elements can appear at
	   the beginning or end of a path.  For instance, if the value of
	   CCPPAATTHH is ":/special/include", that has the same effect as
	   --II.. --II//ssppeecciiaall//iinncclluuddee.

       DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT
	   If this variable is set, its value specifies how to output depen-
	   dencies for Make based on the non-system header files processed by
	   the compiler.  System header files are ignored in the dependency
	   output.

	   The value of DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT can be just a file name, in which
	   case the Make rules are written to that file, guessing the target
	   name from the source file name.  Or the value can have the form
	   _f_i_l_e _t_a_r_g_e_t, in which case the rules are written to file _f_i_l_e using
	   _t_a_r_g_e_t as the target name.

	   In other words, this environment variable is equivalent to combin-
	   ing the options --MMMM and --MMFF, with an optional --MMTT switch too.

       SSUUNNPPRROO__DDEEPPEENNDDEENNCCIIEESS
	   This variable is the same as DDEEPPEENNDDEENNCCIIEESS__OOUUTTPPUUTT (see above),
	   except that system header files are not ignored, so it implies --MM
	   rather than --MMMM.  However, the dependence on the main input file is
	   omitted.

BBUUGGSS
       To report bugs to Apple, see <hhttttpp::////ddeevveellooppeerr..aappppllee..ccoomm//bbuuggrreeppoorrtteerr>.

FFOOOOTTNNOOTTEESS
       1.  On some systems, ggcccc --sshhaarreedd needs to build supplementary stub code
	   for constructors to work.  On multi-libbed systems, ggcccc --sshhaarreedd
	   must select the correct support libraries to link against.  Failing
	   to supply the correct flags may lead to subtle defects.  Supplying
	   them in cases where they are not necessary is innocuous.

SSEEEE AALLSSOO
       _g_p_l(7), _g_f_d_l(7), _f_s_f_-_f_u_n_d_i_n_g(7), _c_p_p(1), _g_c_o_v(1), _g_7_7(1), _a_s(1), _l_d(1),
       _g_d_b(1), _a_d_b(1), _d_b_x(1), _s_d_b(1), _g_c_c___s_e_l_e_c_t(1) and the Info entries for
       _g_c_c, _c_p_p, _g_7_7, _a_s, _l_d, _b_i_n_u_t_i_l_s and _g_d_b.

AAUUTTHHOORR
       See the Info entry for ggcccc, or <hhttttpp::////ggcccc..ggnnuu..oorrgg//oonnlliinneeddooccss//ggcccc//CCoonn--
       ttrriibbuuttoorrss..hhttmmll>, for contributors to GCC.

CCOOPPYYRRIIGGHHTT
       Copyright (c) 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
       1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.

       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2 or
       any later version published by the Free Software Foundation; with the
       Invariant Sections being ``GNU General Public License'' and ``Funding
       Free Software'', the Front-Cover texts being (a) (see below), and with
       the Back-Cover Texts being (b) (see below).  A copy of the license is
       included in the _g_f_d_l(7) man page.

       (a) The FSF's Front-Cover Text is:

	    A GNU Manual

       (b) The FSF's Back-Cover Text is:

	    You have freedom to copy and modify this GNU Manual, like GNU
	    software.  Copies published by the Free Software Foundation raise
	    funds for GNU development.



gcc-3.3				  2004-03-29				GCC(1)
